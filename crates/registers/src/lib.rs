#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)"]
    pub trait RawReg:
        Copy
        + Default
        + From<bool>
        + core::ops::BitOr<Output = Self>
        + core::ops::BitAnd<Output = Self>
        + core::ops::BitOrAssign
        + core::ops::BitAndAssign
        + core::ops::Not<Output = Self>
        + core::ops::Shl<u8, Output = Self>
    {
        #[doc = " Mask for bits of width `WI`"]
        fn mask<const WI: u8>() -> Self;
        #[doc = " Mask for bits of width 1"]
        fn one() -> Self;
    }
    macro_rules! raw_reg {
        ($ U : ty , $ size : literal , $ mask : ident) => {
            impl RawReg for $U {
                #[inline(always)]
                fn mask<const WI: u8>() -> Self {
                    $mask::<WI>()
                }
                #[inline(always)]
                fn one() -> Self {
                    1
                }
            }
            const fn $mask<const WI: u8>() -> $U {
                <$U>::MAX >> ($size - WI)
            }
        };
    }
    raw_reg!(u8, 8, mask_u8);
    raw_reg!(u16, 16, mask_u16);
    raw_reg!(u32, 32, mask_u32);
    raw_reg!(u64, 64, mask_u64);
    #[doc = " Raw register type"]
    pub trait RegisterSpec {
        #[doc = " The address of this register."]
        const ADDRESS: u8;
    }
    #[doc = " Trait implemented by readable registers to enable the `read` method."]
    #[doc = ""]
    #[doc = " Registers marked with `Writable` can be also be `modify`'ed."]
    pub trait Readable: RegisterSpec {
        #[doc = " Result from a call to `read` and argument to `modify`."]
        type Reader: From<u8> + Into<u8> + From<R<Self>> + core::ops::Deref<Target = R<Self>>;
    }
    #[doc = " Trait implemented by writeable registers."]
    #[doc = ""]
    #[doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
    #[doc = ""]
    #[doc = " Registers marked with `Readable` can be also be `modify`'ed."]
    pub trait Writable: RegisterSpec {
        #[doc = " Writer type argument to `write`, et al."]
        type Writer: From<u8> + Into<u8> + From<W<Self>> + core::ops::DerefMut<Target = W<Self>>;
        #[doc = " Specifies the register bits that are not changed if you pass `1` and are changed if you pass `0`"]
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8;
        #[doc = " Specifies the register bits that are not changed if you pass `0` and are changed if you pass `1`"]
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8;
    }
    #[doc = " Reset value of the register."]
    #[doc = ""]
    #[doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
    #[doc = " register by using the `reset` method."]
    pub trait Resettable: RegisterSpec {
        #[doc = " Reset value of the register."]
        const RESET_VALUE: u8;
        #[doc = " Reset value of the register."]
        #[inline(always)]
        fn reset_value() -> u8 {
            Self::RESET_VALUE
        }
    }
    #[doc = " Register reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
    #[doc = " method."]
    pub struct R<REG: RegisterSpec + ?Sized> {
        pub(crate) bits: u8,
        pub(crate) _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> R<REG> {
        #[doc = " Reads raw bits from register."]
        #[inline(always)]
        pub fn bits(&self) -> u8 {
            self.bits
        }
    }
    impl<REG: RegisterSpec, FI> PartialEq<FI> for R<REG>
    where
        FI: Copy,
        u8: From<FI>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&u8::from(*other))
        }
    }
    #[doc = " Register writer."]
    #[doc = ""]
    #[doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
    pub struct W<REG: RegisterSpec + ?Sized> {
        #[doc = "Writable bits"]
        pub(crate) bits: u8,
        pub(crate) _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> W<REG> {
        #[doc = " Writes raw bits to the register."]
        #[doc = ""]
        #[doc = " # Safety"]
        #[doc = ""]
        #[doc = " Read datasheet or reference manual to find what values are allowed to pass."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    #[doc(hidden)]
    pub struct FieldReaderRaw<T> {
        pub(crate) bits: u8,
        _reg: marker::PhantomData<T>,
    }
    impl<FI> FieldReaderRaw<FI> {
        #[doc = " Creates a new instance of the reader."]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(bits: u8) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
    }
    #[doc(hidden)]
    pub struct BitReaderRaw<T> {
        pub(crate) bits: bool,
        _reg: marker::PhantomData<T>,
    }
    impl<FI> BitReaderRaw<FI> {
        #[doc = " Creates a new instance of the reader."]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(bits: bool) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
    }
    #[doc = " Field reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of fields."]
    pub type FieldReader<FI> = FieldReaderRaw<FI>;
    #[doc = " Bit-wise field reader"]
    pub type BitReader<FI> = BitReaderRaw<FI>;
    impl<FI> FieldReader<FI> {
        #[doc = " Reads raw bits from field."]
        #[inline(always)]
        pub fn bits(&self) -> u8 {
            self.bits
        }
    }
    impl<FI> PartialEq<FI> for FieldReader<FI>
    where
        FI: Copy,
        u8: From<FI>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&u8::from(*other))
        }
    }
    impl<FI> PartialEq<FI> for BitReader<FI>
    where
        FI: Copy,
        bool: From<FI>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&bool::from(*other))
        }
    }
    impl<FI> BitReader<FI> {
        #[doc = " Value of the field as raw bits."]
        #[inline(always)]
        pub fn bit(&self) -> bool {
            self.bits
        }
        #[doc = " Returns `true` if the bit is clear (0)."]
        #[inline(always)]
        pub fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = " Returns `true` if the bit is set (1)."]
        #[inline(always)]
        pub fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    #[doc(hidden)]
    pub struct Safe;
    #[doc(hidden)]
    pub struct Unsafe;
    #[doc(hidden)]
    pub struct FieldWriterRaw<'a, REG, N, FI, Safety, const WI: u8, const O: u8>
    where
        REG: Writable + RegisterSpec,
        N: From<FI>,
    {
        pub(crate) w: &'a mut REG::Writer,
        _field: marker::PhantomData<(N, FI, Safety)>,
    }
    impl<'a, REG, N, FI, Safety, const WI: u8, const O: u8>
        FieldWriterRaw<'a, REG, N, FI, Safety, WI, O>
    where
        REG: Writable + RegisterSpec,
        N: From<FI>,
    {
        #[doc = " Creates a new instance of the writer"]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(w: &'a mut REG::Writer) -> Self {
            Self {
                w,
                _field: marker::PhantomData,
            }
        }
    }
    #[doc(hidden)]
    pub struct BitWriterRaw<'a, REG, FI, M, const O: u8>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        pub(crate) w: &'a mut REG::Writer,
        _field: marker::PhantomData<(FI, M)>,
    }
    impl<'a, REG, FI, M, const O: u8> BitWriterRaw<'a, REG, FI, M, O>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Creates a new instance of the writer"]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(w: &'a mut REG::Writer) -> Self {
            Self {
                w,
                _field: marker::PhantomData,
            }
        }
    }
    #[doc = " Write field Proxy with unsafe `bits`"]
    pub type FieldWriter<'a, REG, N, FI, const WI: u8, const O: u8> =
        FieldWriterRaw<'a, REG, N, FI, Unsafe, WI, O>;
    #[doc = " Write field Proxy with safe `bits`"]
    pub type FieldWriterSafe<'a, REG, N, FI, const WI: u8, const O: u8> =
        FieldWriterRaw<'a, REG, N, FI, Safe, WI, O>;
    impl<'a, REG, N, FI, const WI: u8, const OF: u8> FieldWriter<'a, REG, N, FI, WI, OF>
    where
        REG: Writable + RegisterSpec,
        N: From<FI>,
    {
        #[doc = " Field width"]
        pub const WIDTH: u8 = WI;
    }
    impl<'a, REG, N, FI, const WI: u8, const OF: u8> FieldWriterSafe<'a, REG, N, FI, WI, OF>
    where
        REG: Writable + RegisterSpec,
        N: From<FI>,
    {
        #[doc = " Field width"]
        pub const WIDTH: u8 = WI;
    }
    macro_rules! bit_proxy {
        ($ writer : ident , $ mwv : ident) => {
            #[doc(hidden)]
            pub struct $mwv;
            #[doc = " Bit-wise write field proxy"]
            pub type $writer<'a, REG, FI, const O: u8> = BitWriterRaw<'a, REG, FI, $mwv, O>;
            impl<'a, REG, FI, const OF: u8> $writer<'a, REG, FI, OF>
            where
                REG: Writable + RegisterSpec,
                bool: From<FI>,
            {
                #[doc = " Field width"]
                pub const WIDTH: u8 = 1;
            }
        };
    }
    macro_rules! impl_bit_proxy {
        ($ writer : ident) => {
            impl<'a, REG, FI, const OF: u8> $writer<'a, REG, FI, OF>
            where
                REG: Writable + RegisterSpec,
                bool: From<FI>,
            {
                #[doc = " Writes bit to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut REG::Writer {
                    self.w.bits &= !(<u8 as RawReg>::one() << OF);
                    self.w.bits |= (u8::from(value) & <u8 as RawReg>::one()) << OF;
                    self.w
                }
                #[doc = " Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: FI) -> &'a mut REG::Writer {
                    self.bit(bool::from(variant))
                }
            }
        };
    }
    bit_proxy!(BitWriter, BitM);
    bit_proxy!(BitWriter1S, Bit1S);
    bit_proxy!(BitWriter0C, Bit0C);
    bit_proxy!(BitWriter1C, Bit1C);
    bit_proxy!(BitWriter0S, Bit0S);
    bit_proxy!(BitWriter1T, Bit1T);
    bit_proxy!(BitWriter0T, Bit0T);
    impl<'a, REG, N, FI, const WI: u8, const OF: u8> FieldWriter<'a, REG, N, FI, WI, OF>
    where
        REG: Writable + RegisterSpec,
        u8: From<N>,
        N: From<FI>,
    {
        #[doc = " Writes raw bits to the field"]
        #[doc = ""]
        #[doc = " # Safety"]
        #[doc = ""]
        #[doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
        #[inline(always)]
        pub unsafe fn bits(self, value: N) -> &'a mut REG::Writer {
            self.w.bits &= !(<u8 as RawReg>::mask::<WI>() << OF);
            self.w.bits |= (u8::from(value) & <u8 as RawReg>::mask::<WI>()) << OF;
            self.w
        }
        #[doc = " Writes `variant` to the field"]
        #[inline(always)]
        pub fn variant(self, variant: FI) -> &'a mut REG::Writer {
            unsafe { self.bits(N::from(variant)) }
        }
    }
    impl<'a, REG, N, FI, const WI: u8, const OF: u8> FieldWriterSafe<'a, REG, N, FI, WI, OF>
    where
        REG: Writable + RegisterSpec,
        u8: From<N>,
        N: From<FI>,
    {
        #[doc = " Writes raw bits to the field"]
        #[inline(always)]
        pub fn bits(self, value: N) -> &'a mut REG::Writer {
            self.w.bits &= !(<u8 as RawReg>::mask::<WI>() << OF);
            self.w.bits |= (u8::from(value) & <u8 as RawReg>::mask::<WI>()) << OF;
            self.w
        }
        #[doc = " Writes `variant` to the field"]
        #[inline(always)]
        pub fn variant(self, variant: FI) -> &'a mut REG::Writer {
            self.bits(N::from(variant))
        }
    }
    impl_bit_proxy!(BitWriter);
    impl_bit_proxy!(BitWriter1S);
    impl_bit_proxy!(BitWriter0C);
    impl_bit_proxy!(BitWriter1C);
    impl_bit_proxy!(BitWriter0S);
    impl_bit_proxy!(BitWriter1T);
    impl_bit_proxy!(BitWriter0T);
    impl<'a, REG, FI, const OF: u8> BitWriter<'a, REG, FI, OF>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Sets the field bit"]
        #[inline(always)]
        pub fn set_bit(self) -> &'a mut REG::Writer {
            self.w.bits |= <u8 as RawReg>::one() << OF;
            self.w
        }
        #[doc = " Clears the field bit"]
        #[inline(always)]
        pub fn clear_bit(self) -> &'a mut REG::Writer {
            self.w.bits &= !(<u8 as RawReg>::one() << OF);
            self.w
        }
    }
    impl<'a, REG, FI, const OF: u8> BitWriter1S<'a, REG, FI, OF>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Sets the field bit"]
        #[inline(always)]
        pub fn set_bit(self) -> &'a mut REG::Writer {
            self.w.bits |= <u8 as RawReg>::one() << OF;
            self.w
        }
    }
    impl<'a, REG, FI, const OF: u8> BitWriter0C<'a, REG, FI, OF>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Clears the field bit"]
        #[inline(always)]
        pub fn clear_bit(self) -> &'a mut REG::Writer {
            self.w.bits &= !(<u8 as RawReg>::one() << OF);
            self.w
        }
    }
    impl<'a, REG, FI, const OF: u8> BitWriter1C<'a, REG, FI, OF>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Clears the field bit by passing one"]
        #[inline(always)]
        pub fn clear_bit_by_one(self) -> &'a mut REG::Writer {
            self.w.bits |= <u8 as RawReg>::one() << OF;
            self.w
        }
    }
    impl<'a, REG, FI, const OF: u8> BitWriter0S<'a, REG, FI, OF>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Sets the field bit by passing zero"]
        #[inline(always)]
        pub fn set_bit_by_zero(self) -> &'a mut REG::Writer {
            self.w.bits &= !(<u8 as RawReg>::one() << OF);
            self.w
        }
    }
    impl<'a, REG, FI, const OF: u8> BitWriter1T<'a, REG, FI, OF>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Toggle the field bit by passing one"]
        #[inline(always)]
        pub fn toggle_bit(self) -> &'a mut REG::Writer {
            self.w.bits |= <u8 as RawReg>::one() << OF;
            self.w
        }
    }
    impl<'a, REG, FI, const OF: u8> BitWriter0T<'a, REG, FI, OF>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Toggle the field bit by passing zero"]
        #[inline(always)]
        pub fn toggle_bit(self) -> &'a mut REG::Writer {
            self.w.bits &= !(<u8 as RawReg>::one() << OF);
            self.w
        }
    }
}
pub use srr::SRR;
#[doc = "Software Reset Register"]
pub mod srr {
    #[doc = "Register `SRR` reader"]
    pub struct R(crate::R<SRR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SRR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SRR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SRR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SRR` writer"]
    pub struct W(crate::W<SRR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SRR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SRR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SRR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOFTWARE_RESET` writer - Software Reset"]
    pub type SOFTWARE_RESET_W<'a, const O: u8> = crate::BitWriter<'a, SRR, bool, O>;
    #[doc = "Field `WARNING_CONDITION_FLAG` reader - Warning condition flag"]
    pub type WARNING_CONDITION_FLAG_R = crate::BitReader<bool>;
    impl R {
        #[doc = "Bit 0 - Warning condition flag"]
        #[inline(always)]
        pub fn warning_condition_flag(&self) -> WARNING_CONDITION_FLAG_R {
            WARNING_CONDITION_FLAG_R::new((self.bits & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Software Reset"]
        #[inline(always)]
        #[must_use]
        pub fn software_reset(&mut self) -> SOFTWARE_RESET_W<0> {
            SOFTWARE_RESET_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Software Reset Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [srr](index.html) module"]
    pub struct SRR;
    impl crate::RegisterSpec for SRR {
        const ADDRESS: u8 = 0u8;
    }
    #[doc = "`read()` method returns [srr::R](R) reader structure"]
    impl crate::Readable for SRR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [srr::W](W) writer structure"]
    impl crate::Writable for SRR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SRR to value 0xd6"]
    impl crate::Resettable for SRR {
        const RESET_VALUE: u8 = 0xd6;
    }
}
pub use ccr::CCR;
#[doc = "Chip Configuration Register"]
pub mod ccr {
    #[doc = "Register `CCR` reader"]
    pub struct R(crate::R<CCR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CCR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CCR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CCR` writer"]
    pub struct W(crate::W<CCR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CCR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CCR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HOST_DATA_BUS_WIDTH` reader - Host Data Bus Width Selection"]
    pub type HOST_DATA_BUS_WIDTH_R = crate::BitReader<HOST_DATA_BUS_WIDTH_A>;
    #[doc = "Host Data Bus Width Selection\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum HOST_DATA_BUS_WIDTH_A {
        #[doc = "0: 8-bit Host Data Bus"]
        WIDTH_8BIT = 0,
        #[doc = "1: 16-bit Host Data Bus"]
        WIDTH_16BIT = 1,
    }
    impl From<HOST_DATA_BUS_WIDTH_A> for bool {
        #[inline(always)]
        fn from(variant: HOST_DATA_BUS_WIDTH_A) -> Self {
            variant as u8 != 0
        }
    }
    impl HOST_DATA_BUS_WIDTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> HOST_DATA_BUS_WIDTH_A {
            match self.bits {
                false => HOST_DATA_BUS_WIDTH_A::WIDTH_8BIT,
                true => HOST_DATA_BUS_WIDTH_A::WIDTH_16BIT,
            }
        }
        #[doc = "Checks if the value of the field is `WIDTH_8BIT`"]
        #[inline(always)]
        pub fn is_width_8bit(&self) -> bool {
            *self == HOST_DATA_BUS_WIDTH_A::WIDTH_8BIT
        }
        #[doc = "Checks if the value of the field is `WIDTH_16BIT`"]
        #[inline(always)]
        pub fn is_width_16bit(&self) -> bool {
            *self == HOST_DATA_BUS_WIDTH_A::WIDTH_16BIT
        }
    }
    #[doc = "Field `HOST_DATA_BUS_WIDTH` writer - Host Data Bus Width Selection"]
    pub type HOST_DATA_BUS_WIDTH_W<'a, const O: u8> =
        crate::BitWriter<'a, CCR, HOST_DATA_BUS_WIDTH_A, O>;
    impl<'a, const O: u8> HOST_DATA_BUS_WIDTH_W<'a, O> {
        #[doc = "8-bit Host Data Bus"]
        #[inline(always)]
        pub fn width_8bit(self) -> &'a mut W {
            self.variant(HOST_DATA_BUS_WIDTH_A::WIDTH_8BIT)
        }
        #[doc = "16-bit Host Data Bus"]
        #[inline(always)]
        pub fn width_16bit(self) -> &'a mut W {
            self.variant(HOST_DATA_BUS_WIDTH_A::WIDTH_16BIT)
        }
    }
    #[doc = "Field `SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE` reader - Serial Flash or SPI Interface Enable"]
    pub type SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE` writer - Serial Flash or SPI Interface Enable"]
    pub type SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, CCR, bool, O>;
    #[doc = "Field `I2C_MASTER_INTERFACE_ENABLE` reader - I2C master Interface Enable"]
    pub type I2C_MASTER_INTERFACE_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `I2C_MASTER_INTERFACE_ENABLE` writer - I2C master Interface Enable"]
    pub type I2C_MASTER_INTERFACE_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, CCR, bool, O>;
    #[doc = "Field `TFT_PANEL_IF_OUTPUT_PIN_SETTING` reader - TFT Panel I/F Output pin Setting"]
    pub type TFT_PANEL_IF_OUTPUT_PIN_SETTING_R =
        crate::FieldReader<TFT_PANEL_IF_OUTPUT_PIN_SETTING_A>;
    #[doc = "TFT Panel I/F Output pin Setting\n\nValue on reset: 1"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum TFT_PANEL_IF_OUTPUT_PIN_SETTING_A {
        #[doc = "0: 24-bits TFT output"]
        OUTPUT_24BIT = 0,
        #[doc = "1: 18-bits TFT output"]
        OUTPUT_18BIT = 1,
        #[doc = "2: 16-bits TFT output"]
        OUTPUT_16BIT = 2,
        #[doc = "3: Without TFT output"]
        OUTPUT_DISABLED = 3,
    }
    impl From<TFT_PANEL_IF_OUTPUT_PIN_SETTING_A> for u8 {
        #[inline(always)]
        fn from(variant: TFT_PANEL_IF_OUTPUT_PIN_SETTING_A) -> Self {
            variant as _
        }
    }
    impl TFT_PANEL_IF_OUTPUT_PIN_SETTING_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> TFT_PANEL_IF_OUTPUT_PIN_SETTING_A {
            match self.bits {
                0 => TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_24BIT,
                1 => TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_18BIT,
                2 => TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_16BIT,
                3 => TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_DISABLED,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT_24BIT`"]
        #[inline(always)]
        pub fn is_output_24bit(&self) -> bool {
            *self == TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_24BIT
        }
        #[doc = "Checks if the value of the field is `OUTPUT_18BIT`"]
        #[inline(always)]
        pub fn is_output_18bit(&self) -> bool {
            *self == TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_18BIT
        }
        #[doc = "Checks if the value of the field is `OUTPUT_16BIT`"]
        #[inline(always)]
        pub fn is_output_16bit(&self) -> bool {
            *self == TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_16BIT
        }
        #[doc = "Checks if the value of the field is `OUTPUT_DISABLED`"]
        #[inline(always)]
        pub fn is_output_disabled(&self) -> bool {
            *self == TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_DISABLED
        }
    }
    #[doc = "Field `TFT_PANEL_IF_OUTPUT_PIN_SETTING` writer - TFT Panel I/F Output pin Setting"]
    pub type TFT_PANEL_IF_OUTPUT_PIN_SETTING_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, CCR, u8, TFT_PANEL_IF_OUTPUT_PIN_SETTING_A, 2, O>;
    impl<'a, const O: u8> TFT_PANEL_IF_OUTPUT_PIN_SETTING_W<'a, O> {
        #[doc = "24-bits TFT output"]
        #[inline(always)]
        pub fn output_24bit(self) -> &'a mut W {
            self.variant(TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_24BIT)
        }
        #[doc = "18-bits TFT output"]
        #[inline(always)]
        pub fn output_18bit(self) -> &'a mut W {
            self.variant(TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_18BIT)
        }
        #[doc = "16-bits TFT output"]
        #[inline(always)]
        pub fn output_16bit(self) -> &'a mut W {
            self.variant(TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_16BIT)
        }
        #[doc = "Without TFT output"]
        #[inline(always)]
        pub fn output_disabled(self) -> &'a mut W {
            self.variant(TFT_PANEL_IF_OUTPUT_PIN_SETTING_A::OUTPUT_DISABLED)
        }
    }
    #[doc = "Field `KEY_SCAN_ENABLE` reader - Key-Scan Enable"]
    pub type KEY_SCAN_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `KEY_SCAN_ENABLE` writer - Key-Scan Enable"]
    pub type KEY_SCAN_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, CCR, bool, O>;
    #[doc = "Field `MASK_WAIT_ON_CS_DEASSERT` reader - Mask XnWAIT on XnCS deassert"]
    pub type MASK_WAIT_ON_CS_DEASSERT_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_WAIT_ON_CS_DEASSERT` writer - Mask XnWAIT on XnCS deassert"]
    pub type MASK_WAIT_ON_CS_DEASSERT_W<'a, const O: u8> = crate::BitWriter<'a, CCR, bool, O>;
    #[doc = "Field `RECONFIGURE_PLL_FREQUENCY` reader - Reconfigure PLL frequency"]
    pub type RECONFIGURE_PLL_FREQUENCY_R = crate::BitReader<bool>;
    #[doc = "Field `RECONFIGURE_PLL_FREQUENCY` writer - Reconfigure PLL frequency"]
    pub type RECONFIGURE_PLL_FREQUENCY_W<'a, const O: u8> = crate::BitWriter<'a, CCR, bool, O>;
    impl R {
        #[doc = "Bit 0 - Host Data Bus Width Selection"]
        #[inline(always)]
        pub fn host_data_bus_width(&self) -> HOST_DATA_BUS_WIDTH_R {
            HOST_DATA_BUS_WIDTH_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Serial Flash or SPI Interface Enable"]
        #[inline(always)]
        pub fn serial_flash_or_spi_interface_enable(
            &self,
        ) -> SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE_R {
            SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - I2C master Interface Enable"]
        #[inline(always)]
        pub fn i2c_master_interface_enable(&self) -> I2C_MASTER_INTERFACE_ENABLE_R {
            I2C_MASTER_INTERFACE_ENABLE_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bits 3:4 - TFT Panel I/F Output pin Setting"]
        #[inline(always)]
        pub fn tft_panel_if_output_pin_setting(&self) -> TFT_PANEL_IF_OUTPUT_PIN_SETTING_R {
            TFT_PANEL_IF_OUTPUT_PIN_SETTING_R::new((self.bits >> 3) & 3)
        }
        #[doc = "Bit 5 - Key-Scan Enable"]
        #[inline(always)]
        pub fn key_scan_enable(&self) -> KEY_SCAN_ENABLE_R {
            KEY_SCAN_ENABLE_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Mask XnWAIT on XnCS deassert"]
        #[inline(always)]
        pub fn mask_wait_on_cs_deassert(&self) -> MASK_WAIT_ON_CS_DEASSERT_R {
            MASK_WAIT_ON_CS_DEASSERT_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Reconfigure PLL frequency"]
        #[inline(always)]
        pub fn reconfigure_pll_frequency(&self) -> RECONFIGURE_PLL_FREQUENCY_R {
            RECONFIGURE_PLL_FREQUENCY_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Host Data Bus Width Selection"]
        #[inline(always)]
        #[must_use]
        pub fn host_data_bus_width(&mut self) -> HOST_DATA_BUS_WIDTH_W<0> {
            HOST_DATA_BUS_WIDTH_W::new(self)
        }
        #[doc = "Bit 1 - Serial Flash or SPI Interface Enable"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_or_spi_interface_enable(
            &mut self,
        ) -> SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE_W<1> {
            SERIAL_FLASH_OR_SPI_INTERFACE_ENABLE_W::new(self)
        }
        #[doc = "Bit 2 - I2C master Interface Enable"]
        #[inline(always)]
        #[must_use]
        pub fn i2c_master_interface_enable(&mut self) -> I2C_MASTER_INTERFACE_ENABLE_W<2> {
            I2C_MASTER_INTERFACE_ENABLE_W::new(self)
        }
        #[doc = "Bits 3:4 - TFT Panel I/F Output pin Setting"]
        #[inline(always)]
        #[must_use]
        pub fn tft_panel_if_output_pin_setting(&mut self) -> TFT_PANEL_IF_OUTPUT_PIN_SETTING_W<3> {
            TFT_PANEL_IF_OUTPUT_PIN_SETTING_W::new(self)
        }
        #[doc = "Bit 5 - Key-Scan Enable"]
        #[inline(always)]
        #[must_use]
        pub fn key_scan_enable(&mut self) -> KEY_SCAN_ENABLE_W<5> {
            KEY_SCAN_ENABLE_W::new(self)
        }
        #[doc = "Bit 6 - Mask XnWAIT on XnCS deassert"]
        #[inline(always)]
        #[must_use]
        pub fn mask_wait_on_cs_deassert(&mut self) -> MASK_WAIT_ON_CS_DEASSERT_W<6> {
            MASK_WAIT_ON_CS_DEASSERT_W::new(self)
        }
        #[doc = "Bit 7 - Reconfigure PLL frequency"]
        #[inline(always)]
        #[must_use]
        pub fn reconfigure_pll_frequency(&mut self) -> RECONFIGURE_PLL_FREQUENCY_W<7> {
            RECONFIGURE_PLL_FREQUENCY_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Chip Configuration Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](index.html) module"]
    pub struct CCR;
    impl crate::RegisterSpec for CCR {
        const ADDRESS: u8 = 1u8;
    }
    #[doc = "`read()` method returns [ccr::R](R) reader structure"]
    impl crate::Readable for CCR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ccr::W](W) writer structure"]
    impl crate::Writable for CCR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CCR to value 0x88"]
    impl crate::Resettable for CCR {
        const RESET_VALUE: u8 = 0x88;
    }
}
pub use macr::MACR;
#[doc = "Memory Access Control Register"]
pub mod macr {
    #[doc = "Register `MACR` reader"]
    pub struct R(crate::R<MACR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MACR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MACR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MACR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MACR` writer"]
    pub struct W(crate::W<MACR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MACR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MACR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MACR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HOST_WRITE_MEMORY_DIRECTION` reader - Host Write Memory Direction"]
    pub type HOST_WRITE_MEMORY_DIRECTION_R = crate::FieldReader<HOST_WRITE_MEMORY_DIRECTION_A>;
    #[doc = "Host Write Memory Direction\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum HOST_WRITE_MEMORY_DIRECTION_A {
        #[doc = "0: Left→Right then Top→Bottom (Original)"]
        LEFT_RIGHT_TOP_BOTTOM = 0,
        #[doc = "1: Right→Left then Top→Bottom (Horizontal flip)"]
        RIGHT_LEFT_TOP_BOTTOM = 1,
        #[doc = "2: Top→Bottom then Left→Right (Rotate right 90° and horizontal flip)"]
        TOP_BOTTOM_LEFT_RIGHT = 2,
        #[doc = "3: Bottom→Top then Left→Right (Rotate left 90°)"]
        BOTTOM_TOP_LEFT_RIGHT = 3,
    }
    impl From<HOST_WRITE_MEMORY_DIRECTION_A> for u8 {
        #[inline(always)]
        fn from(variant: HOST_WRITE_MEMORY_DIRECTION_A) -> Self {
            variant as _
        }
    }
    impl HOST_WRITE_MEMORY_DIRECTION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> HOST_WRITE_MEMORY_DIRECTION_A {
            match self.bits {
                0 => HOST_WRITE_MEMORY_DIRECTION_A::LEFT_RIGHT_TOP_BOTTOM,
                1 => HOST_WRITE_MEMORY_DIRECTION_A::RIGHT_LEFT_TOP_BOTTOM,
                2 => HOST_WRITE_MEMORY_DIRECTION_A::TOP_BOTTOM_LEFT_RIGHT,
                3 => HOST_WRITE_MEMORY_DIRECTION_A::BOTTOM_TOP_LEFT_RIGHT,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `LEFT_RIGHT_TOP_BOTTOM`"]
        #[inline(always)]
        pub fn is_left_right_top_bottom(&self) -> bool {
            *self == HOST_WRITE_MEMORY_DIRECTION_A::LEFT_RIGHT_TOP_BOTTOM
        }
        #[doc = "Checks if the value of the field is `RIGHT_LEFT_TOP_BOTTOM`"]
        #[inline(always)]
        pub fn is_right_left_top_bottom(&self) -> bool {
            *self == HOST_WRITE_MEMORY_DIRECTION_A::RIGHT_LEFT_TOP_BOTTOM
        }
        #[doc = "Checks if the value of the field is `TOP_BOTTOM_LEFT_RIGHT`"]
        #[inline(always)]
        pub fn is_top_bottom_left_right(&self) -> bool {
            *self == HOST_WRITE_MEMORY_DIRECTION_A::TOP_BOTTOM_LEFT_RIGHT
        }
        #[doc = "Checks if the value of the field is `BOTTOM_TOP_LEFT_RIGHT`"]
        #[inline(always)]
        pub fn is_bottom_top_left_right(&self) -> bool {
            *self == HOST_WRITE_MEMORY_DIRECTION_A::BOTTOM_TOP_LEFT_RIGHT
        }
    }
    #[doc = "Field `HOST_WRITE_MEMORY_DIRECTION` writer - Host Write Memory Direction"]
    pub type HOST_WRITE_MEMORY_DIRECTION_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, MACR, u8, HOST_WRITE_MEMORY_DIRECTION_A, 2, O>;
    impl<'a, const O: u8> HOST_WRITE_MEMORY_DIRECTION_W<'a, O> {
        #[doc = "Left→Right then Top→Bottom (Original)"]
        #[inline(always)]
        pub fn left_right_top_bottom(self) -> &'a mut W {
            self.variant(HOST_WRITE_MEMORY_DIRECTION_A::LEFT_RIGHT_TOP_BOTTOM)
        }
        #[doc = "Right→Left then Top→Bottom (Horizontal flip)"]
        #[inline(always)]
        pub fn right_left_top_bottom(self) -> &'a mut W {
            self.variant(HOST_WRITE_MEMORY_DIRECTION_A::RIGHT_LEFT_TOP_BOTTOM)
        }
        #[doc = "Top→Bottom then Left→Right (Rotate right 90° and horizontal flip)"]
        #[inline(always)]
        pub fn top_bottom_left_right(self) -> &'a mut W {
            self.variant(HOST_WRITE_MEMORY_DIRECTION_A::TOP_BOTTOM_LEFT_RIGHT)
        }
        #[doc = "Bottom→Top then Left→Right (Rotate left 90°)"]
        #[inline(always)]
        pub fn bottom_top_left_right(self) -> &'a mut W {
            self.variant(HOST_WRITE_MEMORY_DIRECTION_A::BOTTOM_TOP_LEFT_RIGHT)
        }
    }
    #[doc = "Field `HOST_READ_MEMORY_DIRECTION` reader - Host Read Memory Direction"]
    pub type HOST_READ_MEMORY_DIRECTION_R = crate::FieldReader<HOST_READ_MEMORY_DIRECTION_A>;
    #[doc = "Host Read Memory Direction\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum HOST_READ_MEMORY_DIRECTION_A {
        #[doc = "0: Left→Right then Top→Bottom (Original)"]
        LEFT_RIGHT_TOP_BOTTOM = 0,
        #[doc = "1: Right→Left then Top→Bottom (Horizontal flip)"]
        RIGHT_LEFT_TOP_BOTTOM = 1,
        #[doc = "2: Top→Bottom then Left→Right (Rotate right 90° and horizontal flip)"]
        TOP_BOTTOM_LEFT_RIGHT = 2,
        #[doc = "3: Bottom→Top then Left→Right (Rotate left 90°)"]
        BOTTOM_TOP_LEFT_RIGHT = 3,
    }
    impl From<HOST_READ_MEMORY_DIRECTION_A> for u8 {
        #[inline(always)]
        fn from(variant: HOST_READ_MEMORY_DIRECTION_A) -> Self {
            variant as _
        }
    }
    impl HOST_READ_MEMORY_DIRECTION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> HOST_READ_MEMORY_DIRECTION_A {
            match self.bits {
                0 => HOST_READ_MEMORY_DIRECTION_A::LEFT_RIGHT_TOP_BOTTOM,
                1 => HOST_READ_MEMORY_DIRECTION_A::RIGHT_LEFT_TOP_BOTTOM,
                2 => HOST_READ_MEMORY_DIRECTION_A::TOP_BOTTOM_LEFT_RIGHT,
                3 => HOST_READ_MEMORY_DIRECTION_A::BOTTOM_TOP_LEFT_RIGHT,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `LEFT_RIGHT_TOP_BOTTOM`"]
        #[inline(always)]
        pub fn is_left_right_top_bottom(&self) -> bool {
            *self == HOST_READ_MEMORY_DIRECTION_A::LEFT_RIGHT_TOP_BOTTOM
        }
        #[doc = "Checks if the value of the field is `RIGHT_LEFT_TOP_BOTTOM`"]
        #[inline(always)]
        pub fn is_right_left_top_bottom(&self) -> bool {
            *self == HOST_READ_MEMORY_DIRECTION_A::RIGHT_LEFT_TOP_BOTTOM
        }
        #[doc = "Checks if the value of the field is `TOP_BOTTOM_LEFT_RIGHT`"]
        #[inline(always)]
        pub fn is_top_bottom_left_right(&self) -> bool {
            *self == HOST_READ_MEMORY_DIRECTION_A::TOP_BOTTOM_LEFT_RIGHT
        }
        #[doc = "Checks if the value of the field is `BOTTOM_TOP_LEFT_RIGHT`"]
        #[inline(always)]
        pub fn is_bottom_top_left_right(&self) -> bool {
            *self == HOST_READ_MEMORY_DIRECTION_A::BOTTOM_TOP_LEFT_RIGHT
        }
    }
    #[doc = "Field `HOST_READ_MEMORY_DIRECTION` writer - Host Read Memory Direction"]
    pub type HOST_READ_MEMORY_DIRECTION_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, MACR, u8, HOST_READ_MEMORY_DIRECTION_A, 2, O>;
    impl<'a, const O: u8> HOST_READ_MEMORY_DIRECTION_W<'a, O> {
        #[doc = "Left→Right then Top→Bottom (Original)"]
        #[inline(always)]
        pub fn left_right_top_bottom(self) -> &'a mut W {
            self.variant(HOST_READ_MEMORY_DIRECTION_A::LEFT_RIGHT_TOP_BOTTOM)
        }
        #[doc = "Right→Left then Top→Bottom (Horizontal flip)"]
        #[inline(always)]
        pub fn right_left_top_bottom(self) -> &'a mut W {
            self.variant(HOST_READ_MEMORY_DIRECTION_A::RIGHT_LEFT_TOP_BOTTOM)
        }
        #[doc = "Top→Bottom then Left→Right (Rotate right 90° and horizontal flip)"]
        #[inline(always)]
        pub fn top_bottom_left_right(self) -> &'a mut W {
            self.variant(HOST_READ_MEMORY_DIRECTION_A::TOP_BOTTOM_LEFT_RIGHT)
        }
        #[doc = "Bottom→Top then Left→Right (Rotate left 90°)"]
        #[inline(always)]
        pub fn bottom_top_left_right(self) -> &'a mut W {
            self.variant(HOST_READ_MEMORY_DIRECTION_A::BOTTOM_TOP_LEFT_RIGHT)
        }
    }
    #[doc = "Field `HOST_READ_WRITE_IMAGE_DATA_FORMAT` reader - Host Read/Write image Data Format"]
    pub type HOST_READ_WRITE_IMAGE_DATA_FORMAT_R =
        crate::FieldReader<HOST_READ_WRITE_IMAGE_DATA_FORMAT_A>;
    #[doc = "Host Read/Write image Data Format\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum HOST_READ_WRITE_IMAGE_DATA_FORMAT_A {
        #[doc = "0: Direct write (for all 8 bits MPU I/F, 16 bits MPU I/F with 8bpp data mode 1 &amp; 2, 16 bits MPU I/F with 16/24-bpp data mode 1 &amp; serial host interface)"]
        DIRECT_WRITE = 0,
        #[doc = "2: Mask high byte of each data (ex. 16 bit MPU I/F with 8-bpp data mode 1)"]
        MASK_HIGH_BYTE_EACH = 2,
        #[doc = "3: Mask high byte of even data (ex. 16 bit MPU I/F with 24-bpp data mode 2)"]
        MASK_HIGH_BYTE_EVEN = 3,
    }
    impl From<HOST_READ_WRITE_IMAGE_DATA_FORMAT_A> for u8 {
        #[inline(always)]
        fn from(variant: HOST_READ_WRITE_IMAGE_DATA_FORMAT_A) -> Self {
            variant as _
        }
    }
    impl HOST_READ_WRITE_IMAGE_DATA_FORMAT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> Option<HOST_READ_WRITE_IMAGE_DATA_FORMAT_A> {
            match self.bits {
                0 => Some(HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::DIRECT_WRITE),
                2 => Some(HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::MASK_HIGH_BYTE_EACH),
                3 => Some(HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::MASK_HIGH_BYTE_EVEN),
                _ => None,
            }
        }
        #[doc = "Checks if the value of the field is `DIRECT_WRITE`"]
        #[inline(always)]
        pub fn is_direct_write(&self) -> bool {
            *self == HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::DIRECT_WRITE
        }
        #[doc = "Checks if the value of the field is `MASK_HIGH_BYTE_EACH`"]
        #[inline(always)]
        pub fn is_mask_high_byte_each(&self) -> bool {
            *self == HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::MASK_HIGH_BYTE_EACH
        }
        #[doc = "Checks if the value of the field is `MASK_HIGH_BYTE_EVEN`"]
        #[inline(always)]
        pub fn is_mask_high_byte_even(&self) -> bool {
            *self == HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::MASK_HIGH_BYTE_EVEN
        }
    }
    #[doc = "Field `HOST_READ_WRITE_IMAGE_DATA_FORMAT` writer - Host Read/Write image Data Format"]
    pub type HOST_READ_WRITE_IMAGE_DATA_FORMAT_W<'a, const O: u8> =
        crate::FieldWriter<'a, MACR, u8, HOST_READ_WRITE_IMAGE_DATA_FORMAT_A, 2, O>;
    impl<'a, const O: u8> HOST_READ_WRITE_IMAGE_DATA_FORMAT_W<'a, O> {
        #[doc = "Direct write (for all 8 bits MPU I/F, 16 bits MPU I/F with 8bpp data mode 1 &amp; 2, 16 bits MPU I/F with 16/24-bpp data mode 1 &amp; serial host interface)"]
        #[inline(always)]
        pub fn direct_write(self) -> &'a mut W {
            self.variant(HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::DIRECT_WRITE)
        }
        #[doc = "Mask high byte of each data (ex. 16 bit MPU I/F with 8-bpp data mode 1)"]
        #[inline(always)]
        pub fn mask_high_byte_each(self) -> &'a mut W {
            self.variant(HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::MASK_HIGH_BYTE_EACH)
        }
        #[doc = "Mask high byte of even data (ex. 16 bit MPU I/F with 24-bpp data mode 2)"]
        #[inline(always)]
        pub fn mask_high_byte_even(self) -> &'a mut W {
            self.variant(HOST_READ_WRITE_IMAGE_DATA_FORMAT_A::MASK_HIGH_BYTE_EVEN)
        }
    }
    impl R {
        #[doc = "Bits 1:2 - Host Write Memory Direction"]
        #[inline(always)]
        pub fn host_write_memory_direction(&self) -> HOST_WRITE_MEMORY_DIRECTION_R {
            HOST_WRITE_MEMORY_DIRECTION_R::new((self.bits >> 1) & 3)
        }
        #[doc = "Bits 4:5 - Host Read Memory Direction"]
        #[inline(always)]
        pub fn host_read_memory_direction(&self) -> HOST_READ_MEMORY_DIRECTION_R {
            HOST_READ_MEMORY_DIRECTION_R::new((self.bits >> 4) & 3)
        }
        #[doc = "Bits 6:7 - Host Read/Write image Data Format"]
        #[inline(always)]
        pub fn host_read_write_image_data_format(&self) -> HOST_READ_WRITE_IMAGE_DATA_FORMAT_R {
            HOST_READ_WRITE_IMAGE_DATA_FORMAT_R::new((self.bits >> 6) & 3)
        }
    }
    impl W {
        #[doc = "Bits 1:2 - Host Write Memory Direction"]
        #[inline(always)]
        #[must_use]
        pub fn host_write_memory_direction(&mut self) -> HOST_WRITE_MEMORY_DIRECTION_W<1> {
            HOST_WRITE_MEMORY_DIRECTION_W::new(self)
        }
        #[doc = "Bits 4:5 - Host Read Memory Direction"]
        #[inline(always)]
        #[must_use]
        pub fn host_read_memory_direction(&mut self) -> HOST_READ_MEMORY_DIRECTION_W<4> {
            HOST_READ_MEMORY_DIRECTION_W::new(self)
        }
        #[doc = "Bits 6:7 - Host Read/Write image Data Format"]
        #[inline(always)]
        #[must_use]
        pub fn host_read_write_image_data_format(
            &mut self,
        ) -> HOST_READ_WRITE_IMAGE_DATA_FORMAT_W<6> {
            HOST_READ_WRITE_IMAGE_DATA_FORMAT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Memory Access Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [macr](index.html) module"]
    pub struct MACR;
    impl crate::RegisterSpec for MACR {
        const ADDRESS: u8 = 2u8;
    }
    #[doc = "`read()` method returns [macr::R](R) reader structure"]
    impl crate::Readable for MACR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [macr::W](W) writer structure"]
    impl crate::Writable for MACR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MACR to value 0"]
    impl crate::Resettable for MACR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use icr::ICR;
#[doc = "Input Control Register"]
pub mod icr {
    #[doc = "Register `ICR` reader"]
    pub struct R(crate::R<ICR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<ICR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<ICR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<ICR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `ICR` writer"]
    pub struct W(crate::W<ICR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<ICR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<ICR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<ICR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MEMORY_PORT_READ_WRITE_DESTINATION` reader - Memory port Read/Write Destination Selection"]
    pub type MEMORY_PORT_READ_WRITE_DESTINATION_R =
        crate::FieldReader<MEMORY_PORT_READ_WRITE_DESTINATION_A>;
    #[doc = "Memory port Read/Write Destination Selection\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum MEMORY_PORT_READ_WRITE_DESTINATION_A {
        #[doc = "0: Image buffer (SDRAM) for image data/pattern/user-characters"]
        IMAGE_BUFFER = 0,
        #[doc = "1: Gamma table for color Red/Green/Blue"]
        GAMMA_TABLE = 1,
        #[doc = "2: Graphic cursor RAM"]
        GRAPHIC_CURSOR_RAM = 2,
        #[doc = "3: Color palette RAM"]
        COLOR_PALETTE_RAM = 3,
    }
    impl From<MEMORY_PORT_READ_WRITE_DESTINATION_A> for u8 {
        #[inline(always)]
        fn from(variant: MEMORY_PORT_READ_WRITE_DESTINATION_A) -> Self {
            variant as _
        }
    }
    impl MEMORY_PORT_READ_WRITE_DESTINATION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> MEMORY_PORT_READ_WRITE_DESTINATION_A {
            match self.bits {
                0 => MEMORY_PORT_READ_WRITE_DESTINATION_A::IMAGE_BUFFER,
                1 => MEMORY_PORT_READ_WRITE_DESTINATION_A::GAMMA_TABLE,
                2 => MEMORY_PORT_READ_WRITE_DESTINATION_A::GRAPHIC_CURSOR_RAM,
                3 => MEMORY_PORT_READ_WRITE_DESTINATION_A::COLOR_PALETTE_RAM,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `IMAGE_BUFFER`"]
        #[inline(always)]
        pub fn is_image_buffer(&self) -> bool {
            *self == MEMORY_PORT_READ_WRITE_DESTINATION_A::IMAGE_BUFFER
        }
        #[doc = "Checks if the value of the field is `GAMMA_TABLE`"]
        #[inline(always)]
        pub fn is_gamma_table(&self) -> bool {
            *self == MEMORY_PORT_READ_WRITE_DESTINATION_A::GAMMA_TABLE
        }
        #[doc = "Checks if the value of the field is `GRAPHIC_CURSOR_RAM`"]
        #[inline(always)]
        pub fn is_graphic_cursor_ram(&self) -> bool {
            *self == MEMORY_PORT_READ_WRITE_DESTINATION_A::GRAPHIC_CURSOR_RAM
        }
        #[doc = "Checks if the value of the field is `COLOR_PALETTE_RAM`"]
        #[inline(always)]
        pub fn is_color_palette_ram(&self) -> bool {
            *self == MEMORY_PORT_READ_WRITE_DESTINATION_A::COLOR_PALETTE_RAM
        }
    }
    #[doc = "Field `MEMORY_PORT_READ_WRITE_DESTINATION` writer - Memory port Read/Write Destination Selection"]
    pub type MEMORY_PORT_READ_WRITE_DESTINATION_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, ICR, u8, MEMORY_PORT_READ_WRITE_DESTINATION_A, 2, O>;
    impl<'a, const O: u8> MEMORY_PORT_READ_WRITE_DESTINATION_W<'a, O> {
        #[doc = "Image buffer (SDRAM) for image data/pattern/user-characters"]
        #[inline(always)]
        pub fn image_buffer(self) -> &'a mut W {
            self.variant(MEMORY_PORT_READ_WRITE_DESTINATION_A::IMAGE_BUFFER)
        }
        #[doc = "Gamma table for color Red/Green/Blue"]
        #[inline(always)]
        pub fn gamma_table(self) -> &'a mut W {
            self.variant(MEMORY_PORT_READ_WRITE_DESTINATION_A::GAMMA_TABLE)
        }
        #[doc = "Graphic cursor RAM"]
        #[inline(always)]
        pub fn graphic_cursor_ram(self) -> &'a mut W {
            self.variant(MEMORY_PORT_READ_WRITE_DESTINATION_A::GRAPHIC_CURSOR_RAM)
        }
        #[doc = "Color palette RAM"]
        #[inline(always)]
        pub fn color_palette_ram(self) -> &'a mut W {
            self.variant(MEMORY_PORT_READ_WRITE_DESTINATION_A::COLOR_PALETTE_RAM)
        }
    }
    #[doc = "Field `TEXT_MODE_ENABLE` reader - Text Mode enable"]
    pub type TEXT_MODE_ENABLE_R = crate::BitReader<TEXT_MODE_ENABLE_A>;
    #[doc = "Text Mode enable\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum TEXT_MODE_ENABLE_A {
        #[doc = "0: Disabled"]
        DISABLED = 0,
        #[doc = "1: Enabled"]
        ENABLED = 1,
    }
    impl From<TEXT_MODE_ENABLE_A> for bool {
        #[inline(always)]
        fn from(variant: TEXT_MODE_ENABLE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl TEXT_MODE_ENABLE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> TEXT_MODE_ENABLE_A {
            match self.bits {
                false => TEXT_MODE_ENABLE_A::DISABLED,
                true => TEXT_MODE_ENABLE_A::ENABLED,
            }
        }
        #[doc = "Checks if the value of the field is `DISABLED`"]
        #[inline(always)]
        pub fn is_disabled(&self) -> bool {
            *self == TEXT_MODE_ENABLE_A::DISABLED
        }
        #[doc = "Checks if the value of the field is `ENABLED`"]
        #[inline(always)]
        pub fn is_enabled(&self) -> bool {
            *self == TEXT_MODE_ENABLE_A::ENABLED
        }
    }
    #[doc = "Field `TEXT_MODE_ENABLE` writer - Text Mode enable"]
    pub type TEXT_MODE_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, ICR, TEXT_MODE_ENABLE_A, O>;
    impl<'a, const O: u8> TEXT_MODE_ENABLE_W<'a, O> {
        #[doc = "Disabled"]
        #[inline(always)]
        pub fn disabled(self) -> &'a mut W {
            self.variant(TEXT_MODE_ENABLE_A::DISABLED)
        }
        #[doc = "Enabled"]
        #[inline(always)]
        pub fn enabled(self) -> &'a mut W {
            self.variant(TEXT_MODE_ENABLE_A::ENABLED)
        }
    }
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE` reader - External interrupt input (XPS\\[0\\]
pin) trigger type"]
    pub type EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_R =
        crate::FieldReader<EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A>;
    #[doc = "External interrupt input (XPS\\[0\\]
pin) trigger type\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A {
        #[doc = "0: Low level triggered"]
        LOW_LEVEL_TRIGGERED = 0,
        #[doc = "1: Falling edge triggered"]
        FALLING_EDGE_TRIGGERED = 1,
        #[doc = "2: High level triggered"]
        HIGH_LEVEL_TRIGGERED = 2,
        #[doc = "3: Rising edge triggered"]
        RISING_EDGE_TRIGGERED = 3,
    }
    impl From<EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A> for u8 {
        #[inline(always)]
        fn from(variant: EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A) -> Self {
            variant as _
        }
    }
    impl EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A {
            match self.bits {
                0 => EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::LOW_LEVEL_TRIGGERED,
                1 => EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::FALLING_EDGE_TRIGGERED,
                2 => EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::HIGH_LEVEL_TRIGGERED,
                3 => EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::RISING_EDGE_TRIGGERED,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `LOW_LEVEL_TRIGGERED`"]
        #[inline(always)]
        pub fn is_low_level_triggered(&self) -> bool {
            *self == EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::LOW_LEVEL_TRIGGERED
        }
        #[doc = "Checks if the value of the field is `FALLING_EDGE_TRIGGERED`"]
        #[inline(always)]
        pub fn is_falling_edge_triggered(&self) -> bool {
            *self == EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::FALLING_EDGE_TRIGGERED
        }
        #[doc = "Checks if the value of the field is `HIGH_LEVEL_TRIGGERED`"]
        #[inline(always)]
        pub fn is_high_level_triggered(&self) -> bool {
            *self == EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::HIGH_LEVEL_TRIGGERED
        }
        #[doc = "Checks if the value of the field is `RISING_EDGE_TRIGGERED`"]
        #[inline(always)]
        pub fn is_rising_edge_triggered(&self) -> bool {
            *self == EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::RISING_EDGE_TRIGGERED
        }
    }
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE` writer - External interrupt input (XPS\\[0\\]
pin) trigger type"]
    pub type EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, ICR, u8, EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A, 2, O>;
    impl<'a, const O: u8> EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_W<'a, O> {
        #[doc = "Low level triggered"]
        #[inline(always)]
        pub fn low_level_triggered(self) -> &'a mut W {
            self.variant(EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::LOW_LEVEL_TRIGGERED)
        }
        #[doc = "Falling edge triggered"]
        #[inline(always)]
        pub fn falling_edge_triggered(self) -> &'a mut W {
            self.variant(EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::FALLING_EDGE_TRIGGERED)
        }
        #[doc = "High level triggered"]
        #[inline(always)]
        pub fn high_level_triggered(self) -> &'a mut W {
            self.variant(EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::HIGH_LEVEL_TRIGGERED)
        }
        #[doc = "Rising edge triggered"]
        #[inline(always)]
        pub fn rising_edge_triggered(self) -> &'a mut W {
            self.variant(EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_A::RISING_EDGE_TRIGGERED)
        }
    }
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_DEBOUNCE` reader - External interrupt input (XPS\\[0\\]
pin) de-bounce"]
    pub type EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_R =
        crate::BitReader<EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A>;
    #[doc = "External interrupt input (XPS\\[0\\]
pin) de-bounce\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A {
        #[doc = "0: De-bounce disabled"]
        DISABLED = 0,
        #[doc = "1: De-bounce enabled"]
        ENABLED = 1,
    }
    impl From<EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A> for bool {
        #[inline(always)]
        fn from(variant: EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A {
            match self.bits {
                false => EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A::DISABLED,
                true => EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A::ENABLED,
            }
        }
        #[doc = "Checks if the value of the field is `DISABLED`"]
        #[inline(always)]
        pub fn is_disabled(&self) -> bool {
            *self == EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A::DISABLED
        }
        #[doc = "Checks if the value of the field is `ENABLED`"]
        #[inline(always)]
        pub fn is_enabled(&self) -> bool {
            *self == EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A::ENABLED
        }
    }
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_DEBOUNCE` writer - External interrupt input (XPS\\[0\\]
pin) de-bounce"]
    pub type EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_W<'a, const O: u8> =
        crate::BitWriter<'a, ICR, EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A, O>;
    impl<'a, const O: u8> EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_W<'a, O> {
        #[doc = "De-bounce disabled"]
        #[inline(always)]
        pub fn disabled(self) -> &'a mut W {
            self.variant(EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A::DISABLED)
        }
        #[doc = "De-bounce enabled"]
        #[inline(always)]
        pub fn enabled(self) -> &'a mut W {
            self.variant(EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_A::ENABLED)
        }
    }
    #[doc = "Field `OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL` reader - Output to MPU Interrupt pin's active level"]
    pub type OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_R =
        crate::BitReader<OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A>;
    #[doc = "Output to MPU Interrupt pin's active level\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A {
        #[doc = "0: Active low"]
        ACTIVE_LOW = 0,
        #[doc = "1: Active high"]
        ACTIVE_HIGH = 1,
    }
    impl From<OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A> for bool {
        #[inline(always)]
        fn from(variant: OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A) -> Self {
            variant as u8 != 0
        }
    }
    impl OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A {
            match self.bits {
                false => OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A::ACTIVE_LOW,
                true => OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A::ACTIVE_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `ACTIVE_LOW`"]
        #[inline(always)]
        pub fn is_active_low(&self) -> bool {
            *self == OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A::ACTIVE_LOW
        }
        #[doc = "Checks if the value of the field is `ACTIVE_HIGH`"]
        #[inline(always)]
        pub fn is_active_high(&self) -> bool {
            *self == OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A::ACTIVE_HIGH
        }
    }
    #[doc = "Field `OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL` writer - Output to MPU Interrupt pin's active level"]
    pub type OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_W<'a, const O: u8> =
        crate::BitWriter<'a, ICR, OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A, O>;
    impl<'a, const O: u8> OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_W<'a, O> {
        #[doc = "Active low"]
        #[inline(always)]
        pub fn active_low(self) -> &'a mut W {
            self.variant(OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A::ACTIVE_LOW)
        }
        #[doc = "Active high"]
        #[inline(always)]
        pub fn active_high(self) -> &'a mut W {
            self.variant(OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_A::ACTIVE_HIGH)
        }
    }
    impl R {
        #[doc = "Bits 0:1 - Memory port Read/Write Destination Selection"]
        #[inline(always)]
        pub fn memory_port_read_write_destination(&self) -> MEMORY_PORT_READ_WRITE_DESTINATION_R {
            MEMORY_PORT_READ_WRITE_DESTINATION_R::new(self.bits & 3)
        }
        #[doc = "Bit 2 - Text Mode enable"]
        #[inline(always)]
        pub fn text_mode_enable(&self) -> TEXT_MODE_ENABLE_R {
            TEXT_MODE_ENABLE_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bits 4:5 - External interrupt input (XPS\\[0\\]
pin) trigger type"]
        #[inline(always)]
        pub fn external_interrupt_input_trigger_type(
            &self,
        ) -> EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_R {
            EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_R::new((self.bits >> 4) & 3)
        }
        #[doc = "Bit 6 - External interrupt input (XPS\\[0\\]
pin) de-bounce"]
        #[inline(always)]
        pub fn external_interrupt_input_debounce(&self) -> EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_R {
            EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Output to MPU Interrupt pin's active level"]
        #[inline(always)]
        pub fn output_to_mpu_interrupt_pin_active_level(
            &self,
        ) -> OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_R {
            OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Memory port Read/Write Destination Selection"]
        #[inline(always)]
        #[must_use]
        pub fn memory_port_read_write_destination(
            &mut self,
        ) -> MEMORY_PORT_READ_WRITE_DESTINATION_W<0> {
            MEMORY_PORT_READ_WRITE_DESTINATION_W::new(self)
        }
        #[doc = "Bit 2 - Text Mode enable"]
        #[inline(always)]
        #[must_use]
        pub fn text_mode_enable(&mut self) -> TEXT_MODE_ENABLE_W<2> {
            TEXT_MODE_ENABLE_W::new(self)
        }
        #[doc = "Bits 4:5 - External interrupt input (XPS\\[0\\]
pin) trigger type"]
        #[inline(always)]
        #[must_use]
        pub fn external_interrupt_input_trigger_type(
            &mut self,
        ) -> EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_W<4> {
            EXTERNAL_INTERRUPT_INPUT_TRIGGER_TYPE_W::new(self)
        }
        #[doc = "Bit 6 - External interrupt input (XPS\\[0\\]
pin) de-bounce"]
        #[inline(always)]
        #[must_use]
        pub fn external_interrupt_input_debounce(
            &mut self,
        ) -> EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_W<6> {
            EXTERNAL_INTERRUPT_INPUT_DEBOUNCE_W::new(self)
        }
        #[doc = "Bit 7 - Output to MPU Interrupt pin's active level"]
        #[inline(always)]
        #[must_use]
        pub fn output_to_mpu_interrupt_pin_active_level(
            &mut self,
        ) -> OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_W<7> {
            OUTPUT_TO_MPU_INTERRUPT_PIN_ACTIVE_LEVEL_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Input Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](index.html) module"]
    pub struct ICR;
    impl crate::RegisterSpec for ICR {
        const ADDRESS: u8 = 3u8;
    }
    #[doc = "`read()` method returns [icr::R](R) reader structure"]
    impl crate::Readable for ICR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [icr::W](W) writer structure"]
    impl crate::Writable for ICR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets ICR to value 0"]
    impl crate::Resettable for ICR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use mrwdp::MRWDP;
#[doc = "Memory Data Read/Write Port"]
pub mod mrwdp {
    #[doc = "Register `MRWDP` reader"]
    pub struct R(crate::R<MRWDP>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MRWDP>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MRWDP>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MRWDP>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MRWDP` writer"]
    pub struct W(crate::W<MRWDP>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MRWDP>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MRWDP>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MRWDP>) -> Self {
            W(writer)
        }
    }
    impl W {
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Memory Data Read/Write Port\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mrwdp](index.html) module"]
    pub struct MRWDP;
    impl crate::RegisterSpec for MRWDP {
        const ADDRESS: u8 = 4u8;
    }
    #[doc = "`read()` method returns [mrwdp::R](R) reader structure"]
    impl crate::Readable for MRWDP {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mrwdp::W](W) writer structure"]
    impl crate::Writable for MRWDP {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MRWDP to value 0"]
    impl crate::Resettable for MRWDP {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ppllc1::PPLLC1;
#[doc = "SCLK PLL Control Register 1"]
pub mod ppllc1 {
    #[doc = "Register `PPLLC1` reader"]
    pub struct R(crate::R<PPLLC1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PPLLC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PPLLC1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PPLLC1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PPLLC1` writer"]
    pub struct W(crate::W<PPLLC1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PPLLC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PPLLC1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PPLLC1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SCLK_PLLDIVM` reader - SCLK PLL Pre-driver parameter"]
    pub type SCLK_PLLDIVM_R = crate::BitReader<bool>;
    #[doc = "Field `SCLK_PLLDIVM` writer - SCLK PLL Pre-driver parameter"]
    pub type SCLK_PLLDIVM_W<'a, const O: u8> = crate::BitWriter<'a, PPLLC1, bool, O>;
    #[doc = "Field `SCLK_PLLDIVK` reader - SCLK PLL Output divider"]
    pub type SCLK_PLLDIVK_R = crate::FieldReader<u8>;
    #[doc = "Field `SCLK_PLLDIVK` writer - SCLK PLL Output divider"]
    pub type SCLK_PLLDIVK_W<'a, const O: u8> = crate::FieldWriter<'a, PPLLC1, u8, u8, 2, O>;
    #[doc = "Field `SCLK_EXTRA_DIVIDER` reader - SCLK extra divider"]
    pub type SCLK_EXTRA_DIVIDER_R = crate::FieldReader<u8>;
    #[doc = "Field `SCLK_EXTRA_DIVIDER` writer - SCLK extra divider"]
    pub type SCLK_EXTRA_DIVIDER_W<'a, const O: u8> = crate::FieldWriter<'a, PPLLC1, u8, u8, 3, O>;
    impl R {
        #[doc = "Bit 0 - SCLK PLL Pre-driver parameter"]
        #[inline(always)]
        pub fn sclk_plldivm(&self) -> SCLK_PLLDIVM_R {
            SCLK_PLLDIVM_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bits 1:2 - SCLK PLL Output divider"]
        #[inline(always)]
        pub fn sclk_plldivk(&self) -> SCLK_PLLDIVK_R {
            SCLK_PLLDIVK_R::new((self.bits >> 1) & 3)
        }
        #[doc = "Bits 3:5 - SCLK extra divider"]
        #[inline(always)]
        pub fn sclk_extra_divider(&self) -> SCLK_EXTRA_DIVIDER_R {
            SCLK_EXTRA_DIVIDER_R::new((self.bits >> 3) & 7)
        }
    }
    impl W {
        #[doc = "Bit 0 - SCLK PLL Pre-driver parameter"]
        #[inline(always)]
        #[must_use]
        pub fn sclk_plldivm(&mut self) -> SCLK_PLLDIVM_W<0> {
            SCLK_PLLDIVM_W::new(self)
        }
        #[doc = "Bits 1:2 - SCLK PLL Output divider"]
        #[inline(always)]
        #[must_use]
        pub fn sclk_plldivk(&mut self) -> SCLK_PLLDIVK_W<1> {
            SCLK_PLLDIVK_W::new(self)
        }
        #[doc = "Bits 3:5 - SCLK extra divider"]
        #[inline(always)]
        #[must_use]
        pub fn sclk_extra_divider(&mut self) -> SCLK_EXTRA_DIVIDER_W<3> {
            SCLK_EXTRA_DIVIDER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SCLK PLL Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ppllc1](index.html) module"]
    pub struct PPLLC1;
    impl crate::RegisterSpec for PPLLC1 {
        const ADDRESS: u8 = 5u8;
    }
    #[doc = "`read()` method returns [ppllc1::R](R) reader structure"]
    impl crate::Readable for PPLLC1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ppllc1::W](W) writer structure"]
    impl crate::Writable for PPLLC1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PPLLC1 to value 0x04"]
    impl crate::Resettable for PPLLC1 {
        const RESET_VALUE: u8 = 0x04;
    }
}
pub use ppllc2::PPLLC2;
#[doc = "SCLK PLL Control Register 2"]
pub mod ppllc2 {
    #[doc = "Register `PPLLC2` reader"]
    pub struct R(crate::R<PPLLC2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PPLLC2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PPLLC2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PPLLC2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PPLLC2` writer"]
    pub struct W(crate::W<PPLLC2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PPLLC2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PPLLC2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PPLLC2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SCLK_PLLDIVN` reader - MCLK PLL input parameter"]
    pub type SCLK_PLLDIVN_R = crate::FieldReader<u8>;
    #[doc = "Field `SCLK_PLLDIVN` writer - MCLK PLL input parameter"]
    pub type SCLK_PLLDIVN_W<'a, const O: u8> = crate::FieldWriter<'a, PPLLC2, u8, u8, 6, O>;
    impl R {
        #[doc = "Bits 0:5 - MCLK PLL input parameter"]
        #[inline(always)]
        pub fn sclk_plldivn(&self) -> SCLK_PLLDIVN_R {
            SCLK_PLLDIVN_R::new(self.bits & 0x3f)
        }
    }
    impl W {
        #[doc = "Bits 0:5 - MCLK PLL input parameter"]
        #[inline(always)]
        #[must_use]
        pub fn sclk_plldivn(&mut self) -> SCLK_PLLDIVN_W<0> {
            SCLK_PLLDIVN_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SCLK PLL Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ppllc2](index.html) module"]
    pub struct PPLLC2;
    impl crate::RegisterSpec for PPLLC2 {
        const ADDRESS: u8 = 6u8;
    }
    #[doc = "`read()` method returns [ppllc2::R](R) reader structure"]
    impl crate::Readable for PPLLC2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ppllc2::W](W) writer structure"]
    impl crate::Writable for PPLLC2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PPLLC2 to value 0x17"]
    impl crate::Resettable for PPLLC2 {
        const RESET_VALUE: u8 = 0x17;
    }
}
pub use mpllc1::MPLLC1;
#[doc = "MCLK PLL Control Register 1"]
pub mod mpllc1 {
    #[doc = "Register `MPLLC1` reader"]
    pub struct R(crate::R<MPLLC1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MPLLC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MPLLC1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MPLLC1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MPLLC1` writer"]
    pub struct W(crate::W<MPLLC1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MPLLC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MPLLC1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MPLLC1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MCLK_PLLDIVM` reader - MCLK PLL Pre-driver parameter"]
    pub type MCLK_PLLDIVM_R = crate::BitReader<bool>;
    #[doc = "Field `MCLK_PLLDIVM` writer - MCLK PLL Pre-driver parameter"]
    pub type MCLK_PLLDIVM_W<'a, const O: u8> = crate::BitWriter<'a, MPLLC1, bool, O>;
    #[doc = "Field `MCLK_PLLDIVK` reader - PCLK PLL Output divider"]
    pub type MCLK_PLLDIVK_R = crate::FieldReader<u8>;
    #[doc = "Field `MCLK_PLLDIVK` writer - PCLK PLL Output divider"]
    pub type MCLK_PLLDIVK_W<'a, const O: u8> = crate::FieldWriter<'a, MPLLC1, u8, u8, 2, O>;
    impl R {
        #[doc = "Bit 0 - MCLK PLL Pre-driver parameter"]
        #[inline(always)]
        pub fn mclk_plldivm(&self) -> MCLK_PLLDIVM_R {
            MCLK_PLLDIVM_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bits 1:2 - PCLK PLL Output divider"]
        #[inline(always)]
        pub fn mclk_plldivk(&self) -> MCLK_PLLDIVK_R {
            MCLK_PLLDIVK_R::new((self.bits >> 1) & 3)
        }
    }
    impl W {
        #[doc = "Bit 0 - MCLK PLL Pre-driver parameter"]
        #[inline(always)]
        #[must_use]
        pub fn mclk_plldivm(&mut self) -> MCLK_PLLDIVM_W<0> {
            MCLK_PLLDIVM_W::new(self)
        }
        #[doc = "Bits 1:2 - PCLK PLL Output divider"]
        #[inline(always)]
        #[must_use]
        pub fn mclk_plldivk(&mut self) -> MCLK_PLLDIVK_W<1> {
            MCLK_PLLDIVK_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "MCLK PLL Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mpllc1](index.html) module"]
    pub struct MPLLC1;
    impl crate::RegisterSpec for MPLLC1 {
        const ADDRESS: u8 = 7u8;
    }
    #[doc = "`read()` method returns [mpllc1::R](R) reader structure"]
    impl crate::Readable for MPLLC1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mpllc1::W](W) writer structure"]
    impl crate::Writable for MPLLC1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MPLLC1 to value 0x02"]
    impl crate::Resettable for MPLLC1 {
        const RESET_VALUE: u8 = 0x02;
    }
}
pub use mpllc2::MPLLC2;
#[doc = "MCLK PLL Control Register 2"]
pub mod mpllc2 {
    #[doc = "Register `MPLLC2` reader"]
    pub struct R(crate::R<MPLLC2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MPLLC2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MPLLC2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MPLLC2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MPLLC2` writer"]
    pub struct W(crate::W<MPLLC2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MPLLC2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MPLLC2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MPLLC2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MCLK_PLLDIVN` reader - MCLK PLL input parameter"]
    pub type MCLK_PLLDIVN_R = crate::FieldReader<u8>;
    #[doc = "Field `MCLK_PLLDIVN` writer - MCLK PLL input parameter"]
    pub type MCLK_PLLDIVN_W<'a, const O: u8> = crate::FieldWriter<'a, MPLLC2, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - MCLK PLL input parameter"]
        #[inline(always)]
        pub fn mclk_plldivn(&self) -> MCLK_PLLDIVN_R {
            MCLK_PLLDIVN_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - MCLK PLL input parameter"]
        #[inline(always)]
        #[must_use]
        pub fn mclk_plldivn(&mut self) -> MCLK_PLLDIVN_W<0> {
            MCLK_PLLDIVN_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "MCLK PLL Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mpllc2](index.html) module"]
    pub struct MPLLC2;
    impl crate::RegisterSpec for MPLLC2 {
        const ADDRESS: u8 = 8u8;
    }
    #[doc = "`read()` method returns [mpllc2::R](R) reader structure"]
    impl crate::Readable for MPLLC2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mpllc2::W](W) writer structure"]
    impl crate::Writable for MPLLC2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MPLLC2 to value 0x1d"]
    impl crate::Resettable for MPLLC2 {
        const RESET_VALUE: u8 = 0x1d;
    }
}
pub use spllc1::SPLLC1;
#[doc = "CCLK PLL Control Register 1"]
pub mod spllc1 {
    #[doc = "Register `SPLLC1` reader"]
    pub struct R(crate::R<SPLLC1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SPLLC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SPLLC1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SPLLC1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SPLLC1` writer"]
    pub struct W(crate::W<SPLLC1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SPLLC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SPLLC1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SPLLC1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CCLK_PLLDIVM` reader - CCLK PLL Pre-driver parameter"]
    pub type CCLK_PLLDIVM_R = crate::BitReader<bool>;
    #[doc = "Field `CCLK_PLLDIVM` writer - CCLK PLL Pre-driver parameter"]
    pub type CCLK_PLLDIVM_W<'a, const O: u8> = crate::BitWriter<'a, SPLLC1, bool, O>;
    #[doc = "Field `CCLK_PLLDIVK` reader - CCLK PLL Output divider"]
    pub type CCLK_PLLDIVK_R = crate::FieldReader<u8>;
    #[doc = "Field `CCLK_PLLDIVK` writer - CCLK PLL Output divider"]
    pub type CCLK_PLLDIVK_W<'a, const O: u8> = crate::FieldWriter<'a, SPLLC1, u8, u8, 2, O>;
    impl R {
        #[doc = "Bit 0 - CCLK PLL Pre-driver parameter"]
        #[inline(always)]
        pub fn cclk_plldivm(&self) -> CCLK_PLLDIVM_R {
            CCLK_PLLDIVM_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bits 1:2 - CCLK PLL Output divider"]
        #[inline(always)]
        pub fn cclk_plldivk(&self) -> CCLK_PLLDIVK_R {
            CCLK_PLLDIVK_R::new((self.bits >> 1) & 3)
        }
    }
    impl W {
        #[doc = "Bit 0 - CCLK PLL Pre-driver parameter"]
        #[inline(always)]
        #[must_use]
        pub fn cclk_plldivm(&mut self) -> CCLK_PLLDIVM_W<0> {
            CCLK_PLLDIVM_W::new(self)
        }
        #[doc = "Bits 1:2 - CCLK PLL Output divider"]
        #[inline(always)]
        #[must_use]
        pub fn cclk_plldivk(&mut self) -> CCLK_PLLDIVK_W<1> {
            CCLK_PLLDIVK_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "CCLK PLL Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spllc1](index.html) module"]
    pub struct SPLLC1;
    impl crate::RegisterSpec for SPLLC1 {
        const ADDRESS: u8 = 9u8;
    }
    #[doc = "`read()` method returns [spllc1::R](R) reader structure"]
    impl crate::Readable for SPLLC1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [spllc1::W](W) writer structure"]
    impl crate::Writable for SPLLC1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SPLLC1 to value 0x04"]
    impl crate::Resettable for SPLLC1 {
        const RESET_VALUE: u8 = 0x04;
    }
}
pub use spllc2::SPLLC2;
#[doc = "CCLK PLL Control Register 2"]
pub mod spllc2 {
    #[doc = "Register `SPLLC2` reader"]
    pub struct R(crate::R<SPLLC2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SPLLC2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SPLLC2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SPLLC2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SPLLC2` writer"]
    pub struct W(crate::W<SPLLC2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SPLLC2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SPLLC2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SPLLC2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CCLK_PLLDIVN` reader - CCLK PLL input parameter"]
    pub type CCLK_PLLDIVN_R = crate::FieldReader<u8>;
    #[doc = "Field `CCLK_PLLDIVN` writer - CCLK PLL input parameter"]
    pub type CCLK_PLLDIVN_W<'a, const O: u8> = crate::FieldWriter<'a, SPLLC2, u8, u8, 6, O>;
    impl R {
        #[doc = "Bits 0:5 - CCLK PLL input parameter"]
        #[inline(always)]
        pub fn cclk_plldivn(&self) -> CCLK_PLLDIVN_R {
            CCLK_PLLDIVN_R::new(self.bits & 0x3f)
        }
    }
    impl W {
        #[doc = "Bits 0:5 - CCLK PLL input parameter"]
        #[inline(always)]
        #[must_use]
        pub fn cclk_plldivn(&mut self) -> CCLK_PLLDIVN_W<0> {
            CCLK_PLLDIVN_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "CCLK PLL Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spllc2](index.html) module"]
    pub struct SPLLC2;
    impl crate::RegisterSpec for SPLLC2 {
        const ADDRESS: u8 = 10u8;
    }
    #[doc = "`read()` method returns [spllc2::R](R) reader structure"]
    impl crate::Readable for SPLLC2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [spllc2::W](W) writer structure"]
    impl crate::Writable for SPLLC2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SPLLC2 to value 0x2a"]
    impl crate::Resettable for SPLLC2 {
        const RESET_VALUE: u8 = 0x2a;
    }
}
pub use inten::INTEN;
#[doc = "Interrupt Enable Register"]
pub mod inten {
    #[doc = "Register `INTEN` reader"]
    pub struct R(crate::R<INTEN>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<INTEN>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<INTEN>> for R {
        #[inline(always)]
        fn from(reader: crate::R<INTEN>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `INTEN` writer"]
    pub struct W(crate::W<INTEN>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<INTEN>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<INTEN>> for W {
        #[inline(always)]
        fn from(writer: crate::W<INTEN>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PWM_TIMER_0_INTERRUPT_ENABLE` reader - PWM timer 0 Interrupt Enable"]
    pub type PWM_TIMER_0_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER_0_INTERRUPT_ENABLE` writer - PWM timer 0 Interrupt Enable"]
    pub type PWM_TIMER_0_INTERRUPT_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, INTEN, bool, O>;
    #[doc = "Field `PWM_TIMER_1_INTERRUPT_ENABLE` reader - PWM timer 1 Interrupt Enable"]
    pub type PWM_TIMER_1_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER_1_INTERRUPT_ENABLE` writer - PWM timer 1 Interrupt Enable"]
    pub type PWM_TIMER_1_INTERRUPT_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, INTEN, bool, O>;
    #[doc = "Field `CORE_TASK_COMPLETED_INTERRUPT_ENABLE` reader - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Enable"]
    pub type CORE_TASK_COMPLETED_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `CORE_TASK_COMPLETED_INTERRUPT_ENABLE` writer - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Enable"]
    pub type CORE_TASK_COMPLETED_INTERRUPT_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, INTEN, bool, O>;
    #[doc = "Field `KEY_SCAN_INTERRUPT_ENABLE` reader - Key Scan Interrupt Enable"]
    pub type KEY_SCAN_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `KEY_SCAN_INTERRUPT_ENABLE` writer - Key Scan Interrupt Enable"]
    pub type KEY_SCAN_INTERRUPT_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, INTEN, bool, O>;
    #[doc = "Field `VSYNC_TIME_BASE_INTERRUPT_ENABLE` reader - Vsync time base interrupt Enable"]
    pub type VSYNC_TIME_BASE_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `VSYNC_TIME_BASE_INTERRUPT_ENABLE` writer - Vsync time base interrupt Enable"]
    pub type VSYNC_TIME_BASE_INTERRUPT_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, INTEN, bool, O>;
    #[doc = "Field `I2C_MASTER_INTERRUPT_ENABLE` reader - I2C Master Interrupt Enable"]
    pub type I2C_MASTER_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `I2C_MASTER_INTERRUPT_ENABLE` writer - I2C Master Interrupt Enable"]
    pub type I2C_MASTER_INTERRUPT_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, INTEN, bool, O>;
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_ENABLE` reader - External Interrupt input (XPS\\[0\\]
pin) Enable"]
    pub type EXTERNAL_INTERRUPT_INPUT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_ENABLE` writer - External Interrupt input (XPS\\[0\\]
pin) Enable"]
    pub type EXTERNAL_INTERRUPT_INPUT_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, INTEN, bool, O>;
    #[doc = "Field `WAKEUP_RESUME_INTERRUPT_ENABLE` reader - Wakeup/resume Interrupt Enable"]
    pub type WAKEUP_RESUME_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `WAKEUP_RESUME_INTERRUPT_ENABLE` writer - Wakeup/resume Interrupt Enable"]
    pub type WAKEUP_RESUME_INTERRUPT_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, INTEN, bool, O>;
    impl R {
        #[doc = "Bit 0 - PWM timer 0 Interrupt Enable"]
        #[inline(always)]
        pub fn pwm_timer_0_interrupt_enable(&self) -> PWM_TIMER_0_INTERRUPT_ENABLE_R {
            PWM_TIMER_0_INTERRUPT_ENABLE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - PWM timer 1 Interrupt Enable"]
        #[inline(always)]
        pub fn pwm_timer_1_interrupt_enable(&self) -> PWM_TIMER_1_INTERRUPT_ENABLE_R {
            PWM_TIMER_1_INTERRUPT_ENABLE_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Enable"]
        #[inline(always)]
        pub fn core_task_completed_interrupt_enable(
            &self,
        ) -> CORE_TASK_COMPLETED_INTERRUPT_ENABLE_R {
            CORE_TASK_COMPLETED_INTERRUPT_ENABLE_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Key Scan Interrupt Enable"]
        #[inline(always)]
        pub fn key_scan_interrupt_enable(&self) -> KEY_SCAN_INTERRUPT_ENABLE_R {
            KEY_SCAN_INTERRUPT_ENABLE_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Vsync time base interrupt Enable"]
        #[inline(always)]
        pub fn vsync_time_base_interrupt_enable(&self) -> VSYNC_TIME_BASE_INTERRUPT_ENABLE_R {
            VSYNC_TIME_BASE_INTERRUPT_ENABLE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - I2C Master Interrupt Enable"]
        #[inline(always)]
        pub fn i2c_master_interrupt_enable(&self) -> I2C_MASTER_INTERRUPT_ENABLE_R {
            I2C_MASTER_INTERRUPT_ENABLE_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - External Interrupt input (XPS\\[0\\]
pin) Enable"]
        #[inline(always)]
        pub fn external_interrupt_input_enable(&self) -> EXTERNAL_INTERRUPT_INPUT_ENABLE_R {
            EXTERNAL_INTERRUPT_INPUT_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Wakeup/resume Interrupt Enable"]
        #[inline(always)]
        pub fn wakeup_resume_interrupt_enable(&self) -> WAKEUP_RESUME_INTERRUPT_ENABLE_R {
            WAKEUP_RESUME_INTERRUPT_ENABLE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - PWM timer 0 Interrupt Enable"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer_0_interrupt_enable(&mut self) -> PWM_TIMER_0_INTERRUPT_ENABLE_W<0> {
            PWM_TIMER_0_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Bit 1 - PWM timer 1 Interrupt Enable"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer_1_interrupt_enable(&mut self) -> PWM_TIMER_1_INTERRUPT_ENABLE_W<1> {
            PWM_TIMER_1_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Bit 2 - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Enable"]
        #[inline(always)]
        #[must_use]
        pub fn core_task_completed_interrupt_enable(
            &mut self,
        ) -> CORE_TASK_COMPLETED_INTERRUPT_ENABLE_W<2> {
            CORE_TASK_COMPLETED_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Bit 3 - Key Scan Interrupt Enable"]
        #[inline(always)]
        #[must_use]
        pub fn key_scan_interrupt_enable(&mut self) -> KEY_SCAN_INTERRUPT_ENABLE_W<3> {
            KEY_SCAN_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Bit 4 - Vsync time base interrupt Enable"]
        #[inline(always)]
        #[must_use]
        pub fn vsync_time_base_interrupt_enable(
            &mut self,
        ) -> VSYNC_TIME_BASE_INTERRUPT_ENABLE_W<4> {
            VSYNC_TIME_BASE_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Bit 5 - I2C Master Interrupt Enable"]
        #[inline(always)]
        #[must_use]
        pub fn i2c_master_interrupt_enable(&mut self) -> I2C_MASTER_INTERRUPT_ENABLE_W<5> {
            I2C_MASTER_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Bit 6 - External Interrupt input (XPS\\[0\\]
pin) Enable"]
        #[inline(always)]
        #[must_use]
        pub fn external_interrupt_input_enable(&mut self) -> EXTERNAL_INTERRUPT_INPUT_ENABLE_W<6> {
            EXTERNAL_INTERRUPT_INPUT_ENABLE_W::new(self)
        }
        #[doc = "Bit 7 - Wakeup/resume Interrupt Enable"]
        #[inline(always)]
        #[must_use]
        pub fn wakeup_resume_interrupt_enable(&mut self) -> WAKEUP_RESUME_INTERRUPT_ENABLE_W<7> {
            WAKEUP_RESUME_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Interrupt Enable Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [inten](index.html) module"]
    pub struct INTEN;
    impl crate::RegisterSpec for INTEN {
        const ADDRESS: u8 = 11u8;
    }
    #[doc = "`read()` method returns [inten::R](R) reader structure"]
    impl crate::Readable for INTEN {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [inten::W](W) writer structure"]
    impl crate::Writable for INTEN {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets INTEN to value 0"]
    impl crate::Resettable for INTEN {
        const RESET_VALUE: u8 = 0;
    }
}
pub use intf::INTF;
#[doc = "Interrupt Event Flag Register"]
pub mod intf {
    #[doc = "Register `INTF` reader"]
    pub struct R(crate::R<INTF>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<INTF>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<INTF>> for R {
        #[inline(always)]
        fn from(reader: crate::R<INTF>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `INTF` writer"]
    pub struct W(crate::W<INTF>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<INTF>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<INTF>> for W {
        #[inline(always)]
        fn from(writer: crate::W<INTF>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PWM_TIMER_0_INTERRUPT_FLAG` reader - PWM Timer 0 Interrupt Flag"]
    pub type PWM_TIMER_0_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER_0_INTERRUPT_FLAG` writer - PWM Timer 0 Interrupt Flag"]
    pub type PWM_TIMER_0_INTERRUPT_FLAG_W<'a, const O: u8> = crate::BitWriter<'a, INTF, bool, O>;
    #[doc = "Field `PWM_TIMER_1_INTERRUPT_FLAG` reader - PWM Timer 1 Interrupt Flag"]
    pub type PWM_TIMER_1_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER_1_INTERRUPT_FLAG` writer - PWM Timer 1 Interrupt Flag"]
    pub type PWM_TIMER_1_INTERRUPT_FLAG_W<'a, const O: u8> = crate::BitWriter<'a, INTF, bool, O>;
    #[doc = "Field `CORE_TASK_COMPLETED_INTERRUPT_FLAG` reader - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
    pub type CORE_TASK_COMPLETED_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `CORE_TASK_COMPLETED_INTERRUPT_FLAG` writer - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
    pub type CORE_TASK_COMPLETED_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, INTF, bool, O>;
    #[doc = "Field `KEY_SCAN_INTERRUPT_FLAG` reader - Key Scan Interrupt Flag"]
    pub type KEY_SCAN_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `KEY_SCAN_INTERRUPT_FLAG` writer - Key Scan Interrupt Flag"]
    pub type KEY_SCAN_INTERRUPT_FLAG_W<'a, const O: u8> = crate::BitWriter<'a, INTF, bool, O>;
    #[doc = "Field `VSYNC_TIME_BASE_INTERRUPT_FLAG` reader - Vsync Time Base Interrupt Flag"]
    pub type VSYNC_TIME_BASE_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `VSYNC_TIME_BASE_INTERRUPT_FLAG` writer - Vsync Time Base Interrupt Flag"]
    pub type VSYNC_TIME_BASE_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, INTF, bool, O>;
    #[doc = "Field `I2C_MASTER_INTERRUPT_FLAG` reader - I2C Master Interrupt Flag"]
    pub type I2C_MASTER_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `I2C_MASTER_INTERRUPT_FLAG` writer - I2C Master Interrupt Flag"]
    pub type I2C_MASTER_INTERRUPT_FLAG_W<'a, const O: u8> = crate::BitWriter<'a, INTF, bool, O>;
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_FLAG` reader - External Interrupt input (XPS\\[0\\]
pin) Flag"]
    pub type EXTERNAL_INTERRUPT_INPUT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `EXTERNAL_INTERRUPT_INPUT_FLAG` writer - External Interrupt input (XPS\\[0\\]
pin) Flag"]
    pub type EXTERNAL_INTERRUPT_INPUT_FLAG_W<'a, const O: u8> = crate::BitWriter<'a, INTF, bool, O>;
    #[doc = "Field `WAKEUP_RESUME_INTERRUPT_FLAG` reader - Wakeup/resume Interrupt Flag"]
    pub type WAKEUP_RESUME_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `WAKEUP_RESUME_INTERRUPT_FLAG` writer - Wakeup/resume Interrupt Flag"]
    pub type WAKEUP_RESUME_INTERRUPT_FLAG_W<'a, const O: u8> = crate::BitWriter<'a, INTF, bool, O>;
    impl R {
        #[doc = "Bit 0 - PWM Timer 0 Interrupt Flag"]
        #[inline(always)]
        pub fn pwm_timer_0_interrupt_flag(&self) -> PWM_TIMER_0_INTERRUPT_FLAG_R {
            PWM_TIMER_0_INTERRUPT_FLAG_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - PWM Timer 1 Interrupt Flag"]
        #[inline(always)]
        pub fn pwm_timer_1_interrupt_flag(&self) -> PWM_TIMER_1_INTERRUPT_FLAG_R {
            PWM_TIMER_1_INTERRUPT_FLAG_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
        #[inline(always)]
        pub fn core_task_completed_interrupt_flag(&self) -> CORE_TASK_COMPLETED_INTERRUPT_FLAG_R {
            CORE_TASK_COMPLETED_INTERRUPT_FLAG_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Key Scan Interrupt Flag"]
        #[inline(always)]
        pub fn key_scan_interrupt_flag(&self) -> KEY_SCAN_INTERRUPT_FLAG_R {
            KEY_SCAN_INTERRUPT_FLAG_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Vsync Time Base Interrupt Flag"]
        #[inline(always)]
        pub fn vsync_time_base_interrupt_flag(&self) -> VSYNC_TIME_BASE_INTERRUPT_FLAG_R {
            VSYNC_TIME_BASE_INTERRUPT_FLAG_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - I2C Master Interrupt Flag"]
        #[inline(always)]
        pub fn i2c_master_interrupt_flag(&self) -> I2C_MASTER_INTERRUPT_FLAG_R {
            I2C_MASTER_INTERRUPT_FLAG_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - External Interrupt input (XPS\\[0\\]
pin) Flag"]
        #[inline(always)]
        pub fn external_interrupt_input_flag(&self) -> EXTERNAL_INTERRUPT_INPUT_FLAG_R {
            EXTERNAL_INTERRUPT_INPUT_FLAG_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Wakeup/resume Interrupt Flag"]
        #[inline(always)]
        pub fn wakeup_resume_interrupt_flag(&self) -> WAKEUP_RESUME_INTERRUPT_FLAG_R {
            WAKEUP_RESUME_INTERRUPT_FLAG_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - PWM Timer 0 Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer_0_interrupt_flag(&mut self) -> PWM_TIMER_0_INTERRUPT_FLAG_W<0> {
            PWM_TIMER_0_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 1 - PWM Timer 1 Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer_1_interrupt_flag(&mut self) -> PWM_TIMER_1_INTERRUPT_FLAG_W<1> {
            PWM_TIMER_1_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 2 - Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn core_task_completed_interrupt_flag(
            &mut self,
        ) -> CORE_TASK_COMPLETED_INTERRUPT_FLAG_W<2> {
            CORE_TASK_COMPLETED_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 3 - Key Scan Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn key_scan_interrupt_flag(&mut self) -> KEY_SCAN_INTERRUPT_FLAG_W<3> {
            KEY_SCAN_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 4 - Vsync Time Base Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn vsync_time_base_interrupt_flag(&mut self) -> VSYNC_TIME_BASE_INTERRUPT_FLAG_W<4> {
            VSYNC_TIME_BASE_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 5 - I2C Master Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn i2c_master_interrupt_flag(&mut self) -> I2C_MASTER_INTERRUPT_FLAG_W<5> {
            I2C_MASTER_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 6 - External Interrupt input (XPS\\[0\\]
pin) Flag"]
        #[inline(always)]
        #[must_use]
        pub fn external_interrupt_input_flag(&mut self) -> EXTERNAL_INTERRUPT_INPUT_FLAG_W<6> {
            EXTERNAL_INTERRUPT_INPUT_FLAG_W::new(self)
        }
        #[doc = "Bit 7 - Wakeup/resume Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn wakeup_resume_interrupt_flag(&mut self) -> WAKEUP_RESUME_INTERRUPT_FLAG_W<7> {
            WAKEUP_RESUME_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Interrupt Event Flag Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [intf](index.html) module"]
    pub struct INTF;
    impl crate::RegisterSpec for INTF {
        const ADDRESS: u8 = 12u8;
    }
    #[doc = "`read()` method returns [intf::R](R) reader structure"]
    impl crate::Readable for INTF {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [intf::W](W) writer structure"]
    impl crate::Writable for INTF {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets INTF to value 0"]
    impl crate::Resettable for INTF {
        const RESET_VALUE: u8 = 0;
    }
}
pub use mintfr::MINTFR;
#[doc = "Mask Interrupt Flag Register"]
pub mod mintfr {
    #[doc = "Register `MINTFR` reader"]
    pub struct R(crate::R<MINTFR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MINTFR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MINTFR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MINTFR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MINTFR` writer"]
    pub struct W(crate::W<MINTFR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MINTFR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MINTFR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MINTFR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MASK_PWM_TIMER_0_INTERRUPT_FLAG` reader - Mask PWM Timer 0 Interrupt Flag"]
    pub type MASK_PWM_TIMER_0_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_PWM_TIMER_0_INTERRUPT_FLAG` writer - Mask PWM Timer 0 Interrupt Flag"]
    pub type MASK_PWM_TIMER_0_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    #[doc = "Field `MASK_PWM_TIMER_1_INTERRUPT_FLAG` reader - Mask PWM Timer 1 Interrupt Flag"]
    pub type MASK_PWM_TIMER_1_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_PWM_TIMER_1_INTERRUPT_FLAG` writer - Mask PWM Timer 1 Interrupt Flag"]
    pub type MASK_PWM_TIMER_1_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    #[doc = "Field `MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG` reader - Mask Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
    pub type MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG` writer - Mask Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
    pub type MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    #[doc = "Field `MASK_KEY_SCAN_INTERRUPT_FLAG` reader - Mask Key Scan Interrupt Flag"]
    pub type MASK_KEY_SCAN_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_KEY_SCAN_INTERRUPT_FLAG` writer - Mask Key Scan Interrupt Flag"]
    pub type MASK_KEY_SCAN_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    #[doc = "Field `MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG` reader - Mask Vsync Time Base Interrupt Flag"]
    pub type MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG` writer - Mask Vsync Time Base Interrupt Flag"]
    pub type MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    #[doc = "Field `MASK_I2C_MASTER_INTERRUPT_FLAG` reader - Mask I2C Master Interrupt Flag"]
    pub type MASK_I2C_MASTER_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_I2C_MASTER_INTERRUPT_FLAG` writer - Mask I2C Master Interrupt Flag"]
    pub type MASK_I2C_MASTER_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    #[doc = "Field `MASK_EXTERNAL_INTERRUPT_INPUT_FLAG` reader - Mask External Interrupt input (XPS\\[0\\]
pin) Flag"]
    pub type MASK_EXTERNAL_INTERRUPT_INPUT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_EXTERNAL_INTERRUPT_INPUT_FLAG` writer - Mask External Interrupt input (XPS\\[0\\]
pin) Flag"]
    pub type MASK_EXTERNAL_INTERRUPT_INPUT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    #[doc = "Field `MASK_WAKEUP_RESUME_INTERRUPT_FLAG` reader - Mask Wakeup/resume Interrupt Flag"]
    pub type MASK_WAKEUP_RESUME_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_WAKEUP_RESUME_INTERRUPT_FLAG` writer - Mask Wakeup/resume Interrupt Flag"]
    pub type MASK_WAKEUP_RESUME_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, MINTFR, bool, O>;
    impl R {
        #[doc = "Bit 0 - Mask PWM Timer 0 Interrupt Flag"]
        #[inline(always)]
        pub fn mask_pwm_timer_0_interrupt_flag(&self) -> MASK_PWM_TIMER_0_INTERRUPT_FLAG_R {
            MASK_PWM_TIMER_0_INTERRUPT_FLAG_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Mask PWM Timer 1 Interrupt Flag"]
        #[inline(always)]
        pub fn mask_pwm_timer_1_interrupt_flag(&self) -> MASK_PWM_TIMER_1_INTERRUPT_FLAG_R {
            MASK_PWM_TIMER_1_INTERRUPT_FLAG_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Mask Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
        #[inline(always)]
        pub fn mask_core_task_completed_interrupt_flag(
            &self,
        ) -> MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG_R {
            MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Mask Key Scan Interrupt Flag"]
        #[inline(always)]
        pub fn mask_key_scan_interrupt_flag(&self) -> MASK_KEY_SCAN_INTERRUPT_FLAG_R {
            MASK_KEY_SCAN_INTERRUPT_FLAG_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Mask Vsync Time Base Interrupt Flag"]
        #[inline(always)]
        pub fn mask_vsync_time_base_interrupt_flag(&self) -> MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG_R {
            MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Mask I2C Master Interrupt Flag"]
        #[inline(always)]
        pub fn mask_i2c_master_interrupt_flag(&self) -> MASK_I2C_MASTER_INTERRUPT_FLAG_R {
            MASK_I2C_MASTER_INTERRUPT_FLAG_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Mask External Interrupt input (XPS\\[0\\]
pin) Flag"]
        #[inline(always)]
        pub fn mask_external_interrupt_input_flag(&self) -> MASK_EXTERNAL_INTERRUPT_INPUT_FLAG_R {
            MASK_EXTERNAL_INTERRUPT_INPUT_FLAG_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Mask Wakeup/resume Interrupt Flag"]
        #[inline(always)]
        pub fn mask_wakeup_resume_interrupt_flag(&self) -> MASK_WAKEUP_RESUME_INTERRUPT_FLAG_R {
            MASK_WAKEUP_RESUME_INTERRUPT_FLAG_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Mask PWM Timer 0 Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_pwm_timer_0_interrupt_flag(&mut self) -> MASK_PWM_TIMER_0_INTERRUPT_FLAG_W<0> {
            MASK_PWM_TIMER_0_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 1 - Mask PWM Timer 1 Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_pwm_timer_1_interrupt_flag(&mut self) -> MASK_PWM_TIMER_1_INTERRUPT_FLAG_W<1> {
            MASK_PWM_TIMER_1_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 2 - Mask Serial flash DMA Complete | Draw task finished | BTE Process Complete etc. Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_core_task_completed_interrupt_flag(
            &mut self,
        ) -> MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG_W<2> {
            MASK_CORE_TASK_COMPLETED_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 3 - Mask Key Scan Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_key_scan_interrupt_flag(&mut self) -> MASK_KEY_SCAN_INTERRUPT_FLAG_W<3> {
            MASK_KEY_SCAN_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 4 - Mask Vsync Time Base Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_vsync_time_base_interrupt_flag(
            &mut self,
        ) -> MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG_W<4> {
            MASK_VSYNC_TIME_BASE_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 5 - Mask I2C Master Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_i2c_master_interrupt_flag(&mut self) -> MASK_I2C_MASTER_INTERRUPT_FLAG_W<5> {
            MASK_I2C_MASTER_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 6 - Mask External Interrupt input (XPS\\[0\\]
pin) Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_external_interrupt_input_flag(
            &mut self,
        ) -> MASK_EXTERNAL_INTERRUPT_INPUT_FLAG_W<6> {
            MASK_EXTERNAL_INTERRUPT_INPUT_FLAG_W::new(self)
        }
        #[doc = "Bit 7 - Mask Wakeup/resume Interrupt Flag"]
        #[inline(always)]
        #[must_use]
        pub fn mask_wakeup_resume_interrupt_flag(
            &mut self,
        ) -> MASK_WAKEUP_RESUME_INTERRUPT_FLAG_W<7> {
            MASK_WAKEUP_RESUME_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Mask Interrupt Flag Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mintfr](index.html) module"]
    pub struct MINTFR;
    impl crate::RegisterSpec for MINTFR {
        const ADDRESS: u8 = 13u8;
    }
    #[doc = "`read()` method returns [mintfr::R](R) reader structure"]
    impl crate::Readable for MINTFR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mintfr::W](W) writer structure"]
    impl crate::Writable for MINTFR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MINTFR to value 0"]
    impl crate::Resettable for MINTFR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use puenr::PUENR;
#[doc = "Pull-high control Register"]
pub mod puenr {
    #[doc = "Register `PUENR` reader"]
    pub struct R(crate::R<PUENR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PUENR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PUENR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PUENR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PUENR` writer"]
    pub struct W(crate::W<PUENR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PUENR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PUENR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PUENR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DB_LSB_PULL_HIGH_ENABLE` reader - XDB\\[7:0\\]
Pull-high Enable (multiplexed with serial host signals if serial host mode set)"]
    pub type DB_LSB_PULL_HIGH_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `DB_LSB_PULL_HIGH_ENABLE` writer - XDB\\[7:0\\]
Pull-high Enable (multiplexed with serial host signals if serial host mode set)"]
    pub type DB_LSB_PULL_HIGH_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PUENR, bool, O>;
    #[doc = "Field `DB_MSB_PULL_HIGH_ENABLE` reader - XDB\\[15:8\\]
Pull-high Enable (shared with GPIO-A\\[7:0\\])"]
    pub type DB_MSB_PULL_HIGH_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `DB_MSB_PULL_HIGH_ENABLE` writer - XDB\\[15:8\\]
Pull-high Enable (shared with GPIO-A\\[7:0\\])"]
    pub type DB_MSB_PULL_HIGH_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PUENR, bool, O>;
    #[doc = "Field `GPIO_C_PULL_HIGH_ENABLE` reader - GPIO-C\\[4:0\\]
Pull-high Enable (XnSFCS1, XnSFCS0, XMISO, XMOSI , XSCK)"]
    pub type GPIO_C_PULL_HIGH_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `GPIO_C_PULL_HIGH_ENABLE` writer - GPIO-C\\[4:0\\]
Pull-high Enable (XnSFCS1, XnSFCS0, XMISO, XMOSI , XSCK)"]
    pub type GPIO_C_PULL_HIGH_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PUENR, bool, O>;
    #[doc = "Field `GPIO_D_PULL_HIGH_ENABLE` reader - GPIO-D\\[7:0\\]
Pull-high Enable (XPDAT\\[18, 2, 17, 16, 9, 8, 1,0\\])"]
    pub type GPIO_D_PULL_HIGH_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `GPIO_D_PULL_HIGH_ENABLE` writer - GPIO-D\\[7:0\\]
Pull-high Enable (XPDAT\\[18, 2, 17, 16, 9, 8, 1,0\\])"]
    pub type GPIO_D_PULL_HIGH_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PUENR, bool, O>;
    #[doc = "Field `GPIO_E_PULL_HIGH_ENABLE` reader - GPIO-E\\[7:0\\]
Pull-high Enable (XPDAT\\[12:10, 7:3\\])"]
    pub type GPIO_E_PULL_HIGH_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `GPIO_E_PULL_HIGH_ENABLE` writer - GPIO-E\\[7:0\\]
Pull-high Enable (XPDAT\\[12:10, 7:3\\])"]
    pub type GPIO_E_PULL_HIGH_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PUENR, bool, O>;
    #[doc = "Field `GPIO_F_PULL_HIGH_ENABLE` reader - GPIO-F\\[7:0\\]
Pull-high Enable (XPDAT\\[23:19, 15:13\\])"]
    pub type GPIO_F_PULL_HIGH_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `GPIO_F_PULL_HIGH_ENABLE` writer - GPIO-F\\[7:0\\]
Pull-high Enable (XPDAT\\[23:19, 15:13\\])"]
    pub type GPIO_F_PULL_HIGH_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PUENR, bool, O>;
    impl R {
        #[doc = "Bit 0 - XDB\\[7:0\\]
Pull-high Enable (multiplexed with serial host signals if serial host mode set)"]
        #[inline(always)]
        pub fn db_lsb_pull_high_enable(&self) -> DB_LSB_PULL_HIGH_ENABLE_R {
            DB_LSB_PULL_HIGH_ENABLE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - XDB\\[15:8\\]
Pull-high Enable (shared with GPIO-A\\[7:0\\])"]
        #[inline(always)]
        pub fn db_msb_pull_high_enable(&self) -> DB_MSB_PULL_HIGH_ENABLE_R {
            DB_MSB_PULL_HIGH_ENABLE_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - GPIO-C\\[4:0\\]
Pull-high Enable (XnSFCS1, XnSFCS0, XMISO, XMOSI , XSCK)"]
        #[inline(always)]
        pub fn gpio_c_pull_high_enable(&self) -> GPIO_C_PULL_HIGH_ENABLE_R {
            GPIO_C_PULL_HIGH_ENABLE_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - GPIO-D\\[7:0\\]
Pull-high Enable (XPDAT\\[18, 2, 17, 16, 9, 8, 1,0\\])"]
        #[inline(always)]
        pub fn gpio_d_pull_high_enable(&self) -> GPIO_D_PULL_HIGH_ENABLE_R {
            GPIO_D_PULL_HIGH_ENABLE_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - GPIO-E\\[7:0\\]
Pull-high Enable (XPDAT\\[12:10, 7:3\\])"]
        #[inline(always)]
        pub fn gpio_e_pull_high_enable(&self) -> GPIO_E_PULL_HIGH_ENABLE_R {
            GPIO_E_PULL_HIGH_ENABLE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - GPIO-F\\[7:0\\]
Pull-high Enable (XPDAT\\[23:19, 15:13\\])"]
        #[inline(always)]
        pub fn gpio_f_pull_high_enable(&self) -> GPIO_F_PULL_HIGH_ENABLE_R {
            GPIO_F_PULL_HIGH_ENABLE_R::new(((self.bits >> 5) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - XDB\\[7:0\\]
Pull-high Enable (multiplexed with serial host signals if serial host mode set)"]
        #[inline(always)]
        #[must_use]
        pub fn db_lsb_pull_high_enable(&mut self) -> DB_LSB_PULL_HIGH_ENABLE_W<0> {
            DB_LSB_PULL_HIGH_ENABLE_W::new(self)
        }
        #[doc = "Bit 1 - XDB\\[15:8\\]
Pull-high Enable (shared with GPIO-A\\[7:0\\])"]
        #[inline(always)]
        #[must_use]
        pub fn db_msb_pull_high_enable(&mut self) -> DB_MSB_PULL_HIGH_ENABLE_W<1> {
            DB_MSB_PULL_HIGH_ENABLE_W::new(self)
        }
        #[doc = "Bit 2 - GPIO-C\\[4:0\\]
Pull-high Enable (XnSFCS1, XnSFCS0, XMISO, XMOSI , XSCK)"]
        #[inline(always)]
        #[must_use]
        pub fn gpio_c_pull_high_enable(&mut self) -> GPIO_C_PULL_HIGH_ENABLE_W<2> {
            GPIO_C_PULL_HIGH_ENABLE_W::new(self)
        }
        #[doc = "Bit 3 - GPIO-D\\[7:0\\]
Pull-high Enable (XPDAT\\[18, 2, 17, 16, 9, 8, 1,0\\])"]
        #[inline(always)]
        #[must_use]
        pub fn gpio_d_pull_high_enable(&mut self) -> GPIO_D_PULL_HIGH_ENABLE_W<3> {
            GPIO_D_PULL_HIGH_ENABLE_W::new(self)
        }
        #[doc = "Bit 4 - GPIO-E\\[7:0\\]
Pull-high Enable (XPDAT\\[12:10, 7:3\\])"]
        #[inline(always)]
        #[must_use]
        pub fn gpio_e_pull_high_enable(&mut self) -> GPIO_E_PULL_HIGH_ENABLE_W<4> {
            GPIO_E_PULL_HIGH_ENABLE_W::new(self)
        }
        #[doc = "Bit 5 - GPIO-F\\[7:0\\]
Pull-high Enable (XPDAT\\[23:19, 15:13\\])"]
        #[inline(always)]
        #[must_use]
        pub fn gpio_f_pull_high_enable(&mut self) -> GPIO_F_PULL_HIGH_ENABLE_W<5> {
            GPIO_F_PULL_HIGH_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Pull-high control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [puenr](index.html) module"]
    pub struct PUENR;
    impl crate::RegisterSpec for PUENR {
        const ADDRESS: u8 = 14u8;
    }
    #[doc = "`read()` method returns [puenr::R](R) reader structure"]
    impl crate::Readable for PUENR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [puenr::W](W) writer structure"]
    impl crate::Writable for PUENR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PUENR to value 0"]
    impl crate::Resettable for PUENR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use psfsr::PSFSR;
#[doc = "PDAT for PIO/Key Function Select Register"]
pub mod psfsr {
    #[doc = "Register `PSFSR` reader"]
    pub struct R(crate::R<PSFSR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PSFSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PSFSR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PSFSR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PSFSR` writer"]
    pub struct W(crate::W<PSFSR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PSFSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PSFSR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PSFSR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PDAT0_FUNCTION_SELECT` reader - XPDAT\\[0\\]
- GPIO or Key function select"]
    pub type PDAT0_FUNCTION_SELECT_R = crate::BitReader<PDAT0_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[0\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT0_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D0"]
        GPIO = 0,
        #[doc = "1: XKIN\\[1\\]"]
        XKIN = 1,
    }
    impl From<PDAT0_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT0_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT0_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT0_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT0_FUNCTION_SELECT_A::GPIO,
                true => PDAT0_FUNCTION_SELECT_A::XKIN,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT0_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKIN`"]
        #[inline(always)]
        pub fn is_xkin(&self) -> bool {
            *self == PDAT0_FUNCTION_SELECT_A::XKIN
        }
    }
    #[doc = "Field `PDAT0_FUNCTION_SELECT` writer - XPDAT\\[0\\]
- GPIO or Key function select"]
    pub type PDAT0_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT0_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT0_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D0"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT0_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKIN\\[1\\]"]
        #[inline(always)]
        pub fn xkin(self) -> &'a mut W {
            self.variant(PDAT0_FUNCTION_SELECT_A::XKIN)
        }
    }
    #[doc = "Field `PDAT1_FUNCTION_SELECT` reader - XPDAT\\[1\\]
- GPIO or Key function select"]
    pub type PDAT1_FUNCTION_SELECT_R = crate::BitReader<PDAT1_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[1\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT1_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D1"]
        GPIO = 0,
        #[doc = "1: XKIN\\[2\\]"]
        XKIN = 1,
    }
    impl From<PDAT1_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT1_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT1_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT1_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT1_FUNCTION_SELECT_A::GPIO,
                true => PDAT1_FUNCTION_SELECT_A::XKIN,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT1_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKIN`"]
        #[inline(always)]
        pub fn is_xkin(&self) -> bool {
            *self == PDAT1_FUNCTION_SELECT_A::XKIN
        }
    }
    #[doc = "Field `PDAT1_FUNCTION_SELECT` writer - XPDAT\\[1\\]
- GPIO or Key function select"]
    pub type PDAT1_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT1_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT1_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D1"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT1_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKIN\\[2\\]"]
        #[inline(always)]
        pub fn xkin(self) -> &'a mut W {
            self.variant(PDAT1_FUNCTION_SELECT_A::XKIN)
        }
    }
    #[doc = "Field `PDAT2_FUNCTION_SELECT` reader - XPDAT\\[2\\]
- GPIO or Key function select"]
    pub type PDAT2_FUNCTION_SELECT_R = crate::BitReader<PDAT2_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[2\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT2_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D6"]
        GPIO = 0,
        #[doc = "1: XKIN\\[4\\]"]
        XKIN = 1,
    }
    impl From<PDAT2_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT2_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT2_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT2_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT2_FUNCTION_SELECT_A::GPIO,
                true => PDAT2_FUNCTION_SELECT_A::XKIN,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT2_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKIN`"]
        #[inline(always)]
        pub fn is_xkin(&self) -> bool {
            *self == PDAT2_FUNCTION_SELECT_A::XKIN
        }
    }
    #[doc = "Field `PDAT2_FUNCTION_SELECT` writer - XPDAT\\[2\\]
- GPIO or Key function select"]
    pub type PDAT2_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT2_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT2_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D6"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT2_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKIN\\[4\\]"]
        #[inline(always)]
        pub fn xkin(self) -> &'a mut W {
            self.variant(PDAT2_FUNCTION_SELECT_A::XKIN)
        }
    }
    #[doc = "Field `PDAT8_FUNCTION_SELECT` reader - XPDAT\\[8\\]
- GPIO or Key function select"]
    pub type PDAT8_FUNCTION_SELECT_R = crate::BitReader<PDAT8_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[8\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT8_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D2"]
        GPIO = 0,
        #[doc = "1: XKIN\\[3\\]"]
        XKIN = 1,
    }
    impl From<PDAT8_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT8_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT8_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT8_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT8_FUNCTION_SELECT_A::GPIO,
                true => PDAT8_FUNCTION_SELECT_A::XKIN,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT8_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKIN`"]
        #[inline(always)]
        pub fn is_xkin(&self) -> bool {
            *self == PDAT8_FUNCTION_SELECT_A::XKIN
        }
    }
    #[doc = "Field `PDAT8_FUNCTION_SELECT` writer - XPDAT\\[8\\]
- GPIO or Key function select"]
    pub type PDAT8_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT8_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT8_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D2"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT8_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKIN\\[3\\]"]
        #[inline(always)]
        pub fn xkin(self) -> &'a mut W {
            self.variant(PDAT8_FUNCTION_SELECT_A::XKIN)
        }
    }
    #[doc = "Field `PDAT9_FUNCTION_SELECT` reader - XPDAT\\[9\\]
- GPIO or Key function select"]
    pub type PDAT9_FUNCTION_SELECT_R = crate::BitReader<PDAT9_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[9\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT9_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D3"]
        GPIO = 0,
        #[doc = "1: XKOUT\\[3\\]"]
        XKOUT = 1,
    }
    impl From<PDAT9_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT9_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT9_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT9_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT9_FUNCTION_SELECT_A::GPIO,
                true => PDAT9_FUNCTION_SELECT_A::XKOUT,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT9_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKOUT`"]
        #[inline(always)]
        pub fn is_xkout(&self) -> bool {
            *self == PDAT9_FUNCTION_SELECT_A::XKOUT
        }
    }
    #[doc = "Field `PDAT9_FUNCTION_SELECT` writer - XPDAT\\[9\\]
- GPIO or Key function select"]
    pub type PDAT9_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT9_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT9_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D3"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT9_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKOUT\\[3\\]"]
        #[inline(always)]
        pub fn xkout(self) -> &'a mut W {
            self.variant(PDAT9_FUNCTION_SELECT_A::XKOUT)
        }
    }
    #[doc = "Field `PDAT16_FUNCTION_SELECT` reader - XPDAT\\[16\\]
- GPIO or Key function select"]
    pub type PDAT16_FUNCTION_SELECT_R = crate::BitReader<PDAT16_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[16\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT16_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D4"]
        GPIO = 0,
        #[doc = "1: XKOUT\\[1\\]"]
        XKOUT = 1,
    }
    impl From<PDAT16_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT16_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT16_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT16_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT16_FUNCTION_SELECT_A::GPIO,
                true => PDAT16_FUNCTION_SELECT_A::XKOUT,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT16_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKOUT`"]
        #[inline(always)]
        pub fn is_xkout(&self) -> bool {
            *self == PDAT16_FUNCTION_SELECT_A::XKOUT
        }
    }
    #[doc = "Field `PDAT16_FUNCTION_SELECT` writer - XPDAT\\[16\\]
- GPIO or Key function select"]
    pub type PDAT16_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT16_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT16_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D4"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT16_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKOUT\\[1\\]"]
        #[inline(always)]
        pub fn xkout(self) -> &'a mut W {
            self.variant(PDAT16_FUNCTION_SELECT_A::XKOUT)
        }
    }
    #[doc = "Field `PDAT17_FUNCTION_SELECT` reader - XPDAT\\[17\\]
- GPIO or Key function select"]
    pub type PDAT17_FUNCTION_SELECT_R = crate::BitReader<PDAT17_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[17\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT17_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D5"]
        GPIO = 0,
        #[doc = "1: XKOUT\\[2\\]"]
        XKOUT = 1,
    }
    impl From<PDAT17_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT17_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT17_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT17_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT17_FUNCTION_SELECT_A::GPIO,
                true => PDAT17_FUNCTION_SELECT_A::XKOUT,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT17_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKOUT`"]
        #[inline(always)]
        pub fn is_xkout(&self) -> bool {
            *self == PDAT17_FUNCTION_SELECT_A::XKOUT
        }
    }
    #[doc = "Field `PDAT17_FUNCTION_SELECT` writer - XPDAT\\[17\\]
- GPIO or Key function select"]
    pub type PDAT17_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT17_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT17_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D5"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT17_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKOUT\\[2\\]"]
        #[inline(always)]
        pub fn xkout(self) -> &'a mut W {
            self.variant(PDAT17_FUNCTION_SELECT_A::XKOUT)
        }
    }
    #[doc = "Field `PDAT18_FUNCTION_SELECT` reader - XPDAT\\[18\\]
- GPIO or Key function select"]
    pub type PDAT18_FUNCTION_SELECT_R = crate::BitReader<PDAT18_FUNCTION_SELECT_A>;
    #[doc = "XPDAT\\[18\\]
- GPIO or Key function select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT18_FUNCTION_SELECT_A {
        #[doc = "0: GPIO-D7"]
        GPIO = 0,
        #[doc = "1: XKOUT\\[4\\]"]
        XKOUT = 1,
    }
    impl From<PDAT18_FUNCTION_SELECT_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT18_FUNCTION_SELECT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT18_FUNCTION_SELECT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT18_FUNCTION_SELECT_A {
            match self.bits {
                false => PDAT18_FUNCTION_SELECT_A::GPIO,
                true => PDAT18_FUNCTION_SELECT_A::XKOUT,
            }
        }
        #[doc = "Checks if the value of the field is `GPIO`"]
        #[inline(always)]
        pub fn is_gpio(&self) -> bool {
            *self == PDAT18_FUNCTION_SELECT_A::GPIO
        }
        #[doc = "Checks if the value of the field is `XKOUT`"]
        #[inline(always)]
        pub fn is_xkout(&self) -> bool {
            *self == PDAT18_FUNCTION_SELECT_A::XKOUT
        }
    }
    #[doc = "Field `PDAT18_FUNCTION_SELECT` writer - XPDAT\\[18\\]
- GPIO or Key function select"]
    pub type PDAT18_FUNCTION_SELECT_W<'a, const O: u8> =
        crate::BitWriter<'a, PSFSR, PDAT18_FUNCTION_SELECT_A, O>;
    impl<'a, const O: u8> PDAT18_FUNCTION_SELECT_W<'a, O> {
        #[doc = "GPIO-D7"]
        #[inline(always)]
        pub fn gpio(self) -> &'a mut W {
            self.variant(PDAT18_FUNCTION_SELECT_A::GPIO)
        }
        #[doc = "XKOUT\\[4\\]"]
        #[inline(always)]
        pub fn xkout(self) -> &'a mut W {
            self.variant(PDAT18_FUNCTION_SELECT_A::XKOUT)
        }
    }
    impl R {
        #[doc = "Bit 0 - XPDAT\\[0\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat0_function_select(&self) -> PDAT0_FUNCTION_SELECT_R {
            PDAT0_FUNCTION_SELECT_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - XPDAT\\[1\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat1_function_select(&self) -> PDAT1_FUNCTION_SELECT_R {
            PDAT1_FUNCTION_SELECT_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - XPDAT\\[2\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat2_function_select(&self) -> PDAT2_FUNCTION_SELECT_R {
            PDAT2_FUNCTION_SELECT_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - XPDAT\\[8\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat8_function_select(&self) -> PDAT8_FUNCTION_SELECT_R {
            PDAT8_FUNCTION_SELECT_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - XPDAT\\[9\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat9_function_select(&self) -> PDAT9_FUNCTION_SELECT_R {
            PDAT9_FUNCTION_SELECT_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - XPDAT\\[16\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat16_function_select(&self) -> PDAT16_FUNCTION_SELECT_R {
            PDAT16_FUNCTION_SELECT_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - XPDAT\\[17\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat17_function_select(&self) -> PDAT17_FUNCTION_SELECT_R {
            PDAT17_FUNCTION_SELECT_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - XPDAT\\[18\\]
- GPIO or Key function select"]
        #[inline(always)]
        pub fn pdat18_function_select(&self) -> PDAT18_FUNCTION_SELECT_R {
            PDAT18_FUNCTION_SELECT_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - XPDAT\\[0\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat0_function_select(&mut self) -> PDAT0_FUNCTION_SELECT_W<0> {
            PDAT0_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Bit 1 - XPDAT\\[1\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat1_function_select(&mut self) -> PDAT1_FUNCTION_SELECT_W<1> {
            PDAT1_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Bit 2 - XPDAT\\[2\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat2_function_select(&mut self) -> PDAT2_FUNCTION_SELECT_W<2> {
            PDAT2_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Bit 3 - XPDAT\\[8\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat8_function_select(&mut self) -> PDAT8_FUNCTION_SELECT_W<3> {
            PDAT8_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Bit 4 - XPDAT\\[9\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat9_function_select(&mut self) -> PDAT9_FUNCTION_SELECT_W<4> {
            PDAT9_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Bit 5 - XPDAT\\[16\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat16_function_select(&mut self) -> PDAT16_FUNCTION_SELECT_W<5> {
            PDAT16_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Bit 6 - XPDAT\\[17\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat17_function_select(&mut self) -> PDAT17_FUNCTION_SELECT_W<6> {
            PDAT17_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Bit 7 - XPDAT\\[18\\]
- GPIO or Key function select"]
        #[inline(always)]
        #[must_use]
        pub fn pdat18_function_select(&mut self) -> PDAT18_FUNCTION_SELECT_W<7> {
            PDAT18_FUNCTION_SELECT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PDAT for PIO/Key Function Select Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psfsr](index.html) module"]
    pub struct PSFSR;
    impl crate::RegisterSpec for PSFSR {
        const ADDRESS: u8 = 15u8;
    }
    #[doc = "`read()` method returns [psfsr::R](R) reader structure"]
    impl crate::Readable for PSFSR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [psfsr::W](W) writer structure"]
    impl crate::Writable for PSFSR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PSFSR to value 0"]
    impl crate::Resettable for PSFSR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use mpwctr::MPWCTR;
#[doc = "Main/PIP Window Control Register"]
pub mod mpwctr {
    #[doc = "Register `MPWCTR` reader"]
    pub struct R(crate::R<MPWCTR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MPWCTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MPWCTR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MPWCTR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MPWCTR` writer"]
    pub struct W(crate::W<MPWCTR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MPWCTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MPWCTR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MPWCTR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PANEL_SYNC_SIGNAL_MODE` reader - To Control panel's synchronous signals"]
    pub type PANEL_SYNC_SIGNAL_MODE_R = crate::BitReader<PANEL_SYNC_SIGNAL_MODE_A>;
    #[doc = "To Control panel's synchronous signals\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PANEL_SYNC_SIGNAL_MODE_A {
        #[doc = "0: Sync Mode: Enable XVSYNC, XHSYNC, XDE"]
        SYNC_MODE = 0,
        #[doc = "1: DE Mode: Only XDE enable, XVSYNC &amp; XHSYNC in idle state"]
        DE_MODE = 1,
    }
    impl From<PANEL_SYNC_SIGNAL_MODE_A> for bool {
        #[inline(always)]
        fn from(variant: PANEL_SYNC_SIGNAL_MODE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PANEL_SYNC_SIGNAL_MODE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PANEL_SYNC_SIGNAL_MODE_A {
            match self.bits {
                false => PANEL_SYNC_SIGNAL_MODE_A::SYNC_MODE,
                true => PANEL_SYNC_SIGNAL_MODE_A::DE_MODE,
            }
        }
        #[doc = "Checks if the value of the field is `SYNC_MODE`"]
        #[inline(always)]
        pub fn is_sync_mode(&self) -> bool {
            *self == PANEL_SYNC_SIGNAL_MODE_A::SYNC_MODE
        }
        #[doc = "Checks if the value of the field is `DE_MODE`"]
        #[inline(always)]
        pub fn is_de_mode(&self) -> bool {
            *self == PANEL_SYNC_SIGNAL_MODE_A::DE_MODE
        }
    }
    #[doc = "Field `PANEL_SYNC_SIGNAL_MODE` writer - To Control panel's synchronous signals"]
    pub type PANEL_SYNC_SIGNAL_MODE_W<'a, const O: u8> =
        crate::BitWriter<'a, MPWCTR, PANEL_SYNC_SIGNAL_MODE_A, O>;
    impl<'a, const O: u8> PANEL_SYNC_SIGNAL_MODE_W<'a, O> {
        #[doc = "Sync Mode: Enable XVSYNC, XHSYNC, XDE"]
        #[inline(always)]
        pub fn sync_mode(self) -> &'a mut W {
            self.variant(PANEL_SYNC_SIGNAL_MODE_A::SYNC_MODE)
        }
        #[doc = "DE Mode: Only XDE enable, XVSYNC &amp; XHSYNC in idle state"]
        #[inline(always)]
        pub fn de_mode(self) -> &'a mut W {
            self.variant(PANEL_SYNC_SIGNAL_MODE_A::DE_MODE)
        }
    }
    #[doc = "Field `MAIN_IMAGE_COLOR_DEPTH` reader - Main Image Color Depth Setting"]
    pub type MAIN_IMAGE_COLOR_DEPTH_R = crate::FieldReader<MAIN_IMAGE_COLOR_DEPTH_A>;
    #[doc = "Main Image Color Depth Setting\n\nValue on reset: 1"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum MAIN_IMAGE_COLOR_DEPTH_A {
        #[doc = "0: 8-bpp generic TFT (256 colors)"]
        DEPTH_8BPP = 0,
        #[doc = "1: 16-bpp generic TFT (65K colors)"]
        DEPTH_16BPP = 1,
        #[doc = "2: 24-bpp generic TFT (1.67M colors)"]
        DEPTH_24BPP = 2,
    }
    impl From<MAIN_IMAGE_COLOR_DEPTH_A> for u8 {
        #[inline(always)]
        fn from(variant: MAIN_IMAGE_COLOR_DEPTH_A) -> Self {
            variant as _
        }
    }
    impl MAIN_IMAGE_COLOR_DEPTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> Option<MAIN_IMAGE_COLOR_DEPTH_A> {
            match self.bits {
                0 => Some(MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_8BPP),
                1 => Some(MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_16BPP),
                2 => Some(MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_24BPP),
                _ => None,
            }
        }
        #[doc = "Checks if the value of the field is `DEPTH_8BPP`"]
        #[inline(always)]
        pub fn is_depth_8bpp(&self) -> bool {
            *self == MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_8BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_16BPP`"]
        #[inline(always)]
        pub fn is_depth_16bpp(&self) -> bool {
            *self == MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_16BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_24BPP`"]
        #[inline(always)]
        pub fn is_depth_24bpp(&self) -> bool {
            *self == MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_24BPP
        }
    }
    #[doc = "Field `MAIN_IMAGE_COLOR_DEPTH` writer - Main Image Color Depth Setting"]
    pub type MAIN_IMAGE_COLOR_DEPTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, MPWCTR, u8, MAIN_IMAGE_COLOR_DEPTH_A, 2, O>;
    impl<'a, const O: u8> MAIN_IMAGE_COLOR_DEPTH_W<'a, O> {
        #[doc = "8-bpp generic TFT (256 colors)"]
        #[inline(always)]
        pub fn depth_8bpp(self) -> &'a mut W {
            self.variant(MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_8BPP)
        }
        #[doc = "16-bpp generic TFT (65K colors)"]
        #[inline(always)]
        pub fn depth_16bpp(self) -> &'a mut W {
            self.variant(MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_16BPP)
        }
        #[doc = "24-bpp generic TFT (1.67M colors)"]
        #[inline(always)]
        pub fn depth_24bpp(self) -> &'a mut W {
            self.variant(MAIN_IMAGE_COLOR_DEPTH_A::DEPTH_24BPP)
        }
    }
    #[doc = "Field `PIP_CONFIGURE_SELECTION` reader - Select Configure PIP 1 or 2 Window's parameters"]
    pub type PIP_CONFIGURE_SELECTION_R = crate::BitReader<PIP_CONFIGURE_SELECTION_A>;
    #[doc = "Select Configure PIP 1 or 2 Window's parameters\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PIP_CONFIGURE_SELECTION_A {
        #[doc = "0: Configure PIP 1's parameters"]
        PIP1 = 0,
        #[doc = "1: Configure PIP 2's parameters"]
        PIP2 = 1,
    }
    impl From<PIP_CONFIGURE_SELECTION_A> for bool {
        #[inline(always)]
        fn from(variant: PIP_CONFIGURE_SELECTION_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PIP_CONFIGURE_SELECTION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PIP_CONFIGURE_SELECTION_A {
            match self.bits {
                false => PIP_CONFIGURE_SELECTION_A::PIP1,
                true => PIP_CONFIGURE_SELECTION_A::PIP2,
            }
        }
        #[doc = "Checks if the value of the field is `PIP1`"]
        #[inline(always)]
        pub fn is_pip1(&self) -> bool {
            *self == PIP_CONFIGURE_SELECTION_A::PIP1
        }
        #[doc = "Checks if the value of the field is `PIP2`"]
        #[inline(always)]
        pub fn is_pip2(&self) -> bool {
            *self == PIP_CONFIGURE_SELECTION_A::PIP2
        }
    }
    #[doc = "Field `PIP_CONFIGURE_SELECTION` writer - Select Configure PIP 1 or 2 Window's parameters"]
    pub type PIP_CONFIGURE_SELECTION_W<'a, const O: u8> =
        crate::BitWriter<'a, MPWCTR, PIP_CONFIGURE_SELECTION_A, O>;
    impl<'a, const O: u8> PIP_CONFIGURE_SELECTION_W<'a, O> {
        #[doc = "Configure PIP 1's parameters"]
        #[inline(always)]
        pub fn pip1(self) -> &'a mut W {
            self.variant(PIP_CONFIGURE_SELECTION_A::PIP1)
        }
        #[doc = "Configure PIP 2's parameters"]
        #[inline(always)]
        pub fn pip2(self) -> &'a mut W {
            self.variant(PIP_CONFIGURE_SELECTION_A::PIP2)
        }
    }
    #[doc = "Field `PIP2_WINDOW_ENABLE` reader - PIP 2 window Enable/Disable"]
    pub type PIP2_WINDOW_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PIP2_WINDOW_ENABLE` writer - PIP 2 window Enable/Disable"]
    pub type PIP2_WINDOW_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, MPWCTR, bool, O>;
    #[doc = "Field `PIP1_WINDOW_ENABLE` reader - PIP 1 window Enable/Disable"]
    pub type PIP1_WINDOW_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PIP1_WINDOW_ENABLE` writer - PIP 1 window Enable/Disable"]
    pub type PIP1_WINDOW_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, MPWCTR, bool, O>;
    impl R {
        #[doc = "Bit 0 - To Control panel's synchronous signals"]
        #[inline(always)]
        pub fn panel_sync_signal_mode(&self) -> PANEL_SYNC_SIGNAL_MODE_R {
            PANEL_SYNC_SIGNAL_MODE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bits 2:3 - Main Image Color Depth Setting"]
        #[inline(always)]
        pub fn main_image_color_depth(&self) -> MAIN_IMAGE_COLOR_DEPTH_R {
            MAIN_IMAGE_COLOR_DEPTH_R::new((self.bits >> 2) & 3)
        }
        #[doc = "Bit 4 - Select Configure PIP 1 or 2 Window's parameters"]
        #[inline(always)]
        pub fn pip_configure_selection(&self) -> PIP_CONFIGURE_SELECTION_R {
            PIP_CONFIGURE_SELECTION_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 6 - PIP 2 window Enable/Disable"]
        #[inline(always)]
        pub fn pip2_window_enable(&self) -> PIP2_WINDOW_ENABLE_R {
            PIP2_WINDOW_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - PIP 1 window Enable/Disable"]
        #[inline(always)]
        pub fn pip1_window_enable(&self) -> PIP1_WINDOW_ENABLE_R {
            PIP1_WINDOW_ENABLE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - To Control panel's synchronous signals"]
        #[inline(always)]
        #[must_use]
        pub fn panel_sync_signal_mode(&mut self) -> PANEL_SYNC_SIGNAL_MODE_W<0> {
            PANEL_SYNC_SIGNAL_MODE_W::new(self)
        }
        #[doc = "Bits 2:3 - Main Image Color Depth Setting"]
        #[inline(always)]
        #[must_use]
        pub fn main_image_color_depth(&mut self) -> MAIN_IMAGE_COLOR_DEPTH_W<2> {
            MAIN_IMAGE_COLOR_DEPTH_W::new(self)
        }
        #[doc = "Bit 4 - Select Configure PIP 1 or 2 Window's parameters"]
        #[inline(always)]
        #[must_use]
        pub fn pip_configure_selection(&mut self) -> PIP_CONFIGURE_SELECTION_W<4> {
            PIP_CONFIGURE_SELECTION_W::new(self)
        }
        #[doc = "Bit 6 - PIP 2 window Enable/Disable"]
        #[inline(always)]
        #[must_use]
        pub fn pip2_window_enable(&mut self) -> PIP2_WINDOW_ENABLE_W<6> {
            PIP2_WINDOW_ENABLE_W::new(self)
        }
        #[doc = "Bit 7 - PIP 1 window Enable/Disable"]
        #[inline(always)]
        #[must_use]
        pub fn pip1_window_enable(&mut self) -> PIP1_WINDOW_ENABLE_W<7> {
            PIP1_WINDOW_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main/PIP Window Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mpwctr](index.html) module"]
    pub struct MPWCTR;
    impl crate::RegisterSpec for MPWCTR {
        const ADDRESS: u8 = 16u8;
    }
    #[doc = "`read()` method returns [mpwctr::R](R) reader structure"]
    impl crate::Readable for MPWCTR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mpwctr::W](W) writer structure"]
    impl crate::Writable for MPWCTR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MPWCTR to value 0x04"]
    impl crate::Resettable for MPWCTR {
        const RESET_VALUE: u8 = 0x04;
    }
}
pub use pipcdep::PIPCDEP;
#[doc = "PIP Window Color Depth Setting"]
pub mod pipcdep {
    #[doc = "Register `PIPCDEP` reader"]
    pub struct R(crate::R<PIPCDEP>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PIPCDEP>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PIPCDEP>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PIPCDEP>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PIPCDEP` writer"]
    pub struct W(crate::W<PIPCDEP>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PIPCDEP>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PIPCDEP>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PIPCDEP>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP2_WINDOW_COLOR_DEPTH` reader - PIP 1 window Enable/Disable"]
    pub type PIP2_WINDOW_COLOR_DEPTH_R = crate::FieldReader<PIP2_WINDOW_COLOR_DEPTH_A>;
    #[doc = "PIP 1 window Enable/Disable\n\nValue on reset: 3"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum PIP2_WINDOW_COLOR_DEPTH_A {
        #[doc = "0: 8-bpp generic TFT (256 colors)"]
        DEPTH_8BPP = 0,
        #[doc = "1: 16-bpp generic TFT (65K colors)"]
        DEPTH_16BPP = 1,
        #[doc = "2: 24-bpp generic TFT (1.67M colors)"]
        DEPTH_24BPP = 2,
    }
    impl From<PIP2_WINDOW_COLOR_DEPTH_A> for u8 {
        #[inline(always)]
        fn from(variant: PIP2_WINDOW_COLOR_DEPTH_A) -> Self {
            variant as _
        }
    }
    impl PIP2_WINDOW_COLOR_DEPTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> Option<PIP2_WINDOW_COLOR_DEPTH_A> {
            match self.bits {
                0 => Some(PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_8BPP),
                1 => Some(PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_16BPP),
                2 => Some(PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_24BPP),
                _ => None,
            }
        }
        #[doc = "Checks if the value of the field is `DEPTH_8BPP`"]
        #[inline(always)]
        pub fn is_depth_8bpp(&self) -> bool {
            *self == PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_8BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_16BPP`"]
        #[inline(always)]
        pub fn is_depth_16bpp(&self) -> bool {
            *self == PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_16BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_24BPP`"]
        #[inline(always)]
        pub fn is_depth_24bpp(&self) -> bool {
            *self == PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_24BPP
        }
    }
    #[doc = "Field `PIP2_WINDOW_COLOR_DEPTH` writer - PIP 1 window Enable/Disable"]
    pub type PIP2_WINDOW_COLOR_DEPTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, PIPCDEP, u8, PIP2_WINDOW_COLOR_DEPTH_A, 2, O>;
    impl<'a, const O: u8> PIP2_WINDOW_COLOR_DEPTH_W<'a, O> {
        #[doc = "8-bpp generic TFT (256 colors)"]
        #[inline(always)]
        pub fn depth_8bpp(self) -> &'a mut W {
            self.variant(PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_8BPP)
        }
        #[doc = "16-bpp generic TFT (65K colors)"]
        #[inline(always)]
        pub fn depth_16bpp(self) -> &'a mut W {
            self.variant(PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_16BPP)
        }
        #[doc = "24-bpp generic TFT (1.67M colors)"]
        #[inline(always)]
        pub fn depth_24bpp(self) -> &'a mut W {
            self.variant(PIP2_WINDOW_COLOR_DEPTH_A::DEPTH_24BPP)
        }
    }
    #[doc = "Field `PIP1_WINDOW_COLOR_DEPTH` reader - PIP 1 window Enable/Disable"]
    pub type PIP1_WINDOW_COLOR_DEPTH_R = crate::FieldReader<PIP1_WINDOW_COLOR_DEPTH_A>;
    #[doc = "PIP 1 window Enable/Disable\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum PIP1_WINDOW_COLOR_DEPTH_A {
        #[doc = "0: 8-bpp generic TFT (256 colors)"]
        DEPTH_8BPP = 0,
        #[doc = "1: 16-bpp generic TFT (65K colors)"]
        DEPTH_16BPP = 1,
        #[doc = "2: 24-bpp generic TFT (1.67M colors)"]
        DEPTH_24BPP = 2,
    }
    impl From<PIP1_WINDOW_COLOR_DEPTH_A> for u8 {
        #[inline(always)]
        fn from(variant: PIP1_WINDOW_COLOR_DEPTH_A) -> Self {
            variant as _
        }
    }
    impl PIP1_WINDOW_COLOR_DEPTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> Option<PIP1_WINDOW_COLOR_DEPTH_A> {
            match self.bits {
                0 => Some(PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_8BPP),
                1 => Some(PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_16BPP),
                2 => Some(PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_24BPP),
                _ => None,
            }
        }
        #[doc = "Checks if the value of the field is `DEPTH_8BPP`"]
        #[inline(always)]
        pub fn is_depth_8bpp(&self) -> bool {
            *self == PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_8BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_16BPP`"]
        #[inline(always)]
        pub fn is_depth_16bpp(&self) -> bool {
            *self == PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_16BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_24BPP`"]
        #[inline(always)]
        pub fn is_depth_24bpp(&self) -> bool {
            *self == PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_24BPP
        }
    }
    #[doc = "Field `PIP1_WINDOW_COLOR_DEPTH` writer - PIP 1 window Enable/Disable"]
    pub type PIP1_WINDOW_COLOR_DEPTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, PIPCDEP, u8, PIP1_WINDOW_COLOR_DEPTH_A, 2, O>;
    impl<'a, const O: u8> PIP1_WINDOW_COLOR_DEPTH_W<'a, O> {
        #[doc = "8-bpp generic TFT (256 colors)"]
        #[inline(always)]
        pub fn depth_8bpp(self) -> &'a mut W {
            self.variant(PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_8BPP)
        }
        #[doc = "16-bpp generic TFT (65K colors)"]
        #[inline(always)]
        pub fn depth_16bpp(self) -> &'a mut W {
            self.variant(PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_16BPP)
        }
        #[doc = "24-bpp generic TFT (1.67M colors)"]
        #[inline(always)]
        pub fn depth_24bpp(self) -> &'a mut W {
            self.variant(PIP1_WINDOW_COLOR_DEPTH_A::DEPTH_24BPP)
        }
    }
    impl R {
        #[doc = "Bits 0:1 - PIP 1 window Enable/Disable"]
        #[inline(always)]
        pub fn pip2_window_color_depth(&self) -> PIP2_WINDOW_COLOR_DEPTH_R {
            PIP2_WINDOW_COLOR_DEPTH_R::new(self.bits & 3)
        }
        #[doc = "Bits 2:3 - PIP 1 window Enable/Disable"]
        #[inline(always)]
        pub fn pip1_window_color_depth(&self) -> PIP1_WINDOW_COLOR_DEPTH_R {
            PIP1_WINDOW_COLOR_DEPTH_R::new((self.bits >> 2) & 3)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - PIP 1 window Enable/Disable"]
        #[inline(always)]
        #[must_use]
        pub fn pip2_window_color_depth(&mut self) -> PIP2_WINDOW_COLOR_DEPTH_W<0> {
            PIP2_WINDOW_COLOR_DEPTH_W::new(self)
        }
        #[doc = "Bits 2:3 - PIP 1 window Enable/Disable"]
        #[inline(always)]
        #[must_use]
        pub fn pip1_window_color_depth(&mut self) -> PIP1_WINDOW_COLOR_DEPTH_W<2> {
            PIP1_WINDOW_COLOR_DEPTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP Window Color Depth Setting\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pipcdep](index.html) module"]
    pub struct PIPCDEP;
    impl crate::RegisterSpec for PIPCDEP {
        const ADDRESS: u8 = 17u8;
    }
    #[doc = "`read()` method returns [pipcdep::R](R) reader structure"]
    impl crate::Readable for PIPCDEP {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pipcdep::W](W) writer structure"]
    impl crate::Writable for PIPCDEP {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PIPCDEP to value 0x03"]
    impl crate::Resettable for PIPCDEP {
        const RESET_VALUE: u8 = 0x03;
    }
}
pub use dpcr::DPCR;
#[doc = "Display Configuration Register"]
pub mod dpcr {
    #[doc = "Register `DPCR` reader"]
    pub struct R(crate::R<DPCR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DPCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DPCR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DPCR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DPCR` writer"]
    pub struct W(crate::W<DPCR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DPCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DPCR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DPCR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `OUTPUT_SEQUENCE` reader - Parallel XPDAT\\[23:0\\]
Output Sequence / LVDS Color Serial Data Output Sequence"]
    pub type OUTPUT_SEQUENCE_R = crate::FieldReader<OUTPUT_SEQUENCE_A>;
    #[doc = "Parallel XPDAT\\[23:0\\]
Output Sequence / LVDS Color Serial Data Output Sequence\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum OUTPUT_SEQUENCE_A {
        #[doc = "0: RGB"]
        RGB = 0,
        #[doc = "1: RBG"]
        RBG = 1,
        #[doc = "2: GRB"]
        GRB = 2,
        #[doc = "3: GBR"]
        GBR = 3,
        #[doc = "4: BRG"]
        BRG = 4,
        #[doc = "5: BGR"]
        BGR = 5,
        #[doc = "6: Gray"]
        GRAY = 6,
        #[doc = "7: Send out idle state (all 0 or 1, black or white color)"]
        IDLE = 7,
    }
    impl From<OUTPUT_SEQUENCE_A> for u8 {
        #[inline(always)]
        fn from(variant: OUTPUT_SEQUENCE_A) -> Self {
            variant as _
        }
    }
    impl OUTPUT_SEQUENCE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> OUTPUT_SEQUENCE_A {
            match self.bits {
                0 => OUTPUT_SEQUENCE_A::RGB,
                1 => OUTPUT_SEQUENCE_A::RBG,
                2 => OUTPUT_SEQUENCE_A::GRB,
                3 => OUTPUT_SEQUENCE_A::GBR,
                4 => OUTPUT_SEQUENCE_A::BRG,
                5 => OUTPUT_SEQUENCE_A::BGR,
                6 => OUTPUT_SEQUENCE_A::GRAY,
                7 => OUTPUT_SEQUENCE_A::IDLE,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `RGB`"]
        #[inline(always)]
        pub fn is_rgb(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::RGB
        }
        #[doc = "Checks if the value of the field is `RBG`"]
        #[inline(always)]
        pub fn is_rbg(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::RBG
        }
        #[doc = "Checks if the value of the field is `GRB`"]
        #[inline(always)]
        pub fn is_grb(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::GRB
        }
        #[doc = "Checks if the value of the field is `GBR`"]
        #[inline(always)]
        pub fn is_gbr(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::GBR
        }
        #[doc = "Checks if the value of the field is `BRG`"]
        #[inline(always)]
        pub fn is_brg(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::BRG
        }
        #[doc = "Checks if the value of the field is `BGR`"]
        #[inline(always)]
        pub fn is_bgr(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::BGR
        }
        #[doc = "Checks if the value of the field is `GRAY`"]
        #[inline(always)]
        pub fn is_gray(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::GRAY
        }
        #[doc = "Checks if the value of the field is `IDLE`"]
        #[inline(always)]
        pub fn is_idle(&self) -> bool {
            *self == OUTPUT_SEQUENCE_A::IDLE
        }
    }
    #[doc = "Field `OUTPUT_SEQUENCE` writer - Parallel XPDAT\\[23:0\\]
Output Sequence / LVDS Color Serial Data Output Sequence"]
    pub type OUTPUT_SEQUENCE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, DPCR, u8, OUTPUT_SEQUENCE_A, 3, O>;
    impl<'a, const O: u8> OUTPUT_SEQUENCE_W<'a, O> {
        #[doc = "RGB"]
        #[inline(always)]
        pub fn rgb(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::RGB)
        }
        #[doc = "RBG"]
        #[inline(always)]
        pub fn rbg(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::RBG)
        }
        #[doc = "GRB"]
        #[inline(always)]
        pub fn grb(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::GRB)
        }
        #[doc = "GBR"]
        #[inline(always)]
        pub fn gbr(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::GBR)
        }
        #[doc = "BRG"]
        #[inline(always)]
        pub fn brg(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::BRG)
        }
        #[doc = "BGR"]
        #[inline(always)]
        pub fn bgr(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::BGR)
        }
        #[doc = "Gray"]
        #[inline(always)]
        pub fn gray(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::GRAY)
        }
        #[doc = "Send out idle state (all 0 or 1, black or white color)"]
        #[inline(always)]
        pub fn idle(self) -> &'a mut W {
            self.variant(OUTPUT_SEQUENCE_A::IDLE)
        }
    }
    #[doc = "Field `VDIR` reader - Vertical Scan direction"]
    pub type VDIR_R = crate::BitReader<VDIR_A>;
    #[doc = "Vertical Scan direction\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum VDIR_A {
        #[doc = "0: From Top to Bottom"]
        TOP_TO_BOTTOM = 0,
        #[doc = "1: From Bottom to Top"]
        BOTTOM_TO_TOP = 1,
    }
    impl From<VDIR_A> for bool {
        #[inline(always)]
        fn from(variant: VDIR_A) -> Self {
            variant as u8 != 0
        }
    }
    impl VDIR_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> VDIR_A {
            match self.bits {
                false => VDIR_A::TOP_TO_BOTTOM,
                true => VDIR_A::BOTTOM_TO_TOP,
            }
        }
        #[doc = "Checks if the value of the field is `TOP_TO_BOTTOM`"]
        #[inline(always)]
        pub fn is_top_to_bottom(&self) -> bool {
            *self == VDIR_A::TOP_TO_BOTTOM
        }
        #[doc = "Checks if the value of the field is `BOTTOM_TO_TOP`"]
        #[inline(always)]
        pub fn is_bottom_to_top(&self) -> bool {
            *self == VDIR_A::BOTTOM_TO_TOP
        }
    }
    #[doc = "Field `VDIR` writer - Vertical Scan direction"]
    pub type VDIR_W<'a, const O: u8> = crate::BitWriter<'a, DPCR, VDIR_A, O>;
    impl<'a, const O: u8> VDIR_W<'a, O> {
        #[doc = "From Top to Bottom"]
        #[inline(always)]
        pub fn top_to_bottom(self) -> &'a mut W {
            self.variant(VDIR_A::TOP_TO_BOTTOM)
        }
        #[doc = "From Bottom to Top"]
        #[inline(always)]
        pub fn bottom_to_top(self) -> &'a mut W {
            self.variant(VDIR_A::BOTTOM_TO_TOP)
        }
    }
    #[doc = "Field `DISPLAY_TEST_COLOR_BAR_ENABLE` reader - Display Test Color Bar"]
    pub type DISPLAY_TEST_COLOR_BAR_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `DISPLAY_TEST_COLOR_BAR_ENABLE` writer - Display Test Color Bar"]
    pub type DISPLAY_TEST_COLOR_BAR_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, DPCR, bool, O>;
    #[doc = "Field `DISPLAY_ENABLE` reader - Display ON/OFF"]
    pub type DISPLAY_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `DISPLAY_ENABLE` writer - Display ON/OFF"]
    pub type DISPLAY_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, DPCR, bool, O>;
    #[doc = "Field `PCLK_INVERSION` reader - NA"]
    pub type PCLK_INVERSION_R = crate::BitReader<PCLK_INVERSION_A>;
    #[doc = "NA\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PCLK_INVERSION_A {
        #[doc = "0: Panel fetches XPDAT at XPCLK rising edge"]
        RISING = 0,
        #[doc = "1: Panel fetches XPDAT at XPCLK falling edge"]
        FALLING = 1,
    }
    impl From<PCLK_INVERSION_A> for bool {
        #[inline(always)]
        fn from(variant: PCLK_INVERSION_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PCLK_INVERSION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PCLK_INVERSION_A {
            match self.bits {
                false => PCLK_INVERSION_A::RISING,
                true => PCLK_INVERSION_A::FALLING,
            }
        }
        #[doc = "Checks if the value of the field is `RISING`"]
        #[inline(always)]
        pub fn is_rising(&self) -> bool {
            *self == PCLK_INVERSION_A::RISING
        }
        #[doc = "Checks if the value of the field is `FALLING`"]
        #[inline(always)]
        pub fn is_falling(&self) -> bool {
            *self == PCLK_INVERSION_A::FALLING
        }
    }
    #[doc = "Field `PCLK_INVERSION` writer - NA"]
    pub type PCLK_INVERSION_W<'a, const O: u8> = crate::BitWriter<'a, DPCR, PCLK_INVERSION_A, O>;
    impl<'a, const O: u8> PCLK_INVERSION_W<'a, O> {
        #[doc = "Panel fetches XPDAT at XPCLK rising edge"]
        #[inline(always)]
        pub fn rising(self) -> &'a mut W {
            self.variant(PCLK_INVERSION_A::RISING)
        }
        #[doc = "Panel fetches XPDAT at XPCLK falling edge"]
        #[inline(always)]
        pub fn falling(self) -> &'a mut W {
            self.variant(PCLK_INVERSION_A::FALLING)
        }
    }
    impl R {
        #[doc = "Bits 0:2 - Parallel XPDAT\\[23:0\\]
Output Sequence / LVDS Color Serial Data Output Sequence"]
        #[inline(always)]
        pub fn output_sequence(&self) -> OUTPUT_SEQUENCE_R {
            OUTPUT_SEQUENCE_R::new(self.bits & 7)
        }
        #[doc = "Bit 3 - Vertical Scan direction"]
        #[inline(always)]
        pub fn vdir(&self) -> VDIR_R {
            VDIR_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 5 - Display Test Color Bar"]
        #[inline(always)]
        pub fn display_test_color_bar_enable(&self) -> DISPLAY_TEST_COLOR_BAR_ENABLE_R {
            DISPLAY_TEST_COLOR_BAR_ENABLE_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Display ON/OFF"]
        #[inline(always)]
        pub fn display_enable(&self) -> DISPLAY_ENABLE_R {
            DISPLAY_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - NA"]
        #[inline(always)]
        pub fn pclk_inversion(&self) -> PCLK_INVERSION_R {
            PCLK_INVERSION_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:2 - Parallel XPDAT\\[23:0\\]
Output Sequence / LVDS Color Serial Data Output Sequence"]
        #[inline(always)]
        #[must_use]
        pub fn output_sequence(&mut self) -> OUTPUT_SEQUENCE_W<0> {
            OUTPUT_SEQUENCE_W::new(self)
        }
        #[doc = "Bit 3 - Vertical Scan direction"]
        #[inline(always)]
        #[must_use]
        pub fn vdir(&mut self) -> VDIR_W<3> {
            VDIR_W::new(self)
        }
        #[doc = "Bit 5 - Display Test Color Bar"]
        #[inline(always)]
        #[must_use]
        pub fn display_test_color_bar_enable(&mut self) -> DISPLAY_TEST_COLOR_BAR_ENABLE_W<5> {
            DISPLAY_TEST_COLOR_BAR_ENABLE_W::new(self)
        }
        #[doc = "Bit 6 - Display ON/OFF"]
        #[inline(always)]
        #[must_use]
        pub fn display_enable(&mut self) -> DISPLAY_ENABLE_W<6> {
            DISPLAY_ENABLE_W::new(self)
        }
        #[doc = "Bit 7 - NA"]
        #[inline(always)]
        #[must_use]
        pub fn pclk_inversion(&mut self) -> PCLK_INVERSION_W<7> {
            PCLK_INVERSION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Display Configuration Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dpcr](index.html) module"]
    pub struct DPCR;
    impl crate::RegisterSpec for DPCR {
        const ADDRESS: u8 = 18u8;
    }
    #[doc = "`read()` method returns [dpcr::R](R) reader structure"]
    impl crate::Readable for DPCR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dpcr::W](W) writer structure"]
    impl crate::Writable for DPCR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DPCR to value 0"]
    impl crate::Resettable for DPCR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pcsr::PCSR;
#[doc = "Panel scan Clock and Data Setting Register"]
pub mod pcsr {
    #[doc = "Register `PCSR` reader"]
    pub struct R(crate::R<PCSR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PCSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PCSR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PCSR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PCSR` writer"]
    pub struct W(crate::W<PCSR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PCSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PCSR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PCSR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `VSYNC_IDLE_STATE` reader - VSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type VSYNC_IDLE_STATE_R = crate::BitReader<VSYNC_IDLE_STATE_A>;
    #[doc = "VSYNC IDLE STATE (in power saving mode or DISPLAY OFF)\n\nValue on reset: 1"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum VSYNC_IDLE_STATE_A {
        #[doc = "0: Pin VSYNC output is low"]
        OUTPUT_LOW = 0,
        #[doc = "1: Pin VSYNC output is high"]
        OUTPUT_HIGH = 1,
    }
    impl From<VSYNC_IDLE_STATE_A> for bool {
        #[inline(always)]
        fn from(variant: VSYNC_IDLE_STATE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl VSYNC_IDLE_STATE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> VSYNC_IDLE_STATE_A {
            match self.bits {
                false => VSYNC_IDLE_STATE_A::OUTPUT_LOW,
                true => VSYNC_IDLE_STATE_A::OUTPUT_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT_LOW`"]
        #[inline(always)]
        pub fn is_output_low(&self) -> bool {
            *self == VSYNC_IDLE_STATE_A::OUTPUT_LOW
        }
        #[doc = "Checks if the value of the field is `OUTPUT_HIGH`"]
        #[inline(always)]
        pub fn is_output_high(&self) -> bool {
            *self == VSYNC_IDLE_STATE_A::OUTPUT_HIGH
        }
    }
    #[doc = "Field `VSYNC_IDLE_STATE` writer - VSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type VSYNC_IDLE_STATE_W<'a, const O: u8> =
        crate::BitWriter<'a, PCSR, VSYNC_IDLE_STATE_A, O>;
    impl<'a, const O: u8> VSYNC_IDLE_STATE_W<'a, O> {
        #[doc = "Pin VSYNC output is low"]
        #[inline(always)]
        pub fn output_low(self) -> &'a mut W {
            self.variant(VSYNC_IDLE_STATE_A::OUTPUT_LOW)
        }
        #[doc = "Pin VSYNC output is high"]
        #[inline(always)]
        pub fn output_high(self) -> &'a mut W {
            self.variant(VSYNC_IDLE_STATE_A::OUTPUT_HIGH)
        }
    }
    #[doc = "Field `HSYNC_IDLE_STATE` reader - HSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type HSYNC_IDLE_STATE_R = crate::BitReader<HSYNC_IDLE_STATE_A>;
    #[doc = "HSYNC IDLE STATE (in power saving mode or DISPLAY OFF)\n\nValue on reset: 1"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum HSYNC_IDLE_STATE_A {
        #[doc = "0: Pin HSYNC output is low"]
        OUTPUT_LOW = 0,
        #[doc = "1: Pin HSYNC output is high"]
        OUTPUT_HIGH = 1,
    }
    impl From<HSYNC_IDLE_STATE_A> for bool {
        #[inline(always)]
        fn from(variant: HSYNC_IDLE_STATE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl HSYNC_IDLE_STATE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> HSYNC_IDLE_STATE_A {
            match self.bits {
                false => HSYNC_IDLE_STATE_A::OUTPUT_LOW,
                true => HSYNC_IDLE_STATE_A::OUTPUT_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT_LOW`"]
        #[inline(always)]
        pub fn is_output_low(&self) -> bool {
            *self == HSYNC_IDLE_STATE_A::OUTPUT_LOW
        }
        #[doc = "Checks if the value of the field is `OUTPUT_HIGH`"]
        #[inline(always)]
        pub fn is_output_high(&self) -> bool {
            *self == HSYNC_IDLE_STATE_A::OUTPUT_HIGH
        }
    }
    #[doc = "Field `HSYNC_IDLE_STATE` writer - HSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type HSYNC_IDLE_STATE_W<'a, const O: u8> =
        crate::BitWriter<'a, PCSR, HSYNC_IDLE_STATE_A, O>;
    impl<'a, const O: u8> HSYNC_IDLE_STATE_W<'a, O> {
        #[doc = "Pin HSYNC output is low"]
        #[inline(always)]
        pub fn output_low(self) -> &'a mut W {
            self.variant(HSYNC_IDLE_STATE_A::OUTPUT_LOW)
        }
        #[doc = "Pin HSYNC output is high"]
        #[inline(always)]
        pub fn output_high(self) -> &'a mut W {
            self.variant(HSYNC_IDLE_STATE_A::OUTPUT_HIGH)
        }
    }
    #[doc = "Field `PDAT_IDLE_STATE` reader - PDAT IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type PDAT_IDLE_STATE_R = crate::BitReader<PDAT_IDLE_STATE_A>;
    #[doc = "PDAT IDLE STATE (in power saving mode or DISPLAY OFF)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PDAT_IDLE_STATE_A {
        #[doc = "0: Pin PDAT output is low"]
        OUTPUT_LOW = 0,
        #[doc = "1: Pin PDAT output is high"]
        OUTPUT_HIGH = 1,
    }
    impl From<PDAT_IDLE_STATE_A> for bool {
        #[inline(always)]
        fn from(variant: PDAT_IDLE_STATE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PDAT_IDLE_STATE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PDAT_IDLE_STATE_A {
            match self.bits {
                false => PDAT_IDLE_STATE_A::OUTPUT_LOW,
                true => PDAT_IDLE_STATE_A::OUTPUT_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT_LOW`"]
        #[inline(always)]
        pub fn is_output_low(&self) -> bool {
            *self == PDAT_IDLE_STATE_A::OUTPUT_LOW
        }
        #[doc = "Checks if the value of the field is `OUTPUT_HIGH`"]
        #[inline(always)]
        pub fn is_output_high(&self) -> bool {
            *self == PDAT_IDLE_STATE_A::OUTPUT_HIGH
        }
    }
    #[doc = "Field `PDAT_IDLE_STATE` writer - PDAT IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type PDAT_IDLE_STATE_W<'a, const O: u8> = crate::BitWriter<'a, PCSR, PDAT_IDLE_STATE_A, O>;
    impl<'a, const O: u8> PDAT_IDLE_STATE_W<'a, O> {
        #[doc = "Pin PDAT output is low"]
        #[inline(always)]
        pub fn output_low(self) -> &'a mut W {
            self.variant(PDAT_IDLE_STATE_A::OUTPUT_LOW)
        }
        #[doc = "Pin PDAT output is high"]
        #[inline(always)]
        pub fn output_high(self) -> &'a mut W {
            self.variant(PDAT_IDLE_STATE_A::OUTPUT_HIGH)
        }
    }
    #[doc = "Field `PCLK_IDLE_STATE` reader - PCLK IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type PCLK_IDLE_STATE_R = crate::BitReader<PCLK_IDLE_STATE_A>;
    #[doc = "PCLK IDLE STATE (in power saving mode or DISPLAY OFF)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PCLK_IDLE_STATE_A {
        #[doc = "0: Pin PCLK output is low"]
        OUTPUT_LOW = 0,
        #[doc = "1: Pin PCLK output is high"]
        OUTPUT_HIGH = 1,
    }
    impl From<PCLK_IDLE_STATE_A> for bool {
        #[inline(always)]
        fn from(variant: PCLK_IDLE_STATE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PCLK_IDLE_STATE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PCLK_IDLE_STATE_A {
            match self.bits {
                false => PCLK_IDLE_STATE_A::OUTPUT_LOW,
                true => PCLK_IDLE_STATE_A::OUTPUT_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT_LOW`"]
        #[inline(always)]
        pub fn is_output_low(&self) -> bool {
            *self == PCLK_IDLE_STATE_A::OUTPUT_LOW
        }
        #[doc = "Checks if the value of the field is `OUTPUT_HIGH`"]
        #[inline(always)]
        pub fn is_output_high(&self) -> bool {
            *self == PCLK_IDLE_STATE_A::OUTPUT_HIGH
        }
    }
    #[doc = "Field `PCLK_IDLE_STATE` writer - PCLK IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type PCLK_IDLE_STATE_W<'a, const O: u8> = crate::BitWriter<'a, PCSR, PCLK_IDLE_STATE_A, O>;
    impl<'a, const O: u8> PCLK_IDLE_STATE_W<'a, O> {
        #[doc = "Pin PCLK output is low"]
        #[inline(always)]
        pub fn output_low(self) -> &'a mut W {
            self.variant(PCLK_IDLE_STATE_A::OUTPUT_LOW)
        }
        #[doc = "Pin PCLK output is high"]
        #[inline(always)]
        pub fn output_high(self) -> &'a mut W {
            self.variant(PCLK_IDLE_STATE_A::OUTPUT_HIGH)
        }
    }
    #[doc = "Field `DE_IDLE_STATE` reader - DE IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type DE_IDLE_STATE_R = crate::BitReader<DE_IDLE_STATE_A>;
    #[doc = "DE IDLE STATE (in power saving mode or DISPLAY OFF)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum DE_IDLE_STATE_A {
        #[doc = "0: Pin DE output is low"]
        OUTPUT_LOW = 0,
        #[doc = "1: Pin DE output is high"]
        OUTPUT_HIGH = 1,
    }
    impl From<DE_IDLE_STATE_A> for bool {
        #[inline(always)]
        fn from(variant: DE_IDLE_STATE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl DE_IDLE_STATE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> DE_IDLE_STATE_A {
            match self.bits {
                false => DE_IDLE_STATE_A::OUTPUT_LOW,
                true => DE_IDLE_STATE_A::OUTPUT_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT_LOW`"]
        #[inline(always)]
        pub fn is_output_low(&self) -> bool {
            *self == DE_IDLE_STATE_A::OUTPUT_LOW
        }
        #[doc = "Checks if the value of the field is `OUTPUT_HIGH`"]
        #[inline(always)]
        pub fn is_output_high(&self) -> bool {
            *self == DE_IDLE_STATE_A::OUTPUT_HIGH
        }
    }
    #[doc = "Field `DE_IDLE_STATE` writer - DE IDLE STATE (in power saving mode or DISPLAY OFF)"]
    pub type DE_IDLE_STATE_W<'a, const O: u8> = crate::BitWriter<'a, PCSR, DE_IDLE_STATE_A, O>;
    impl<'a, const O: u8> DE_IDLE_STATE_W<'a, O> {
        #[doc = "Pin DE output is low"]
        #[inline(always)]
        pub fn output_low(self) -> &'a mut W {
            self.variant(DE_IDLE_STATE_A::OUTPUT_LOW)
        }
        #[doc = "Pin DE output is high"]
        #[inline(always)]
        pub fn output_high(self) -> &'a mut W {
            self.variant(DE_IDLE_STATE_A::OUTPUT_HIGH)
        }
    }
    #[doc = "Field `DE_POLARITY` reader - DE Polarity"]
    pub type DE_POLARITY_R = crate::BitReader<DE_POLARITY_A>;
    #[doc = "DE Polarity\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum DE_POLARITY_A {
        #[doc = "0: Active-low"]
        ACTIVE_LOW = 0,
        #[doc = "1: Active-high"]
        ACTIVE_HIGH = 1,
    }
    impl From<DE_POLARITY_A> for bool {
        #[inline(always)]
        fn from(variant: DE_POLARITY_A) -> Self {
            variant as u8 != 0
        }
    }
    impl DE_POLARITY_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> DE_POLARITY_A {
            match self.bits {
                false => DE_POLARITY_A::ACTIVE_LOW,
                true => DE_POLARITY_A::ACTIVE_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `ACTIVE_LOW`"]
        #[inline(always)]
        pub fn is_active_low(&self) -> bool {
            *self == DE_POLARITY_A::ACTIVE_LOW
        }
        #[doc = "Checks if the value of the field is `ACTIVE_HIGH`"]
        #[inline(always)]
        pub fn is_active_high(&self) -> bool {
            *self == DE_POLARITY_A::ACTIVE_HIGH
        }
    }
    #[doc = "Field `DE_POLARITY` writer - DE Polarity"]
    pub type DE_POLARITY_W<'a, const O: u8> = crate::BitWriter<'a, PCSR, DE_POLARITY_A, O>;
    impl<'a, const O: u8> DE_POLARITY_W<'a, O> {
        #[doc = "Active-low"]
        #[inline(always)]
        pub fn active_low(self) -> &'a mut W {
            self.variant(DE_POLARITY_A::ACTIVE_LOW)
        }
        #[doc = "Active-high"]
        #[inline(always)]
        pub fn active_high(self) -> &'a mut W {
            self.variant(DE_POLARITY_A::ACTIVE_HIGH)
        }
    }
    #[doc = "Field `VSYNC_POLARITY` reader - VSYNC Polarity"]
    pub type VSYNC_POLARITY_R = crate::BitReader<VSYNC_POLARITY_A>;
    #[doc = "VSYNC Polarity\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum VSYNC_POLARITY_A {
        #[doc = "0: Active-low"]
        ACTIVE_LOW = 0,
        #[doc = "1: Active-high"]
        ACTIVE_HIGH = 1,
    }
    impl From<VSYNC_POLARITY_A> for bool {
        #[inline(always)]
        fn from(variant: VSYNC_POLARITY_A) -> Self {
            variant as u8 != 0
        }
    }
    impl VSYNC_POLARITY_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> VSYNC_POLARITY_A {
            match self.bits {
                false => VSYNC_POLARITY_A::ACTIVE_LOW,
                true => VSYNC_POLARITY_A::ACTIVE_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `ACTIVE_LOW`"]
        #[inline(always)]
        pub fn is_active_low(&self) -> bool {
            *self == VSYNC_POLARITY_A::ACTIVE_LOW
        }
        #[doc = "Checks if the value of the field is `ACTIVE_HIGH`"]
        #[inline(always)]
        pub fn is_active_high(&self) -> bool {
            *self == VSYNC_POLARITY_A::ACTIVE_HIGH
        }
    }
    #[doc = "Field `VSYNC_POLARITY` writer - VSYNC Polarity"]
    pub type VSYNC_POLARITY_W<'a, const O: u8> = crate::BitWriter<'a, PCSR, VSYNC_POLARITY_A, O>;
    impl<'a, const O: u8> VSYNC_POLARITY_W<'a, O> {
        #[doc = "Active-low"]
        #[inline(always)]
        pub fn active_low(self) -> &'a mut W {
            self.variant(VSYNC_POLARITY_A::ACTIVE_LOW)
        }
        #[doc = "Active-high"]
        #[inline(always)]
        pub fn active_high(self) -> &'a mut W {
            self.variant(VSYNC_POLARITY_A::ACTIVE_HIGH)
        }
    }
    #[doc = "Field `HSYNC_POLARITY` reader - HSYNC Polarity"]
    pub type HSYNC_POLARITY_R = crate::BitReader<HSYNC_POLARITY_A>;
    #[doc = "HSYNC Polarity\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum HSYNC_POLARITY_A {
        #[doc = "0: Active-low"]
        ACTIVE_LOW = 0,
        #[doc = "1: Active-high"]
        ACTIVE_HIGH = 1,
    }
    impl From<HSYNC_POLARITY_A> for bool {
        #[inline(always)]
        fn from(variant: HSYNC_POLARITY_A) -> Self {
            variant as u8 != 0
        }
    }
    impl HSYNC_POLARITY_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> HSYNC_POLARITY_A {
            match self.bits {
                false => HSYNC_POLARITY_A::ACTIVE_LOW,
                true => HSYNC_POLARITY_A::ACTIVE_HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `ACTIVE_LOW`"]
        #[inline(always)]
        pub fn is_active_low(&self) -> bool {
            *self == HSYNC_POLARITY_A::ACTIVE_LOW
        }
        #[doc = "Checks if the value of the field is `ACTIVE_HIGH`"]
        #[inline(always)]
        pub fn is_active_high(&self) -> bool {
            *self == HSYNC_POLARITY_A::ACTIVE_HIGH
        }
    }
    #[doc = "Field `HSYNC_POLARITY` writer - HSYNC Polarity"]
    pub type HSYNC_POLARITY_W<'a, const O: u8> = crate::BitWriter<'a, PCSR, HSYNC_POLARITY_A, O>;
    impl<'a, const O: u8> HSYNC_POLARITY_W<'a, O> {
        #[doc = "Active-low"]
        #[inline(always)]
        pub fn active_low(self) -> &'a mut W {
            self.variant(HSYNC_POLARITY_A::ACTIVE_LOW)
        }
        #[doc = "Active-high"]
        #[inline(always)]
        pub fn active_high(self) -> &'a mut W {
            self.variant(HSYNC_POLARITY_A::ACTIVE_HIGH)
        }
    }
    impl R {
        #[doc = "Bit 0 - VSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        pub fn vsync_idle_state(&self) -> VSYNC_IDLE_STATE_R {
            VSYNC_IDLE_STATE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - HSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        pub fn hsync_idle_state(&self) -> HSYNC_IDLE_STATE_R {
            HSYNC_IDLE_STATE_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - PDAT IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        pub fn pdat_idle_state(&self) -> PDAT_IDLE_STATE_R {
            PDAT_IDLE_STATE_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - PCLK IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        pub fn pclk_idle_state(&self) -> PCLK_IDLE_STATE_R {
            PCLK_IDLE_STATE_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - DE IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        pub fn de_idle_state(&self) -> DE_IDLE_STATE_R {
            DE_IDLE_STATE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - DE Polarity"]
        #[inline(always)]
        pub fn de_polarity(&self) -> DE_POLARITY_R {
            DE_POLARITY_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - VSYNC Polarity"]
        #[inline(always)]
        pub fn vsync_polarity(&self) -> VSYNC_POLARITY_R {
            VSYNC_POLARITY_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - HSYNC Polarity"]
        #[inline(always)]
        pub fn hsync_polarity(&self) -> HSYNC_POLARITY_R {
            HSYNC_POLARITY_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - VSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        #[must_use]
        pub fn vsync_idle_state(&mut self) -> VSYNC_IDLE_STATE_W<0> {
            VSYNC_IDLE_STATE_W::new(self)
        }
        #[doc = "Bit 1 - HSYNC IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        #[must_use]
        pub fn hsync_idle_state(&mut self) -> HSYNC_IDLE_STATE_W<1> {
            HSYNC_IDLE_STATE_W::new(self)
        }
        #[doc = "Bit 2 - PDAT IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        #[must_use]
        pub fn pdat_idle_state(&mut self) -> PDAT_IDLE_STATE_W<2> {
            PDAT_IDLE_STATE_W::new(self)
        }
        #[doc = "Bit 3 - PCLK IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        #[must_use]
        pub fn pclk_idle_state(&mut self) -> PCLK_IDLE_STATE_W<3> {
            PCLK_IDLE_STATE_W::new(self)
        }
        #[doc = "Bit 4 - DE IDLE STATE (in power saving mode or DISPLAY OFF)"]
        #[inline(always)]
        #[must_use]
        pub fn de_idle_state(&mut self) -> DE_IDLE_STATE_W<4> {
            DE_IDLE_STATE_W::new(self)
        }
        #[doc = "Bit 5 - DE Polarity"]
        #[inline(always)]
        #[must_use]
        pub fn de_polarity(&mut self) -> DE_POLARITY_W<5> {
            DE_POLARITY_W::new(self)
        }
        #[doc = "Bit 6 - VSYNC Polarity"]
        #[inline(always)]
        #[must_use]
        pub fn vsync_polarity(&mut self) -> VSYNC_POLARITY_W<6> {
            VSYNC_POLARITY_W::new(self)
        }
        #[doc = "Bit 7 - HSYNC Polarity"]
        #[inline(always)]
        #[must_use]
        pub fn hsync_polarity(&mut self) -> HSYNC_POLARITY_W<7> {
            HSYNC_POLARITY_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Panel scan Clock and Data Setting Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcsr](index.html) module"]
    pub struct PCSR;
    impl crate::RegisterSpec for PCSR {
        const ADDRESS: u8 = 19u8;
    }
    #[doc = "`read()` method returns [pcsr::R](R) reader structure"]
    impl crate::Readable for PCSR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pcsr::W](W) writer structure"]
    impl crate::Writable for PCSR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PCSR to value 0x03"]
    impl crate::Resettable for PCSR {
        const RESET_VALUE: u8 = 0x03;
    }
}
pub use hdwr::HDWR;
#[doc = "Horizontal Display Width Register"]
pub mod hdwr {
    #[doc = "Register `HDWR` reader"]
    pub struct R(crate::R<HDWR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<HDWR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<HDWR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<HDWR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `HDWR` writer"]
    pub struct W(crate::W<HDWR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<HDWR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<HDWR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<HDWR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HORIZONTAL_DISPLAY_WIDTH` reader - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
    pub type HORIZONTAL_DISPLAY_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `HORIZONTAL_DISPLAY_WIDTH` writer - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
    pub type HORIZONTAL_DISPLAY_WIDTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, HDWR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
        #[inline(always)]
        pub fn horizontal_display_width(&self) -> HORIZONTAL_DISPLAY_WIDTH_R {
            HORIZONTAL_DISPLAY_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
        #[inline(always)]
        #[must_use]
        pub fn horizontal_display_width(&mut self) -> HORIZONTAL_DISPLAY_WIDTH_W<0> {
            HORIZONTAL_DISPLAY_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Horizontal Display Width Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hdwr](index.html) module"]
    pub struct HDWR;
    impl crate::RegisterSpec for HDWR {
        const ADDRESS: u8 = 20u8;
    }
    #[doc = "`read()` method returns [hdwr::R](R) reader structure"]
    impl crate::Readable for HDWR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [hdwr::W](W) writer structure"]
    impl crate::Writable for HDWR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets HDWR to value 0x4f"]
    impl crate::Resettable for HDWR {
        const RESET_VALUE: u8 = 0x4f;
    }
}
pub use hdwftr::HDWFTR;
#[doc = "Horizontal Display Width Fine Tune Register"]
pub mod hdwftr {
    #[doc = "Register `HDWFTR` reader"]
    pub struct R(crate::R<HDWFTR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<HDWFTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<HDWFTR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<HDWFTR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `HDWFTR` writer"]
    pub struct W(crate::W<HDWFTR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<HDWFTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<HDWFTR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<HDWFTR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING` reader - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
    pub type HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING_R = crate::FieldReader<u8>;
    #[doc = "Field `HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING` writer - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
    pub type HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING_W<'a, const O: u8> =
        crate::FieldWriter<'a, HDWFTR, u8, u8, 4, O>;
    impl R {
        #[doc = "Bits 0:3 - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
        #[inline(always)]
        pub fn horizontal_display_width_fine_tuning(
            &self,
        ) -> HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING_R {
            HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING_R::new(self.bits & 0x0f)
        }
    }
    impl W {
        #[doc = "Bits 0:3 - Horizontal Display Width (pixels) = (HDWR + 1) * 8 + HDWFTR"]
        #[inline(always)]
        #[must_use]
        pub fn horizontal_display_width_fine_tuning(
            &mut self,
        ) -> HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING_W<0> {
            HORIZONTAL_DISPLAY_WIDTH_FINE_TUNING_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Horizontal Display Width Fine Tune Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hdwftr](index.html) module"]
    pub struct HDWFTR;
    impl crate::RegisterSpec for HDWFTR {
        const ADDRESS: u8 = 21u8;
    }
    #[doc = "`read()` method returns [hdwftr::R](R) reader structure"]
    impl crate::Readable for HDWFTR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [hdwftr::W](W) writer structure"]
    impl crate::Writable for HDWFTR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets HDWFTR to value 0"]
    impl crate::Resettable for HDWFTR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use hndr::HNDR;
#[doc = "Horizontal Non-Display Period Register"]
pub mod hndr {
    #[doc = "Register `HNDR` reader"]
    pub struct R(crate::R<HNDR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<HNDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<HNDR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<HNDR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `HNDR` writer"]
    pub struct W(crate::W<HNDR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<HNDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<HNDR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<HNDR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HORIZONTAL_NON_DISPLAY_PERIOD` reader - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
    pub type HORIZONTAL_NON_DISPLAY_PERIOD_R = crate::FieldReader<u8>;
    #[doc = "Field `HORIZONTAL_NON_DISPLAY_PERIOD` writer - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
    pub type HORIZONTAL_NON_DISPLAY_PERIOD_W<'a, const O: u8> =
        crate::FieldWriter<'a, HNDR, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
        #[inline(always)]
        pub fn horizontal_non_display_period(&self) -> HORIZONTAL_NON_DISPLAY_PERIOD_R {
            HORIZONTAL_NON_DISPLAY_PERIOD_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
        #[inline(always)]
        #[must_use]
        pub fn horizontal_non_display_period(&mut self) -> HORIZONTAL_NON_DISPLAY_PERIOD_W<0> {
            HORIZONTAL_NON_DISPLAY_PERIOD_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Horizontal Non-Display Period Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hndr](index.html) module"]
    pub struct HNDR;
    impl crate::RegisterSpec for HNDR {
        const ADDRESS: u8 = 22u8;
    }
    #[doc = "`read()` method returns [hndr::R](R) reader structure"]
    impl crate::Readable for HNDR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [hndr::W](W) writer structure"]
    impl crate::Writable for HNDR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets HNDR to value 0x03"]
    impl crate::Resettable for HNDR {
        const RESET_VALUE: u8 = 0x03;
    }
}
pub use hndftr::HNDFTR;
#[doc = "Horizontal Non-Display Period Fine Tune Register"]
pub mod hndftr {
    #[doc = "Register `HNDFTR` reader"]
    pub struct R(crate::R<HNDFTR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<HNDFTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<HNDFTR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<HNDFTR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `HNDFTR` writer"]
    pub struct W(crate::W<HNDFTR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<HNDFTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<HNDFTR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<HNDFTR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING` reader - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
    pub type HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING_R = crate::FieldReader<u8>;
    #[doc = "Field `HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING` writer - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
    pub type HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING_W<'a, const O: u8> =
        crate::FieldWriter<'a, HNDFTR, u8, u8, 4, O>;
    impl R {
        #[doc = "Bits 0:3 - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
        #[inline(always)]
        pub fn horizontal_non_display_period_fine_tuning(
            &self,
        ) -> HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING_R {
            HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING_R::new(self.bits & 0x0f)
        }
    }
    impl W {
        #[doc = "Bits 0:3 - Horizontal non-display period or Back porch (pixels) = (HNDR + 1) * 8 + HNDFTR"]
        #[inline(always)]
        #[must_use]
        pub fn horizontal_non_display_period_fine_tuning(
            &mut self,
        ) -> HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING_W<0> {
            HORIZONTAL_NON_DISPLAY_PERIOD_FINE_TUNING_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Horizontal Non-Display Period Fine Tune Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hndftr](index.html) module"]
    pub struct HNDFTR;
    impl crate::RegisterSpec for HNDFTR {
        const ADDRESS: u8 = 23u8;
    }
    #[doc = "`read()` method returns [hndftr::R](R) reader structure"]
    impl crate::Readable for HNDFTR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [hndftr::W](W) writer structure"]
    impl crate::Writable for HNDFTR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets HNDFTR to value 0x06"]
    impl crate::Resettable for HNDFTR {
        const RESET_VALUE: u8 = 0x06;
    }
}
pub use hstr::HSTR;
#[doc = "HSYNC Start Position Register"]
pub mod hstr {
    #[doc = "Register `HSTR` reader"]
    pub struct R(crate::R<HSTR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<HSTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<HSTR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<HSTR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `HSTR` writer"]
    pub struct W(crate::W<HSTR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<HSTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<HSTR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<HSTR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HSYNC_START_POSITION` reader - The starting position from the end of display area to the beginning of HSYNC. HSYNC Start Position or Front porch (pixels) = (HSTR + 1) * 8"]
    pub type HSYNC_START_POSITION_R = crate::FieldReader<u8>;
    #[doc = "Field `HSYNC_START_POSITION` writer - The starting position from the end of display area to the beginning of HSYNC. HSYNC Start Position or Front porch (pixels) = (HSTR + 1) * 8"]
    pub type HSYNC_START_POSITION_W<'a, const O: u8> = crate::FieldWriter<'a, HSTR, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - The starting position from the end of display area to the beginning of HSYNC. HSYNC Start Position or Front porch (pixels) = (HSTR + 1) * 8"]
        #[inline(always)]
        pub fn hsync_start_position(&self) -> HSYNC_START_POSITION_R {
            HSYNC_START_POSITION_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - The starting position from the end of display area to the beginning of HSYNC. HSYNC Start Position or Front porch (pixels) = (HSTR + 1) * 8"]
        #[inline(always)]
        #[must_use]
        pub fn hsync_start_position(&mut self) -> HSYNC_START_POSITION_W<0> {
            HSYNC_START_POSITION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "HSYNC Start Position Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hstr](index.html) module"]
    pub struct HSTR;
    impl crate::RegisterSpec for HSTR {
        const ADDRESS: u8 = 24u8;
    }
    #[doc = "`read()` method returns [hstr::R](R) reader structure"]
    impl crate::Readable for HSTR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [hstr::W](W) writer structure"]
    impl crate::Writable for HSTR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets HSTR to value 0x1f"]
    impl crate::Resettable for HSTR {
        const RESET_VALUE: u8 = 0x1f;
    }
}
pub use hpwr::HPWR;
#[doc = "HSYNC Pulse Width Register"]
pub mod hpwr {
    #[doc = "Register `HPWR` reader"]
    pub struct R(crate::R<HPWR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<HPWR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<HPWR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<HPWR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `HPWR` writer"]
    pub struct W(crate::W<HPWR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<HPWR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<HPWR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<HPWR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `HSYNC_PULSE_WIDTH` reader - HSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
    pub type HSYNC_PULSE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `HSYNC_PULSE_WIDTH` writer - HSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
    pub type HSYNC_PULSE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, HPWR, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - HSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
        #[inline(always)]
        pub fn hsync_pulse_width(&self) -> HSYNC_PULSE_WIDTH_R {
            HSYNC_PULSE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - HSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
        #[inline(always)]
        #[must_use]
        pub fn hsync_pulse_width(&mut self) -> HSYNC_PULSE_WIDTH_W<0> {
            HSYNC_PULSE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "HSYNC Pulse Width Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hpwr](index.html) module"]
    pub struct HPWR;
    impl crate::RegisterSpec for HPWR {
        const ADDRESS: u8 = 25u8;
    }
    #[doc = "`read()` method returns [hpwr::R](R) reader structure"]
    impl crate::Readable for HPWR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [hpwr::W](W) writer structure"]
    impl crate::Writable for HPWR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets HPWR to value 0"]
    impl crate::Resettable for HPWR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use vdhr0::VDHR0;
#[doc = "Vertical Display Height Register 0"]
pub mod vdhr0 {
    #[doc = "Register `VDHR0` reader"]
    pub struct R(crate::R<VDHR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<VDHR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<VDHR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<VDHR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `VDHR0` writer"]
    pub struct W(crate::W<VDHR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<VDHR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<VDHR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<VDHR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` reader - Vertical Display Height (Line) = VDHR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` writer - Vertical Display Height (Line) = VDHR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_W<'a, const O: u8> =
        crate::FieldWriter<'a, VDHR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Vertical Display Height (Line) = VDHR + 1"]
        #[inline(always)]
        pub fn vertical_display_height(&self) -> VERTICAL_DISPLAY_HEIGHT_R {
            VERTICAL_DISPLAY_HEIGHT_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Vertical Display Height (Line) = VDHR + 1"]
        #[inline(always)]
        #[must_use]
        pub fn vertical_display_height(&mut self) -> VERTICAL_DISPLAY_HEIGHT_W<0> {
            VERTICAL_DISPLAY_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Vertical Display Height Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vdhr0](index.html) module"]
    pub struct VDHR0;
    impl crate::RegisterSpec for VDHR0 {
        const ADDRESS: u8 = 26u8;
    }
    #[doc = "`read()` method returns [vdhr0::R](R) reader structure"]
    impl crate::Readable for VDHR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [vdhr0::W](W) writer structure"]
    impl crate::Writable for VDHR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets VDHR0 to value 0xdf"]
    impl crate::Resettable for VDHR0 {
        const RESET_VALUE: u8 = 0xdf;
    }
}
pub use vdhr1::VDHR1;
#[doc = "Vertical Display Height Register 1"]
pub mod vdhr1 {
    #[doc = "Register `VDHR1` reader"]
    pub struct R(crate::R<VDHR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<VDHR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<VDHR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<VDHR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `VDHR1` writer"]
    pub struct W(crate::W<VDHR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<VDHR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<VDHR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<VDHR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` reader - Vertical Display Height (Line) = VDHR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` writer - Vertical Display Height (Line) = VDHR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_W<'a, const O: u8> =
        crate::FieldWriter<'a, VDHR1, u8, u8, 3, O>;
    impl R {
        #[doc = "Bits 0:2 - Vertical Display Height (Line) = VDHR + 1"]
        #[inline(always)]
        pub fn vertical_display_height(&self) -> VERTICAL_DISPLAY_HEIGHT_R {
            VERTICAL_DISPLAY_HEIGHT_R::new(self.bits & 7)
        }
    }
    impl W {
        #[doc = "Bits 0:2 - Vertical Display Height (Line) = VDHR + 1"]
        #[inline(always)]
        #[must_use]
        pub fn vertical_display_height(&mut self) -> VERTICAL_DISPLAY_HEIGHT_W<0> {
            VERTICAL_DISPLAY_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Vertical Display Height Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vdhr1](index.html) module"]
    pub struct VDHR1;
    impl crate::RegisterSpec for VDHR1 {
        const ADDRESS: u8 = 27u8;
    }
    #[doc = "`read()` method returns [vdhr1::R](R) reader structure"]
    impl crate::Readable for VDHR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [vdhr1::W](W) writer structure"]
    impl crate::Writable for VDHR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets VDHR1 to value 0x01"]
    impl crate::Resettable for VDHR1 {
        const RESET_VALUE: u8 = 0x01;
    }
}
pub use vndr0::VNDR0;
#[doc = "Vertical Non-Display Period Register 0"]
pub mod vndr0 {
    #[doc = "Register `VNDR0` reader"]
    pub struct R(crate::R<VNDR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<VNDR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<VNDR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<VNDR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `VNDR0` writer"]
    pub struct W(crate::W<VNDR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<VNDR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<VNDR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<VNDR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` reader - Vertical Non-Display Period (Line) = VNDR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` writer - Vertical Non-Display Period (Line) = VNDR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_W<'a, const O: u8> =
        crate::FieldWriter<'a, VNDR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Vertical Non-Display Period (Line) = VNDR + 1"]
        #[inline(always)]
        pub fn vertical_display_height(&self) -> VERTICAL_DISPLAY_HEIGHT_R {
            VERTICAL_DISPLAY_HEIGHT_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Vertical Non-Display Period (Line) = VNDR + 1"]
        #[inline(always)]
        #[must_use]
        pub fn vertical_display_height(&mut self) -> VERTICAL_DISPLAY_HEIGHT_W<0> {
            VERTICAL_DISPLAY_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Vertical Non-Display Period Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vndr0](index.html) module"]
    pub struct VNDR0;
    impl crate::RegisterSpec for VNDR0 {
        const ADDRESS: u8 = 28u8;
    }
    #[doc = "`read()` method returns [vndr0::R](R) reader structure"]
    impl crate::Readable for VNDR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [vndr0::W](W) writer structure"]
    impl crate::Writable for VNDR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets VNDR0 to value 0x15"]
    impl crate::Resettable for VNDR0 {
        const RESET_VALUE: u8 = 0x15;
    }
}
pub use vndr1::VNDR1;
#[doc = "Vertical Non-Display Period Register 1"]
pub mod vndr1 {
    #[doc = "Register `VNDR1` reader"]
    pub struct R(crate::R<VNDR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<VNDR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<VNDR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<VNDR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `VNDR1` writer"]
    pub struct W(crate::W<VNDR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<VNDR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<VNDR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<VNDR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` reader - Vertical Non-Display Period (Line) = VNDR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `VERTICAL_DISPLAY_HEIGHT` writer - Vertical Non-Display Period (Line) = VNDR + 1"]
    pub type VERTICAL_DISPLAY_HEIGHT_W<'a, const O: u8> =
        crate::FieldWriter<'a, VNDR1, u8, u8, 2, O>;
    impl R {
        #[doc = "Bits 0:1 - Vertical Non-Display Period (Line) = VNDR + 1"]
        #[inline(always)]
        pub fn vertical_display_height(&self) -> VERTICAL_DISPLAY_HEIGHT_R {
            VERTICAL_DISPLAY_HEIGHT_R::new(self.bits & 3)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Vertical Non-Display Period (Line) = VNDR + 1"]
        #[inline(always)]
        #[must_use]
        pub fn vertical_display_height(&mut self) -> VERTICAL_DISPLAY_HEIGHT_W<0> {
            VERTICAL_DISPLAY_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Vertical Non-Display Period Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vndr1](index.html) module"]
    pub struct VNDR1;
    impl crate::RegisterSpec for VNDR1 {
        const ADDRESS: u8 = 29u8;
    }
    #[doc = "`read()` method returns [vndr1::R](R) reader structure"]
    impl crate::Readable for VNDR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [vndr1::W](W) writer structure"]
    impl crate::Writable for VNDR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets VNDR1 to value 0"]
    impl crate::Resettable for VNDR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use vstr::VSTR;
#[doc = "VSYNC Start Position Register"]
pub mod vstr {
    #[doc = "Register `VSTR` reader"]
    pub struct R(crate::R<VSTR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<VSTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<VSTR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<VSTR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `VSTR` writer"]
    pub struct W(crate::W<VSTR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<VSTR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<VSTR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<VSTR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `VSYNC_START_POSITION` reader - The starting position from the end of display area to the beginning of VSYNC. VSYNC Start Position(Line) = VSTR + 1"]
    pub type VSYNC_START_POSITION_R = crate::FieldReader<u8>;
    #[doc = "Field `VSYNC_START_POSITION` writer - The starting position from the end of display area to the beginning of VSYNC. VSYNC Start Position(Line) = VSTR + 1"]
    pub type VSYNC_START_POSITION_W<'a, const O: u8> = crate::FieldWriter<'a, VSTR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - The starting position from the end of display area to the beginning of VSYNC. VSYNC Start Position(Line) = VSTR + 1"]
        #[inline(always)]
        pub fn vsync_start_position(&self) -> VSYNC_START_POSITION_R {
            VSYNC_START_POSITION_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - The starting position from the end of display area to the beginning of VSYNC. VSYNC Start Position(Line) = VSTR + 1"]
        #[inline(always)]
        #[must_use]
        pub fn vsync_start_position(&mut self) -> VSYNC_START_POSITION_W<0> {
            VSYNC_START_POSITION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "VSYNC Start Position Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vstr](index.html) module"]
    pub struct VSTR;
    impl crate::RegisterSpec for VSTR {
        const ADDRESS: u8 = 30u8;
    }
    #[doc = "`read()` method returns [vstr::R](R) reader structure"]
    impl crate::Readable for VSTR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [vstr::W](W) writer structure"]
    impl crate::Writable for VSTR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets VSTR to value 0x0b"]
    impl crate::Resettable for VSTR {
        const RESET_VALUE: u8 = 0x0b;
    }
}
pub use vpwr::VPWR;
#[doc = "VSYNC Pulse Width Register"]
pub mod vpwr {
    #[doc = "Register `VPWR` reader"]
    pub struct R(crate::R<VPWR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<VPWR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<VPWR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<VPWR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `VPWR` writer"]
    pub struct W(crate::W<VPWR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<VPWR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<VPWR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<VPWR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `VSYNC_PULSE_WIDTH` reader - VSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
    pub type VSYNC_PULSE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `VSYNC_PULSE_WIDTH` writer - VSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
    pub type VSYNC_PULSE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, VPWR, u8, u8, 6, O>;
    impl R {
        #[doc = "Bits 0:5 - VSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
        #[inline(always)]
        pub fn vsync_pulse_width(&self) -> VSYNC_PULSE_WIDTH_R {
            VSYNC_PULSE_WIDTH_R::new(self.bits & 0x3f)
        }
    }
    impl W {
        #[doc = "Bits 0:5 - VSYNC Pulse Width (pixels) = (HPW + 1) * 8"]
        #[inline(always)]
        #[must_use]
        pub fn vsync_pulse_width(&mut self) -> VSYNC_PULSE_WIDTH_W<0> {
            VSYNC_PULSE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "VSYNC Pulse Width Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vpwr](index.html) module"]
    pub struct VPWR;
    impl crate::RegisterSpec for VPWR {
        const ADDRESS: u8 = 31u8;
    }
    #[doc = "`read()` method returns [vpwr::R](R) reader structure"]
    impl crate::Readable for VPWR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [vpwr::W](W) writer structure"]
    impl crate::Writable for VPWR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets VPWR to value 0"]
    impl crate::Resettable for VPWR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use misa0::MISA0;
#[doc = "Main Image Start Address 0"]
pub mod misa0 {
    #[doc = "Register `MISA0` reader"]
    pub struct R(crate::R<MISA0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MISA0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MISA0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MISA0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MISA0` writer"]
    pub struct W(crate::W<MISA0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MISA0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MISA0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MISA0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` reader - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` writer - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, MISA0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        pub fn main_image_start_address(&self) -> MAIN_IMAGE_START_ADDRESS_R {
            MAIN_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn main_image_start_address(&mut self) -> MAIN_IMAGE_START_ADDRESS_W<0> {
            MAIN_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Image Start Address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misa0](index.html) module"]
    pub struct MISA0;
    impl crate::RegisterSpec for MISA0 {
        const ADDRESS: u8 = 32u8;
    }
    #[doc = "`read()` method returns [misa0::R](R) reader structure"]
    impl crate::Readable for MISA0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [misa0::W](W) writer structure"]
    impl crate::Writable for MISA0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MISA0 to value 0"]
    impl crate::Resettable for MISA0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use misa1::MISA1;
#[doc = "Main Image Start Address 1"]
pub mod misa1 {
    #[doc = "Register `MISA1` reader"]
    pub struct R(crate::R<MISA1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MISA1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MISA1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MISA1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MISA1` writer"]
    pub struct W(crate::W<MISA1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MISA1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MISA1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MISA1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` reader - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` writer - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, MISA1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        pub fn main_image_start_address(&self) -> MAIN_IMAGE_START_ADDRESS_R {
            MAIN_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn main_image_start_address(&mut self) -> MAIN_IMAGE_START_ADDRESS_W<0> {
            MAIN_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Image Start Address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misa1](index.html) module"]
    pub struct MISA1;
    impl crate::RegisterSpec for MISA1 {
        const ADDRESS: u8 = 33u8;
    }
    #[doc = "`read()` method returns [misa1::R](R) reader structure"]
    impl crate::Readable for MISA1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [misa1::W](W) writer structure"]
    impl crate::Writable for MISA1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MISA1 to value 0"]
    impl crate::Resettable for MISA1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use misa2::MISA2;
#[doc = "Main Image Start Address 2"]
pub mod misa2 {
    #[doc = "Register `MISA2` reader"]
    pub struct R(crate::R<MISA2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MISA2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MISA2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MISA2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MISA2` writer"]
    pub struct W(crate::W<MISA2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MISA2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MISA2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MISA2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` reader - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` writer - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, MISA2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        pub fn main_image_start_address(&self) -> MAIN_IMAGE_START_ADDRESS_R {
            MAIN_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn main_image_start_address(&mut self) -> MAIN_IMAGE_START_ADDRESS_W<0> {
            MAIN_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Image Start Address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misa2](index.html) module"]
    pub struct MISA2;
    impl crate::RegisterSpec for MISA2 {
        const ADDRESS: u8 = 34u8;
    }
    #[doc = "`read()` method returns [misa2::R](R) reader structure"]
    impl crate::Readable for MISA2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [misa2::W](W) writer structure"]
    impl crate::Writable for MISA2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MISA2 to value 0"]
    impl crate::Resettable for MISA2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use misa3::MISA3;
#[doc = "Main Image Start Address 3"]
pub mod misa3 {
    #[doc = "Register `MISA3` reader"]
    pub struct R(crate::R<MISA3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MISA3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MISA3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MISA3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MISA3` writer"]
    pub struct W(crate::W<MISA3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MISA3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MISA3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MISA3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` reader - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_IMAGE_START_ADDRESS` writer - Main Image Start Address"]
    pub type MAIN_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, MISA3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        pub fn main_image_start_address(&self) -> MAIN_IMAGE_START_ADDRESS_R {
            MAIN_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Main Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn main_image_start_address(&mut self) -> MAIN_IMAGE_START_ADDRESS_W<0> {
            MAIN_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Image Start Address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misa3](index.html) module"]
    pub struct MISA3;
    impl crate::RegisterSpec for MISA3 {
        const ADDRESS: u8 = 35u8;
    }
    #[doc = "`read()` method returns [misa3::R](R) reader structure"]
    impl crate::Readable for MISA3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [misa3::W](W) writer structure"]
    impl crate::Writable for MISA3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MISA3 to value 0"]
    impl crate::Resettable for MISA3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use miw0::MIW0;
#[doc = "Main Image Width 0"]
pub mod miw0 {
    #[doc = "Register `MIW0` reader"]
    pub struct R(crate::R<MIW0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MIW0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MIW0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MIW0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MIW0` writer"]
    pub struct W(crate::W<MIW0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MIW0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MIW0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MIW0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_IMAGE_WIDTH` reader - Main Image Width"]
    pub type MAIN_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_IMAGE_WIDTH` writer - Main Image Width"]
    pub type MAIN_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, MIW0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Main Image Width"]
        #[inline(always)]
        pub fn main_image_width(&self) -> MAIN_IMAGE_WIDTH_R {
            MAIN_IMAGE_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Main Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn main_image_width(&mut self) -> MAIN_IMAGE_WIDTH_W<0> {
            MAIN_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Image Width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [miw0](index.html) module"]
    pub struct MIW0;
    impl crate::RegisterSpec for MIW0 {
        const ADDRESS: u8 = 36u8;
    }
    #[doc = "`read()` method returns [miw0::R](R) reader structure"]
    impl crate::Readable for MIW0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [miw0::W](W) writer structure"]
    impl crate::Writable for MIW0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MIW0 to value 0"]
    impl crate::Resettable for MIW0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use miw1::MIW1;
#[doc = "Main Image Width 1"]
pub mod miw1 {
    #[doc = "Register `MIW1` reader"]
    pub struct R(crate::R<MIW1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MIW1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MIW1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MIW1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MIW1` writer"]
    pub struct W(crate::W<MIW1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MIW1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MIW1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MIW1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_IMAGE_WIDTH` reader - Main Image Width"]
    pub type MAIN_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_IMAGE_WIDTH` writer - Main Image Width"]
    pub type MAIN_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, MIW1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Main Image Width"]
        #[inline(always)]
        pub fn main_image_width(&self) -> MAIN_IMAGE_WIDTH_R {
            MAIN_IMAGE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Main Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn main_image_width(&mut self) -> MAIN_IMAGE_WIDTH_W<0> {
            MAIN_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Image Width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [miw1](index.html) module"]
    pub struct MIW1;
    impl crate::RegisterSpec for MIW1 {
        const ADDRESS: u8 = 37u8;
    }
    #[doc = "`read()` method returns [miw1::R](R) reader structure"]
    impl crate::Readable for MIW1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [miw1::W](W) writer structure"]
    impl crate::Writable for MIW1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MIW1 to value 0"]
    impl crate::Resettable for MIW1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use mwulx0::MWULX0;
#[doc = "Main Window Upper-Left corner X-coordinates 0"]
pub mod mwulx0 {
    #[doc = "Register `MWULX0` reader"]
    pub struct R(crate::R<MWULX0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MWULX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MWULX0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MWULX0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MWULX0` writer"]
    pub struct W(crate::W<MWULX0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MWULX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MWULX0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MWULX0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_WINDOW_X` reader - Main Window Upper-Left corner X-coordinates"]
    pub type MAIN_WINDOW_X_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_WINDOW_X` writer - Main Window Upper-Left corner X-coordinates"]
    pub type MAIN_WINDOW_X_W<'a, const O: u8> = crate::FieldWriter<'a, MWULX0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Main Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn main_window_x(&self) -> MAIN_WINDOW_X_R {
            MAIN_WINDOW_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Main Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn main_window_x(&mut self) -> MAIN_WINDOW_X_W<0> {
            MAIN_WINDOW_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Window Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mwulx0](index.html) module"]
    pub struct MWULX0;
    impl crate::RegisterSpec for MWULX0 {
        const ADDRESS: u8 = 38u8;
    }
    #[doc = "`read()` method returns [mwulx0::R](R) reader structure"]
    impl crate::Readable for MWULX0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mwulx0::W](W) writer structure"]
    impl crate::Writable for MWULX0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MWULX0 to value 0"]
    impl crate::Resettable for MWULX0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use mwulx1::MWULX1;
#[doc = "Main Window Upper-Left corner X-coordinates 1"]
pub mod mwulx1 {
    #[doc = "Register `MWULX1` reader"]
    pub struct R(crate::R<MWULX1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MWULX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MWULX1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MWULX1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MWULX1` writer"]
    pub struct W(crate::W<MWULX1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MWULX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MWULX1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MWULX1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_WINDOW_X` reader - Main Window Upper-Left corner X-coordinates"]
    pub type MAIN_WINDOW_X_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_WINDOW_X` writer - Main Window Upper-Left corner X-coordinates"]
    pub type MAIN_WINDOW_X_W<'a, const O: u8> = crate::FieldWriter<'a, MWULX1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Main Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn main_window_x(&self) -> MAIN_WINDOW_X_R {
            MAIN_WINDOW_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Main Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn main_window_x(&mut self) -> MAIN_WINDOW_X_W<0> {
            MAIN_WINDOW_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Window Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mwulx1](index.html) module"]
    pub struct MWULX1;
    impl crate::RegisterSpec for MWULX1 {
        const ADDRESS: u8 = 39u8;
    }
    #[doc = "`read()` method returns [mwulx1::R](R) reader structure"]
    impl crate::Readable for MWULX1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mwulx1::W](W) writer structure"]
    impl crate::Writable for MWULX1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MWULX1 to value 0"]
    impl crate::Resettable for MWULX1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use mwuly0::MWULY0;
#[doc = "Main Window Upper-Left corner Y-coordinates 0"]
pub mod mwuly0 {
    #[doc = "Register `MWULY0` reader"]
    pub struct R(crate::R<MWULY0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MWULY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MWULY0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MWULY0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MWULY0` writer"]
    pub struct W(crate::W<MWULY0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MWULY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MWULY0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MWULY0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_WINDOW_Y` reader - Main Window Upper-Left corner Y-coordinates"]
    pub type MAIN_WINDOW_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_WINDOW_Y` writer - Main Window Upper-Left corner Y-coordinates"]
    pub type MAIN_WINDOW_Y_W<'a, const O: u8> = crate::FieldWriter<'a, MWULY0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Main Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn main_window_y(&self) -> MAIN_WINDOW_Y_R {
            MAIN_WINDOW_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Main Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn main_window_y(&mut self) -> MAIN_WINDOW_Y_W<0> {
            MAIN_WINDOW_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Window Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mwuly0](index.html) module"]
    pub struct MWULY0;
    impl crate::RegisterSpec for MWULY0 {
        const ADDRESS: u8 = 40u8;
    }
    #[doc = "`read()` method returns [mwuly0::R](R) reader structure"]
    impl crate::Readable for MWULY0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mwuly0::W](W) writer structure"]
    impl crate::Writable for MWULY0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MWULY0 to value 0"]
    impl crate::Resettable for MWULY0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use mwuly1::MWULY1;
#[doc = "Main Window Upper-Left corner Y-coordinates 1"]
pub mod mwuly1 {
    #[doc = "Register `MWULY1` reader"]
    pub struct R(crate::R<MWULY1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<MWULY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<MWULY1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<MWULY1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `MWULY1` writer"]
    pub struct W(crate::W<MWULY1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<MWULY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<MWULY1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<MWULY1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAIN_WINDOW_Y` reader - Main Window Upper-Left corner Y-coordinates"]
    pub type MAIN_WINDOW_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `MAIN_WINDOW_Y` writer - Main Window Upper-Left corner Y-coordinates"]
    pub type MAIN_WINDOW_Y_W<'a, const O: u8> = crate::FieldWriter<'a, MWULY1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Main Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn main_window_y(&self) -> MAIN_WINDOW_Y_R {
            MAIN_WINDOW_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Main Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn main_window_y(&mut self) -> MAIN_WINDOW_Y_W<0> {
            MAIN_WINDOW_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Main Window Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mwuly1](index.html) module"]
    pub struct MWULY1;
    impl crate::RegisterSpec for MWULY1 {
        const ADDRESS: u8 = 41u8;
    }
    #[doc = "`read()` method returns [mwuly1::R](R) reader structure"]
    impl crate::Readable for MWULY1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [mwuly1::W](W) writer structure"]
    impl crate::Writable for MWULY1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets MWULY1 to value 0"]
    impl crate::Resettable for MWULY1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwdulx0::PWDULX0;
#[doc = "PIP 1 or 2 Window Display Upper-Left corner X-coordinates 0"]
pub mod pwdulx0 {
    #[doc = "Register `PWDULX0` reader"]
    pub struct R(crate::R<PWDULX0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWDULX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWDULX0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWDULX0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWDULX0` writer"]
    pub struct W(crate::W<PWDULX0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWDULX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWDULX0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWDULX0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_DISPLAY_X` reader - PIP Window Display Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_DISPLAY_X_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_DISPLAY_X` writer - PIP Window Display Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_DISPLAY_X_W<'a, const O: u8> =
        crate::FieldWriter<'a, PWDULX0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Window Display Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn pip_window_display_x(&self) -> PIP_WINDOW_DISPLAY_X_R {
            PIP_WINDOW_DISPLAY_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Window Display Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_display_x(&mut self) -> PIP_WINDOW_DISPLAY_X_W<0> {
            PIP_WINDOW_DISPLAY_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Display Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwdulx0](index.html) module"]
    pub struct PWDULX0;
    impl crate::RegisterSpec for PWDULX0 {
        const ADDRESS: u8 = 42u8;
    }
    #[doc = "`read()` method returns [pwdulx0::R](R) reader structure"]
    impl crate::Readable for PWDULX0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwdulx0::W](W) writer structure"]
    impl crate::Writable for PWDULX0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWDULX0 to value 0"]
    impl crate::Resettable for PWDULX0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwdulx1::PWDULX1;
#[doc = "PIP 1 or 2 Window Display Upper-Left corner X-coordinates 1"]
pub mod pwdulx1 {
    #[doc = "Register `PWDULX1` reader"]
    pub struct R(crate::R<PWDULX1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWDULX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWDULX1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWDULX1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWDULX1` writer"]
    pub struct W(crate::W<PWDULX1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWDULX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWDULX1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWDULX1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_DISPLAY_X` reader - PIP Window Display Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_DISPLAY_X_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_DISPLAY_X` writer - PIP Window Display Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_DISPLAY_X_W<'a, const O: u8> =
        crate::FieldWriter<'a, PWDULX1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - PIP Window Display Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn pip_window_display_x(&self) -> PIP_WINDOW_DISPLAY_X_R {
            PIP_WINDOW_DISPLAY_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - PIP Window Display Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_display_x(&mut self) -> PIP_WINDOW_DISPLAY_X_W<0> {
            PIP_WINDOW_DISPLAY_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Display Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwdulx1](index.html) module"]
    pub struct PWDULX1;
    impl crate::RegisterSpec for PWDULX1 {
        const ADDRESS: u8 = 43u8;
    }
    #[doc = "`read()` method returns [pwdulx1::R](R) reader structure"]
    impl crate::Readable for PWDULX1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwdulx1::W](W) writer structure"]
    impl crate::Writable for PWDULX1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWDULX1 to value 0"]
    impl crate::Resettable for PWDULX1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwduly0::PWDULY0;
#[doc = "PIP 1 or 2 Window Display Upper-Left corner Y-coordinates 0"]
pub mod pwduly0 {
    #[doc = "Register `PWDULY0` reader"]
    pub struct R(crate::R<PWDULY0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWDULY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWDULY0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWDULY0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWDULY0` writer"]
    pub struct W(crate::W<PWDULY0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWDULY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWDULY0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWDULY0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_DISPLAY_Y` reader - PIP Window Display Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_DISPLAY_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_DISPLAY_Y` writer - PIP Window Display Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_DISPLAY_Y_W<'a, const O: u8> =
        crate::FieldWriter<'a, PWDULY0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Window Display Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn pip_window_display_y(&self) -> PIP_WINDOW_DISPLAY_Y_R {
            PIP_WINDOW_DISPLAY_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Window Display Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_display_y(&mut self) -> PIP_WINDOW_DISPLAY_Y_W<0> {
            PIP_WINDOW_DISPLAY_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Display Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwduly0](index.html) module"]
    pub struct PWDULY0;
    impl crate::RegisterSpec for PWDULY0 {
        const ADDRESS: u8 = 44u8;
    }
    #[doc = "`read()` method returns [pwduly0::R](R) reader structure"]
    impl crate::Readable for PWDULY0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwduly0::W](W) writer structure"]
    impl crate::Writable for PWDULY0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWDULY0 to value 0"]
    impl crate::Resettable for PWDULY0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwduly1::PWDULY1;
#[doc = "PIP 1 or 2 Window Display Upper-Left corner Y-coordinates 1"]
pub mod pwduly1 {
    #[doc = "Register `PWDULY1` reader"]
    pub struct R(crate::R<PWDULY1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWDULY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWDULY1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWDULY1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWDULY1` writer"]
    pub struct W(crate::W<PWDULY1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWDULY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWDULY1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWDULY1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_DISPLAY_Y` reader - PIP Window Display Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_DISPLAY_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_DISPLAY_Y` writer - PIP Window Display Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_DISPLAY_Y_W<'a, const O: u8> =
        crate::FieldWriter<'a, PWDULY1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - PIP Window Display Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn pip_window_display_y(&self) -> PIP_WINDOW_DISPLAY_Y_R {
            PIP_WINDOW_DISPLAY_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - PIP Window Display Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_display_y(&mut self) -> PIP_WINDOW_DISPLAY_Y_W<0> {
            PIP_WINDOW_DISPLAY_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Display Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwduly1](index.html) module"]
    pub struct PWDULY1;
    impl crate::RegisterSpec for PWDULY1 {
        const ADDRESS: u8 = 45u8;
    }
    #[doc = "`read()` method returns [pwduly1::R](R) reader structure"]
    impl crate::Readable for PWDULY1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwduly1::W](W) writer structure"]
    impl crate::Writable for PWDULY1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWDULY1 to value 0"]
    impl crate::Resettable for PWDULY1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pisa0::PISA0;
#[doc = "PIP 1 or 2 Image Start Address 0"]
pub mod pisa0 {
    #[doc = "Register `PISA0` reader"]
    pub struct R(crate::R<PISA0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PISA0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PISA0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PISA0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PISA0` writer"]
    pub struct W(crate::W<PISA0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PISA0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PISA0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PISA0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` reader - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` writer - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, PISA0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        pub fn pip_image_start_address(&self) -> PIP_IMAGE_START_ADDRESS_R {
            PIP_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn pip_image_start_address(&mut self) -> PIP_IMAGE_START_ADDRESS_W<0> {
            PIP_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Image Start Address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pisa0](index.html) module"]
    pub struct PISA0;
    impl crate::RegisterSpec for PISA0 {
        const ADDRESS: u8 = 46u8;
    }
    #[doc = "`read()` method returns [pisa0::R](R) reader structure"]
    impl crate::Readable for PISA0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pisa0::W](W) writer structure"]
    impl crate::Writable for PISA0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PISA0 to value 0"]
    impl crate::Resettable for PISA0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pisa1::PISA1;
#[doc = "PIP 1 or 2 Image Start Address 1"]
pub mod pisa1 {
    #[doc = "Register `PISA1` reader"]
    pub struct R(crate::R<PISA1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PISA1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PISA1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PISA1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PISA1` writer"]
    pub struct W(crate::W<PISA1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PISA1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PISA1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PISA1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` reader - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` writer - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, PISA1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        pub fn pip_image_start_address(&self) -> PIP_IMAGE_START_ADDRESS_R {
            PIP_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn pip_image_start_address(&mut self) -> PIP_IMAGE_START_ADDRESS_W<0> {
            PIP_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Image Start Address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pisa1](index.html) module"]
    pub struct PISA1;
    impl crate::RegisterSpec for PISA1 {
        const ADDRESS: u8 = 47u8;
    }
    #[doc = "`read()` method returns [pisa1::R](R) reader structure"]
    impl crate::Readable for PISA1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pisa1::W](W) writer structure"]
    impl crate::Writable for PISA1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PISA1 to value 0"]
    impl crate::Resettable for PISA1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pisa2::PISA2;
#[doc = "PIP 1 or 2 Image Start Address 2"]
pub mod pisa2 {
    #[doc = "Register `PISA2` reader"]
    pub struct R(crate::R<PISA2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PISA2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PISA2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PISA2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PISA2` writer"]
    pub struct W(crate::W<PISA2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PISA2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PISA2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PISA2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` reader - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` writer - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, PISA2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        pub fn pip_image_start_address(&self) -> PIP_IMAGE_START_ADDRESS_R {
            PIP_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn pip_image_start_address(&mut self) -> PIP_IMAGE_START_ADDRESS_W<0> {
            PIP_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Image Start Address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pisa2](index.html) module"]
    pub struct PISA2;
    impl crate::RegisterSpec for PISA2 {
        const ADDRESS: u8 = 48u8;
    }
    #[doc = "`read()` method returns [pisa2::R](R) reader structure"]
    impl crate::Readable for PISA2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pisa2::W](W) writer structure"]
    impl crate::Writable for PISA2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PISA2 to value 0"]
    impl crate::Resettable for PISA2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pisa3::PISA3;
#[doc = "PIP 1 or 2 Image Start Address 3"]
pub mod pisa3 {
    #[doc = "Register `PISA3` reader"]
    pub struct R(crate::R<PISA3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PISA3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PISA3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PISA3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PISA3` writer"]
    pub struct W(crate::W<PISA3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PISA3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PISA3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PISA3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` reader - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_IMAGE_START_ADDRESS` writer - PIP Image Start Address"]
    pub type PIP_IMAGE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, PISA3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        pub fn pip_image_start_address(&self) -> PIP_IMAGE_START_ADDRESS_R {
            PIP_IMAGE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Image Start Address"]
        #[inline(always)]
        #[must_use]
        pub fn pip_image_start_address(&mut self) -> PIP_IMAGE_START_ADDRESS_W<0> {
            PIP_IMAGE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Image Start Address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pisa3](index.html) module"]
    pub struct PISA3;
    impl crate::RegisterSpec for PISA3 {
        const ADDRESS: u8 = 49u8;
    }
    #[doc = "`read()` method returns [pisa3::R](R) reader structure"]
    impl crate::Readable for PISA3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pisa3::W](W) writer structure"]
    impl crate::Writable for PISA3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PISA3 to value 0"]
    impl crate::Resettable for PISA3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use piw0::PIW0;
#[doc = "PIP Image Width 0"]
pub mod piw0 {
    #[doc = "Register `PIW0` reader"]
    pub struct R(crate::R<PIW0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PIW0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PIW0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PIW0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PIW0` writer"]
    pub struct W(crate::W<PIW0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PIW0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PIW0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PIW0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_IMAGE_WIDTH` reader - PIP Image Width"]
    pub type PIP_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_IMAGE_WIDTH` writer - PIP Image Width"]
    pub type PIP_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, PIW0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Image Width"]
        #[inline(always)]
        pub fn pip_image_width(&self) -> PIP_IMAGE_WIDTH_R {
            PIP_IMAGE_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn pip_image_width(&mut self) -> PIP_IMAGE_WIDTH_W<0> {
            PIP_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP Image Width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [piw0](index.html) module"]
    pub struct PIW0;
    impl crate::RegisterSpec for PIW0 {
        const ADDRESS: u8 = 50u8;
    }
    #[doc = "`read()` method returns [piw0::R](R) reader structure"]
    impl crate::Readable for PIW0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [piw0::W](W) writer structure"]
    impl crate::Writable for PIW0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PIW0 to value 0"]
    impl crate::Resettable for PIW0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use piw1::PIW1;
#[doc = "PIP Image Width 1"]
pub mod piw1 {
    #[doc = "Register `PIW1` reader"]
    pub struct R(crate::R<PIW1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PIW1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PIW1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PIW1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PIW1` writer"]
    pub struct W(crate::W<PIW1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PIW1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PIW1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PIW1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_IMAGE_WIDTH` reader - PIP Image Width"]
    pub type PIP_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_IMAGE_WIDTH` writer - PIP Image Width"]
    pub type PIP_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, PIW1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - PIP Image Width"]
        #[inline(always)]
        pub fn pip_image_width(&self) -> PIP_IMAGE_WIDTH_R {
            PIP_IMAGE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - PIP Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn pip_image_width(&mut self) -> PIP_IMAGE_WIDTH_W<0> {
            PIP_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP Image Width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [piw1](index.html) module"]
    pub struct PIW1;
    impl crate::RegisterSpec for PIW1 {
        const ADDRESS: u8 = 51u8;
    }
    #[doc = "`read()` method returns [piw1::R](R) reader structure"]
    impl crate::Readable for PIW1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [piw1::W](W) writer structure"]
    impl crate::Writable for PIW1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PIW1 to value 0"]
    impl crate::Resettable for PIW1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwiulx0::PWIULX0;
#[doc = "PIP 1 or 2 Window Image Upper-Left corner X-coordinates 0"]
pub mod pwiulx0 {
    #[doc = "Register `PWIULX0` reader"]
    pub struct R(crate::R<PWIULX0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWIULX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWIULX0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWIULX0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWIULX0` writer"]
    pub struct W(crate::W<PWIULX0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWIULX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWIULX0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWIULX0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_IMAGE_X` reader - PIP Window Image Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_IMAGE_X_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_IMAGE_X` writer - PIP Window Image Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_IMAGE_X_W<'a, const O: u8> = crate::FieldWriter<'a, PWIULX0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Window Image Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn pip_window_image_x(&self) -> PIP_WINDOW_IMAGE_X_R {
            PIP_WINDOW_IMAGE_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Window Image Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_image_x(&mut self) -> PIP_WINDOW_IMAGE_X_W<0> {
            PIP_WINDOW_IMAGE_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Image Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwiulx0](index.html) module"]
    pub struct PWIULX0;
    impl crate::RegisterSpec for PWIULX0 {
        const ADDRESS: u8 = 52u8;
    }
    #[doc = "`read()` method returns [pwiulx0::R](R) reader structure"]
    impl crate::Readable for PWIULX0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwiulx0::W](W) writer structure"]
    impl crate::Writable for PWIULX0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWIULX0 to value 0"]
    impl crate::Resettable for PWIULX0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwiulx1::PWIULX1;
#[doc = "PIP 1 or 2 Window Image Upper-Left corner X-coordinates 1"]
pub mod pwiulx1 {
    #[doc = "Register `PWIULX1` reader"]
    pub struct R(crate::R<PWIULX1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWIULX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWIULX1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWIULX1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWIULX1` writer"]
    pub struct W(crate::W<PWIULX1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWIULX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWIULX1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWIULX1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_IMAGE_X` reader - PIP Window Image Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_IMAGE_X_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_IMAGE_X` writer - PIP Window Image Upper-Left corner X-coordinates"]
    pub type PIP_WINDOW_IMAGE_X_W<'a, const O: u8> = crate::FieldWriter<'a, PWIULX1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - PIP Window Image Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn pip_window_image_x(&self) -> PIP_WINDOW_IMAGE_X_R {
            PIP_WINDOW_IMAGE_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - PIP Window Image Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_image_x(&mut self) -> PIP_WINDOW_IMAGE_X_W<0> {
            PIP_WINDOW_IMAGE_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Image Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwiulx1](index.html) module"]
    pub struct PWIULX1;
    impl crate::RegisterSpec for PWIULX1 {
        const ADDRESS: u8 = 53u8;
    }
    #[doc = "`read()` method returns [pwiulx1::R](R) reader structure"]
    impl crate::Readable for PWIULX1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwiulx1::W](W) writer structure"]
    impl crate::Writable for PWIULX1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWIULX1 to value 0"]
    impl crate::Resettable for PWIULX1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwiuly0::PWIULY0;
#[doc = "PIP 1 or 2 Window Image Upper-Left corner Y-coordinates 0"]
pub mod pwiuly0 {
    #[doc = "Register `PWIULY0` reader"]
    pub struct R(crate::R<PWIULY0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWIULY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWIULY0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWIULY0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWIULY0` writer"]
    pub struct W(crate::W<PWIULY0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWIULY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWIULY0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWIULY0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_IMAGE_Y` reader - PIP Window Image Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_IMAGE_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_IMAGE_Y` writer - PIP Window Image Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_IMAGE_Y_W<'a, const O: u8> = crate::FieldWriter<'a, PWIULY0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Window Image Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn pip_window_image_y(&self) -> PIP_WINDOW_IMAGE_Y_R {
            PIP_WINDOW_IMAGE_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Window Image Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_image_y(&mut self) -> PIP_WINDOW_IMAGE_Y_W<0> {
            PIP_WINDOW_IMAGE_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Image Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwiuly0](index.html) module"]
    pub struct PWIULY0;
    impl crate::RegisterSpec for PWIULY0 {
        const ADDRESS: u8 = 54u8;
    }
    #[doc = "`read()` method returns [pwiuly0::R](R) reader structure"]
    impl crate::Readable for PWIULY0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwiuly0::W](W) writer structure"]
    impl crate::Writable for PWIULY0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWIULY0 to value 0"]
    impl crate::Resettable for PWIULY0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwiuly1::PWIULY1;
#[doc = "PIP 1 or 2 Window Image Upper-Left corner Y-coordinates 1"]
pub mod pwiuly1 {
    #[doc = "Register `PWIULY1` reader"]
    pub struct R(crate::R<PWIULY1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWIULY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWIULY1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWIULY1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWIULY1` writer"]
    pub struct W(crate::W<PWIULY1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWIULY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWIULY1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWIULY1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_IMAGE_Y` reader - PIP Window Image Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_IMAGE_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_IMAGE_Y` writer - PIP Window Image Upper-Left corner Y-coordinates"]
    pub type PIP_WINDOW_IMAGE_Y_W<'a, const O: u8> = crate::FieldWriter<'a, PWIULY1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - PIP Window Image Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn pip_window_image_y(&self) -> PIP_WINDOW_IMAGE_Y_R {
            PIP_WINDOW_IMAGE_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - PIP Window Image Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_image_y(&mut self) -> PIP_WINDOW_IMAGE_Y_W<0> {
            PIP_WINDOW_IMAGE_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP 1 or 2 Window Image Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwiuly1](index.html) module"]
    pub struct PWIULY1;
    impl crate::RegisterSpec for PWIULY1 {
        const ADDRESS: u8 = 55u8;
    }
    #[doc = "`read()` method returns [pwiuly1::R](R) reader structure"]
    impl crate::Readable for PWIULY1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwiuly1::W](W) writer structure"]
    impl crate::Writable for PWIULY1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWIULY1 to value 0"]
    impl crate::Resettable for PWIULY1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pww0::PWW0;
#[doc = "PIP Window Width 0"]
pub mod pww0 {
    #[doc = "Register `PWW0` reader"]
    pub struct R(crate::R<PWW0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWW0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWW0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWW0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWW0` writer"]
    pub struct W(crate::W<PWW0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWW0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWW0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWW0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_WIDTH` reader - PIP Image Width"]
    pub type PIP_WINDOW_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_WIDTH` writer - PIP Image Width"]
    pub type PIP_WINDOW_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, PWW0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Image Width"]
        #[inline(always)]
        pub fn pip_window_width(&self) -> PIP_WINDOW_WIDTH_R {
            PIP_WINDOW_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_width(&mut self) -> PIP_WINDOW_WIDTH_W<0> {
            PIP_WINDOW_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP Window Width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pww0](index.html) module"]
    pub struct PWW0;
    impl crate::RegisterSpec for PWW0 {
        const ADDRESS: u8 = 56u8;
    }
    #[doc = "`read()` method returns [pww0::R](R) reader structure"]
    impl crate::Readable for PWW0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pww0::W](W) writer structure"]
    impl crate::Writable for PWW0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWW0 to value 0"]
    impl crate::Resettable for PWW0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pww1::PWW1;
#[doc = "PIP Window Width 1"]
pub mod pww1 {
    #[doc = "Register `PWW1` reader"]
    pub struct R(crate::R<PWW1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWW1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWW1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWW1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWW1` writer"]
    pub struct W(crate::W<PWW1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWW1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWW1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWW1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_WIDTH` reader - PIP Image Width"]
    pub type PIP_WINDOW_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_WIDTH` writer - PIP Image Width"]
    pub type PIP_WINDOW_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, PWW1, u8, u8, 3, O>;
    impl R {
        #[doc = "Bits 0:2 - PIP Image Width"]
        #[inline(always)]
        pub fn pip_window_width(&self) -> PIP_WINDOW_WIDTH_R {
            PIP_WINDOW_WIDTH_R::new(self.bits & 7)
        }
    }
    impl W {
        #[doc = "Bits 0:2 - PIP Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_width(&mut self) -> PIP_WINDOW_WIDTH_W<0> {
            PIP_WINDOW_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP Window Width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pww1](index.html) module"]
    pub struct PWW1;
    impl crate::RegisterSpec for PWW1 {
        const ADDRESS: u8 = 57u8;
    }
    #[doc = "`read()` method returns [pww1::R](R) reader structure"]
    impl crate::Readable for PWW1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pww1::W](W) writer structure"]
    impl crate::Writable for PWW1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWW1 to value 0"]
    impl crate::Resettable for PWW1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwh0::PWH0;
#[doc = "PIP Window Height 0"]
pub mod pwh0 {
    #[doc = "Register `PWH0` reader"]
    pub struct R(crate::R<PWH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWH0` writer"]
    pub struct W(crate::W<PWH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_HEIGHT` reader - PIP Image Width"]
    pub type PIP_WINDOW_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_HEIGHT` writer - PIP Image Width"]
    pub type PIP_WINDOW_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, PWH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PIP Image Width"]
        #[inline(always)]
        pub fn pip_window_height(&self) -> PIP_WINDOW_HEIGHT_R {
            PIP_WINDOW_HEIGHT_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PIP Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_height(&mut self) -> PIP_WINDOW_HEIGHT_W<0> {
            PIP_WINDOW_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP Window Height 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwh0](index.html) module"]
    pub struct PWH0;
    impl crate::RegisterSpec for PWH0 {
        const ADDRESS: u8 = 58u8;
    }
    #[doc = "`read()` method returns [pwh0::R](R) reader structure"]
    impl crate::Readable for PWH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwh0::W](W) writer structure"]
    impl crate::Writable for PWH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWH0 to value 0"]
    impl crate::Resettable for PWH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pwh1::PWH1;
#[doc = "PIP Window Height 1"]
pub mod pwh1 {
    #[doc = "Register `PWH1` reader"]
    pub struct R(crate::R<PWH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PWH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PWH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PWH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PWH1` writer"]
    pub struct W(crate::W<PWH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PWH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PWH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PWH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PIP_WINDOW_HEIGHT` reader - PIP Image Width"]
    pub type PIP_WINDOW_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `PIP_WINDOW_HEIGHT` writer - PIP Image Width"]
    pub type PIP_WINDOW_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, PWH1, u8, u8, 3, O>;
    impl R {
        #[doc = "Bits 0:2 - PIP Image Width"]
        #[inline(always)]
        pub fn pip_window_height(&self) -> PIP_WINDOW_HEIGHT_R {
            PIP_WINDOW_HEIGHT_R::new(self.bits & 7)
        }
    }
    impl W {
        #[doc = "Bits 0:2 - PIP Image Width"]
        #[inline(always)]
        #[must_use]
        pub fn pip_window_height(&mut self) -> PIP_WINDOW_HEIGHT_W<0> {
            PIP_WINDOW_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PIP Window Height 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwh1](index.html) module"]
    pub struct PWH1;
    impl crate::RegisterSpec for PWH1 {
        const ADDRESS: u8 = 59u8;
    }
    #[doc = "`read()` method returns [pwh1::R](R) reader structure"]
    impl crate::Readable for PWH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pwh1::W](W) writer structure"]
    impl crate::Writable for PWH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PWH1 to value 0"]
    impl crate::Resettable for PWH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gtccr::GTCCR;
#[doc = "Graphic / Text Cursor Control Register"]
pub mod gtccr {
    #[doc = "Register `GTCCR` reader"]
    pub struct R(crate::R<GTCCR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GTCCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GTCCR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GTCCR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GTCCR` writer"]
    pub struct W(crate::W<GTCCR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GTCCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GTCCR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GTCCR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_CURSOR_BLINKING_ENABLE` reader - Text Cursor Blinking Enable"]
    pub type TEXT_CURSOR_BLINKING_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `TEXT_CURSOR_BLINKING_ENABLE` writer - Text Cursor Blinking Enable"]
    pub type TEXT_CURSOR_BLINKING_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, GTCCR, bool, O>;
    #[doc = "Field `TEXT_CURSOR_ENABLE` reader - Text Cursor Enable"]
    pub type TEXT_CURSOR_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `TEXT_CURSOR_ENABLE` writer - Text Cursor Enable"]
    pub type TEXT_CURSOR_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, GTCCR, bool, O>;
    #[doc = "Field `GRAPHIC_CURSOR` reader - Graphic Cursor Selection"]
    pub type GRAPHIC_CURSOR_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_CURSOR` writer - Graphic Cursor Selection"]
    pub type GRAPHIC_CURSOR_W<'a, const O: u8> = crate::FieldWriter<'a, GTCCR, u8, u8, 2, O>;
    #[doc = "Field `GRAPHIC_CURSOR_ENABLE` reader - Graphic Cursor Enable"]
    pub type GRAPHIC_CURSOR_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `GRAPHIC_CURSOR_ENABLE` writer - Graphic Cursor Enable"]
    pub type GRAPHIC_CURSOR_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, GTCCR, bool, O>;
    #[doc = "Field `GAMMA_TABLE` reader - Gamma table select for MPU write gamma data"]
    pub type GAMMA_TABLE_R = crate::FieldReader<GAMMA_TABLE_A>;
    #[doc = "Gamma table select for MPU write gamma data\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum GAMMA_TABLE_A {
        #[doc = "0: Gamma table for Blue"]
        BLUE = 0,
        #[doc = "1: Gamma table for Green"]
        GREEN = 1,
        #[doc = "2: Gamma table for Red"]
        RED = 2,
        #[doc = "3: NA"]
        NA4 = 3,
    }
    impl From<GAMMA_TABLE_A> for u8 {
        #[inline(always)]
        fn from(variant: GAMMA_TABLE_A) -> Self {
            variant as _
        }
    }
    impl GAMMA_TABLE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> GAMMA_TABLE_A {
            match self.bits {
                0 => GAMMA_TABLE_A::BLUE,
                1 => GAMMA_TABLE_A::GREEN,
                2 => GAMMA_TABLE_A::RED,
                3 => GAMMA_TABLE_A::NA4,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `BLUE`"]
        #[inline(always)]
        pub fn is_blue(&self) -> bool {
            *self == GAMMA_TABLE_A::BLUE
        }
        #[doc = "Checks if the value of the field is `GREEN`"]
        #[inline(always)]
        pub fn is_green(&self) -> bool {
            *self == GAMMA_TABLE_A::GREEN
        }
        #[doc = "Checks if the value of the field is `RED`"]
        #[inline(always)]
        pub fn is_red(&self) -> bool {
            *self == GAMMA_TABLE_A::RED
        }
        #[doc = "Checks if the value of the field is `NA4`"]
        #[inline(always)]
        pub fn is_na4(&self) -> bool {
            *self == GAMMA_TABLE_A::NA4
        }
    }
    #[doc = "Field `GAMMA_TABLE` writer - Gamma table select for MPU write gamma data"]
    pub type GAMMA_TABLE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, GTCCR, u8, GAMMA_TABLE_A, 2, O>;
    impl<'a, const O: u8> GAMMA_TABLE_W<'a, O> {
        #[doc = "Gamma table for Blue"]
        #[inline(always)]
        pub fn blue(self) -> &'a mut W {
            self.variant(GAMMA_TABLE_A::BLUE)
        }
        #[doc = "Gamma table for Green"]
        #[inline(always)]
        pub fn green(self) -> &'a mut W {
            self.variant(GAMMA_TABLE_A::GREEN)
        }
        #[doc = "Gamma table for Red"]
        #[inline(always)]
        pub fn red(self) -> &'a mut W {
            self.variant(GAMMA_TABLE_A::RED)
        }
        #[doc = "NA"]
        #[inline(always)]
        pub fn na4(self) -> &'a mut W {
            self.variant(GAMMA_TABLE_A::NA4)
        }
    }
    #[doc = "Field `GAMMA_CORRECTION_ENABLE` reader - Gamma correction Enable"]
    pub type GAMMA_CORRECTION_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `GAMMA_CORRECTION_ENABLE` writer - Gamma correction Enable"]
    pub type GAMMA_CORRECTION_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, GTCCR, bool, O>;
    impl R {
        #[doc = "Bit 0 - Text Cursor Blinking Enable"]
        #[inline(always)]
        pub fn text_cursor_blinking_enable(&self) -> TEXT_CURSOR_BLINKING_ENABLE_R {
            TEXT_CURSOR_BLINKING_ENABLE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Text Cursor Enable"]
        #[inline(always)]
        pub fn text_cursor_enable(&self) -> TEXT_CURSOR_ENABLE_R {
            TEXT_CURSOR_ENABLE_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bits 2:3 - Graphic Cursor Selection"]
        #[inline(always)]
        pub fn graphic_cursor(&self) -> GRAPHIC_CURSOR_R {
            GRAPHIC_CURSOR_R::new((self.bits >> 2) & 3)
        }
        #[doc = "Bit 4 - Graphic Cursor Enable"]
        #[inline(always)]
        pub fn graphic_cursor_enable(&self) -> GRAPHIC_CURSOR_ENABLE_R {
            GRAPHIC_CURSOR_ENABLE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bits 5:6 - Gamma table select for MPU write gamma data"]
        #[inline(always)]
        pub fn gamma_table(&self) -> GAMMA_TABLE_R {
            GAMMA_TABLE_R::new((self.bits >> 5) & 3)
        }
        #[doc = "Bit 7 - Gamma correction Enable"]
        #[inline(always)]
        pub fn gamma_correction_enable(&self) -> GAMMA_CORRECTION_ENABLE_R {
            GAMMA_CORRECTION_ENABLE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Text Cursor Blinking Enable"]
        #[inline(always)]
        #[must_use]
        pub fn text_cursor_blinking_enable(&mut self) -> TEXT_CURSOR_BLINKING_ENABLE_W<0> {
            TEXT_CURSOR_BLINKING_ENABLE_W::new(self)
        }
        #[doc = "Bit 1 - Text Cursor Enable"]
        #[inline(always)]
        #[must_use]
        pub fn text_cursor_enable(&mut self) -> TEXT_CURSOR_ENABLE_W<1> {
            TEXT_CURSOR_ENABLE_W::new(self)
        }
        #[doc = "Bits 2:3 - Graphic Cursor Selection"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor(&mut self) -> GRAPHIC_CURSOR_W<2> {
            GRAPHIC_CURSOR_W::new(self)
        }
        #[doc = "Bit 4 - Graphic Cursor Enable"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor_enable(&mut self) -> GRAPHIC_CURSOR_ENABLE_W<4> {
            GRAPHIC_CURSOR_ENABLE_W::new(self)
        }
        #[doc = "Bits 5:6 - Gamma table select for MPU write gamma data"]
        #[inline(always)]
        #[must_use]
        pub fn gamma_table(&mut self) -> GAMMA_TABLE_W<5> {
            GAMMA_TABLE_W::new(self)
        }
        #[doc = "Bit 7 - Gamma correction Enable"]
        #[inline(always)]
        #[must_use]
        pub fn gamma_correction_enable(&mut self) -> GAMMA_CORRECTION_ENABLE_W<7> {
            GAMMA_CORRECTION_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic / Text Cursor Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gtccr](index.html) module"]
    pub struct GTCCR;
    impl crate::RegisterSpec for GTCCR {
        const ADDRESS: u8 = 60u8;
    }
    #[doc = "`read()` method returns [gtccr::R](R) reader structure"]
    impl crate::Readable for GTCCR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gtccr::W](W) writer structure"]
    impl crate::Writable for GTCCR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GTCCR to value 0"]
    impl crate::Resettable for GTCCR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use btcr::BTCR;
#[doc = "Blink Time Control Register"]
pub mod btcr {
    #[doc = "Register `BTCR` reader"]
    pub struct R(crate::R<BTCR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTCR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTCR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTCR` writer"]
    pub struct W(crate::W<BTCR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTCR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTCR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_CURSOR_BLINK_TIME` reader - Text Cursor Blink Time Setting (Unit: Frame)"]
    pub type TEXT_CURSOR_BLINK_TIME_R = crate::FieldReader<u8>;
    #[doc = "Field `TEXT_CURSOR_BLINK_TIME` writer - Text Cursor Blink Time Setting (Unit: Frame)"]
    pub type TEXT_CURSOR_BLINK_TIME_W<'a, const O: u8> = crate::FieldWriter<'a, BTCR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Text Cursor Blink Time Setting (Unit: Frame)"]
        #[inline(always)]
        pub fn text_cursor_blink_time(&self) -> TEXT_CURSOR_BLINK_TIME_R {
            TEXT_CURSOR_BLINK_TIME_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Text Cursor Blink Time Setting (Unit: Frame)"]
        #[inline(always)]
        #[must_use]
        pub fn text_cursor_blink_time(&mut self) -> TEXT_CURSOR_BLINK_TIME_W<0> {
            TEXT_CURSOR_BLINK_TIME_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Blink Time Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [btcr](index.html) module"]
    pub struct BTCR;
    impl crate::RegisterSpec for BTCR {
        const ADDRESS: u8 = 61u8;
    }
    #[doc = "`read()` method returns [btcr::R](R) reader structure"]
    impl crate::Readable for BTCR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [btcr::W](W) writer structure"]
    impl crate::Writable for BTCR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTCR to value 0"]
    impl crate::Resettable for BTCR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use curhs::CURHS;
#[doc = "Text Cursor Horizontal Size Register Register"]
pub mod curhs {
    #[doc = "Register `CURHS` reader"]
    pub struct R(crate::R<CURHS>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CURHS>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CURHS>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CURHS>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CURHS` writer"]
    pub struct W(crate::W<CURHS>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CURHS>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CURHS>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CURHS>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_CURSOR_HORIZONTAL_SIZE` reader - Text Cursor Horizontal Size Setting"]
    pub type TEXT_CURSOR_HORIZONTAL_SIZE_R = crate::FieldReader<u8>;
    #[doc = "Field `TEXT_CURSOR_HORIZONTAL_SIZE` writer - Text Cursor Horizontal Size Setting"]
    pub type TEXT_CURSOR_HORIZONTAL_SIZE_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURHS, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Text Cursor Horizontal Size Setting"]
        #[inline(always)]
        pub fn text_cursor_horizontal_size(&self) -> TEXT_CURSOR_HORIZONTAL_SIZE_R {
            TEXT_CURSOR_HORIZONTAL_SIZE_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Text Cursor Horizontal Size Setting"]
        #[inline(always)]
        #[must_use]
        pub fn text_cursor_horizontal_size(&mut self) -> TEXT_CURSOR_HORIZONTAL_SIZE_W<0> {
            TEXT_CURSOR_HORIZONTAL_SIZE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Text Cursor Horizontal Size Register Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [curhs](index.html) module"]
    pub struct CURHS;
    impl crate::RegisterSpec for CURHS {
        const ADDRESS: u8 = 62u8;
    }
    #[doc = "`read()` method returns [curhs::R](R) reader structure"]
    impl crate::Readable for CURHS {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [curhs::W](W) writer structure"]
    impl crate::Writable for CURHS {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CURHS to value 0x07"]
    impl crate::Resettable for CURHS {
        const RESET_VALUE: u8 = 0x07;
    }
}
pub use curvs::CURVS;
#[doc = "Text Cursor Vertical Size Register Register"]
pub mod curvs {
    #[doc = "Register `CURVS` reader"]
    pub struct R(crate::R<CURVS>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CURVS>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CURVS>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CURVS>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CURVS` writer"]
    pub struct W(crate::W<CURVS>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CURVS>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CURVS>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CURVS>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_CURSOR_VERTICAL_SIZE` reader - Text Cursor Vertical Size Setting"]
    pub type TEXT_CURSOR_VERTICAL_SIZE_R = crate::FieldReader<u8>;
    #[doc = "Field `TEXT_CURSOR_VERTICAL_SIZE` writer - Text Cursor Vertical Size Setting"]
    pub type TEXT_CURSOR_VERTICAL_SIZE_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURVS, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Text Cursor Vertical Size Setting"]
        #[inline(always)]
        pub fn text_cursor_vertical_size(&self) -> TEXT_CURSOR_VERTICAL_SIZE_R {
            TEXT_CURSOR_VERTICAL_SIZE_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Text Cursor Vertical Size Setting"]
        #[inline(always)]
        #[must_use]
        pub fn text_cursor_vertical_size(&mut self) -> TEXT_CURSOR_VERTICAL_SIZE_W<0> {
            TEXT_CURSOR_VERTICAL_SIZE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Text Cursor Vertical Size Register Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [curvs](index.html) module"]
    pub struct CURVS;
    impl crate::RegisterSpec for CURVS {
        const ADDRESS: u8 = 63u8;
    }
    #[doc = "`read()` method returns [curvs::R](R) reader structure"]
    impl crate::Readable for CURVS {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [curvs::W](W) writer structure"]
    impl crate::Writable for CURVS {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CURVS to value 0"]
    impl crate::Resettable for CURVS {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gchp0::GCHP0;
#[doc = "Graphic Cursor Horizontal Position Register 0"]
pub mod gchp0 {
    #[doc = "Register `GCHP0` reader"]
    pub struct R(crate::R<GCHP0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GCHP0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GCHP0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GCHP0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GCHP0` writer"]
    pub struct W(crate::W<GCHP0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GCHP0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GCHP0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GCHP0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GRAPHIC_CURSOR_HORIZONTAL_LOCATION` reader - Graphic Cursor Horizontal Location"]
    pub type GRAPHIC_CURSOR_HORIZONTAL_LOCATION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_CURSOR_HORIZONTAL_LOCATION` writer - Graphic Cursor Horizontal Location"]
    pub type GRAPHIC_CURSOR_HORIZONTAL_LOCATION_W<'a, const O: u8> =
        crate::FieldWriter<'a, GCHP0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Graphic Cursor Horizontal Location"]
        #[inline(always)]
        pub fn graphic_cursor_horizontal_location(&self) -> GRAPHIC_CURSOR_HORIZONTAL_LOCATION_R {
            GRAPHIC_CURSOR_HORIZONTAL_LOCATION_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Graphic Cursor Horizontal Location"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor_horizontal_location(
            &mut self,
        ) -> GRAPHIC_CURSOR_HORIZONTAL_LOCATION_W<0> {
            GRAPHIC_CURSOR_HORIZONTAL_LOCATION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Cursor Horizontal Position Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gchp0](index.html) module"]
    pub struct GCHP0;
    impl crate::RegisterSpec for GCHP0 {
        const ADDRESS: u8 = 64u8;
    }
    #[doc = "`read()` method returns [gchp0::R](R) reader structure"]
    impl crate::Readable for GCHP0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gchp0::W](W) writer structure"]
    impl crate::Writable for GCHP0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GCHP0 to value 0"]
    impl crate::Resettable for GCHP0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gchp1::GCHP1;
#[doc = "Graphic Cursor Horizontal Position Register 1"]
pub mod gchp1 {
    #[doc = "Register `GCHP1` reader"]
    pub struct R(crate::R<GCHP1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GCHP1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GCHP1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GCHP1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GCHP1` writer"]
    pub struct W(crate::W<GCHP1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GCHP1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GCHP1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GCHP1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GRAPHIC_CURSOR_HORIZONTAL_LOCATION` reader - Graphic Cursor Horizontal Location"]
    pub type GRAPHIC_CURSOR_HORIZONTAL_LOCATION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_CURSOR_HORIZONTAL_LOCATION` writer - Graphic Cursor Horizontal Location"]
    pub type GRAPHIC_CURSOR_HORIZONTAL_LOCATION_W<'a, const O: u8> =
        crate::FieldWriter<'a, GCHP1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Graphic Cursor Horizontal Location"]
        #[inline(always)]
        pub fn graphic_cursor_horizontal_location(&self) -> GRAPHIC_CURSOR_HORIZONTAL_LOCATION_R {
            GRAPHIC_CURSOR_HORIZONTAL_LOCATION_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Graphic Cursor Horizontal Location"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor_horizontal_location(
            &mut self,
        ) -> GRAPHIC_CURSOR_HORIZONTAL_LOCATION_W<0> {
            GRAPHIC_CURSOR_HORIZONTAL_LOCATION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Cursor Horizontal Position Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gchp1](index.html) module"]
    pub struct GCHP1;
    impl crate::RegisterSpec for GCHP1 {
        const ADDRESS: u8 = 65u8;
    }
    #[doc = "`read()` method returns [gchp1::R](R) reader structure"]
    impl crate::Readable for GCHP1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gchp1::W](W) writer structure"]
    impl crate::Writable for GCHP1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GCHP1 to value 0"]
    impl crate::Resettable for GCHP1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gcvp0::GCVP0;
#[doc = "Graphic Cursor Vertical Position Register 0"]
pub mod gcvp0 {
    #[doc = "Register `GCVP0` reader"]
    pub struct R(crate::R<GCVP0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GCVP0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GCVP0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GCVP0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GCVP0` writer"]
    pub struct W(crate::W<GCVP0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GCVP0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GCVP0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GCVP0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GRAPHIC_CURSOR_VERTICAL_LOCATION` reader - Graphic Cursor Vertical Location"]
    pub type GRAPHIC_CURSOR_VERTICAL_LOCATION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_CURSOR_VERTICAL_LOCATION` writer - Graphic Cursor Vertical Location"]
    pub type GRAPHIC_CURSOR_VERTICAL_LOCATION_W<'a, const O: u8> =
        crate::FieldWriter<'a, GCVP0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Graphic Cursor Vertical Location"]
        #[inline(always)]
        pub fn graphic_cursor_vertical_location(&self) -> GRAPHIC_CURSOR_VERTICAL_LOCATION_R {
            GRAPHIC_CURSOR_VERTICAL_LOCATION_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Graphic Cursor Vertical Location"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor_vertical_location(
            &mut self,
        ) -> GRAPHIC_CURSOR_VERTICAL_LOCATION_W<0> {
            GRAPHIC_CURSOR_VERTICAL_LOCATION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Cursor Vertical Position Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gcvp0](index.html) module"]
    pub struct GCVP0;
    impl crate::RegisterSpec for GCVP0 {
        const ADDRESS: u8 = 66u8;
    }
    #[doc = "`read()` method returns [gcvp0::R](R) reader structure"]
    impl crate::Readable for GCVP0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gcvp0::W](W) writer structure"]
    impl crate::Writable for GCVP0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GCVP0 to value 0"]
    impl crate::Resettable for GCVP0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gcvp1::GCVP1;
#[doc = "Graphic Cursor Vertical Position Register 1"]
pub mod gcvp1 {
    #[doc = "Register `GCVP1` reader"]
    pub struct R(crate::R<GCVP1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GCVP1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GCVP1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GCVP1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GCVP1` writer"]
    pub struct W(crate::W<GCVP1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GCVP1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GCVP1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GCVP1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GRAPHIC_CURSOR_VERTICAL_LOCATION` reader - Graphic Cursor Vertical Location"]
    pub type GRAPHIC_CURSOR_VERTICAL_LOCATION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_CURSOR_VERTICAL_LOCATION` writer - Graphic Cursor Vertical Location"]
    pub type GRAPHIC_CURSOR_VERTICAL_LOCATION_W<'a, const O: u8> =
        crate::FieldWriter<'a, GCVP1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Graphic Cursor Vertical Location"]
        #[inline(always)]
        pub fn graphic_cursor_vertical_location(&self) -> GRAPHIC_CURSOR_VERTICAL_LOCATION_R {
            GRAPHIC_CURSOR_VERTICAL_LOCATION_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Graphic Cursor Vertical Location"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor_vertical_location(
            &mut self,
        ) -> GRAPHIC_CURSOR_VERTICAL_LOCATION_W<0> {
            GRAPHIC_CURSOR_VERTICAL_LOCATION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Cursor Vertical Position Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gcvp1](index.html) module"]
    pub struct GCVP1;
    impl crate::RegisterSpec for GCVP1 {
        const ADDRESS: u8 = 67u8;
    }
    #[doc = "`read()` method returns [gcvp1::R](R) reader structure"]
    impl crate::Readable for GCVP1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gcvp1::W](W) writer structure"]
    impl crate::Writable for GCVP1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GCVP1 to value 0"]
    impl crate::Resettable for GCVP1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gcc0::GCC0;
#[doc = "Graphic Cursor Color 0"]
pub mod gcc0 {
    #[doc = "Register `GCC0` reader"]
    pub struct R(crate::R<GCC0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GCC0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GCC0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GCC0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GCC0` writer"]
    pub struct W(crate::W<GCC0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GCC0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GCC0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GCC0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GRAPHIC_CURSOR_COLOR_0` reader - Graphic Cursor Color 0 | RGB Format \\[7:0\\]
= RRRGGGBB"]
    pub type GRAPHIC_CURSOR_COLOR_0_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_CURSOR_COLOR_0` writer - Graphic Cursor Color 0 | RGB Format \\[7:0\\]
= RRRGGGBB"]
    pub type GRAPHIC_CURSOR_COLOR_0_W<'a, const O: u8> = crate::FieldWriter<'a, GCC0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Graphic Cursor Color 0 | RGB Format \\[7:0\\]
= RRRGGGBB"]
        #[inline(always)]
        pub fn graphic_cursor_color_0(&self) -> GRAPHIC_CURSOR_COLOR_0_R {
            GRAPHIC_CURSOR_COLOR_0_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Graphic Cursor Color 0 | RGB Format \\[7:0\\]
= RRRGGGBB"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor_color_0(&mut self) -> GRAPHIC_CURSOR_COLOR_0_W<0> {
            GRAPHIC_CURSOR_COLOR_0_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Cursor Color 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gcc0](index.html) module"]
    pub struct GCC0;
    impl crate::RegisterSpec for GCC0 {
        const ADDRESS: u8 = 68u8;
    }
    #[doc = "`read()` method returns [gcc0::R](R) reader structure"]
    impl crate::Readable for GCC0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gcc0::W](W) writer structure"]
    impl crate::Writable for GCC0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GCC0 to value 0"]
    impl crate::Resettable for GCC0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gcc1::GCC1;
#[doc = "Graphic Cursor Color 1"]
pub mod gcc1 {
    #[doc = "Register `GCC1` reader"]
    pub struct R(crate::R<GCC1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GCC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GCC1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GCC1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GCC1` writer"]
    pub struct W(crate::W<GCC1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GCC1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GCC1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GCC1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GRAPHIC_CURSOR_COLOR_1` reader - Graphic Cursor Color 1 | RGB Format \\[7:0\\]
= RRRGGGBB"]
    pub type GRAPHIC_CURSOR_COLOR_1_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_CURSOR_COLOR_1` writer - Graphic Cursor Color 1 | RGB Format \\[7:0\\]
= RRRGGGBB"]
    pub type GRAPHIC_CURSOR_COLOR_1_W<'a, const O: u8> = crate::FieldWriter<'a, GCC1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Graphic Cursor Color 1 | RGB Format \\[7:0\\]
= RRRGGGBB"]
        #[inline(always)]
        pub fn graphic_cursor_color_1(&self) -> GRAPHIC_CURSOR_COLOR_1_R {
            GRAPHIC_CURSOR_COLOR_1_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Graphic Cursor Color 1 | RGB Format \\[7:0\\]
= RRRGGGBB"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_cursor_color_1(&mut self) -> GRAPHIC_CURSOR_COLOR_1_W<0> {
            GRAPHIC_CURSOR_COLOR_1_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Cursor Color 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gcc1](index.html) module"]
    pub struct GCC1;
    impl crate::RegisterSpec for GCC1 {
        const ADDRESS: u8 = 69u8;
    }
    #[doc = "`read()` method returns [gcc1::R](R) reader structure"]
    impl crate::Readable for GCC1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gcc1::W](W) writer structure"]
    impl crate::Writable for GCC1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GCC1 to value 0"]
    impl crate::Resettable for GCC1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cvssa0::CVSSA0;
#[doc = "Canvas Start address 0"]
pub mod cvssa0 {
    #[doc = "Register `CVSSA0` reader"]
    pub struct R(crate::R<CVSSA0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CVSSA0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CVSSA0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CVSSA0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CVSSA0` writer"]
    pub struct W(crate::W<CVSSA0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CVSSA0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CVSSA0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CVSSA0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CANVAS_START_ADDRESS` reader - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CANVAS_START_ADDRESS` writer - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_W<'a, const O: u8> = crate::FieldWriter<'a, CVSSA0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        pub fn canvas_start_address(&self) -> CANVAS_START_ADDRESS_R {
            CANVAS_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_start_address(&mut self) -> CANVAS_START_ADDRESS_W<0> {
            CANVAS_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Canvas Start address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvssa0](index.html) module"]
    pub struct CVSSA0;
    impl crate::RegisterSpec for CVSSA0 {
        const ADDRESS: u8 = 80u8;
    }
    #[doc = "`read()` method returns [cvssa0::R](R) reader structure"]
    impl crate::Readable for CVSSA0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cvssa0::W](W) writer structure"]
    impl crate::Writable for CVSSA0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CVSSA0 to value 0"]
    impl crate::Resettable for CVSSA0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cvssa1::CVSSA1;
#[doc = "Canvas Start address 1"]
pub mod cvssa1 {
    #[doc = "Register `CVSSA1` reader"]
    pub struct R(crate::R<CVSSA1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CVSSA1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CVSSA1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CVSSA1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CVSSA1` writer"]
    pub struct W(crate::W<CVSSA1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CVSSA1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CVSSA1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CVSSA1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CANVAS_START_ADDRESS` reader - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CANVAS_START_ADDRESS` writer - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_W<'a, const O: u8> = crate::FieldWriter<'a, CVSSA1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        pub fn canvas_start_address(&self) -> CANVAS_START_ADDRESS_R {
            CANVAS_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_start_address(&mut self) -> CANVAS_START_ADDRESS_W<0> {
            CANVAS_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Canvas Start address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvssa1](index.html) module"]
    pub struct CVSSA1;
    impl crate::RegisterSpec for CVSSA1 {
        const ADDRESS: u8 = 81u8;
    }
    #[doc = "`read()` method returns [cvssa1::R](R) reader structure"]
    impl crate::Readable for CVSSA1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cvssa1::W](W) writer structure"]
    impl crate::Writable for CVSSA1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CVSSA1 to value 0"]
    impl crate::Resettable for CVSSA1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cvssa2::CVSSA2;
#[doc = "Canvas Start address 2"]
pub mod cvssa2 {
    #[doc = "Register `CVSSA2` reader"]
    pub struct R(crate::R<CVSSA2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CVSSA2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CVSSA2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CVSSA2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CVSSA2` writer"]
    pub struct W(crate::W<CVSSA2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CVSSA2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CVSSA2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CVSSA2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CANVAS_START_ADDRESS` reader - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CANVAS_START_ADDRESS` writer - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_W<'a, const O: u8> = crate::FieldWriter<'a, CVSSA2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        pub fn canvas_start_address(&self) -> CANVAS_START_ADDRESS_R {
            CANVAS_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_start_address(&mut self) -> CANVAS_START_ADDRESS_W<0> {
            CANVAS_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Canvas Start address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvssa2](index.html) module"]
    pub struct CVSSA2;
    impl crate::RegisterSpec for CVSSA2 {
        const ADDRESS: u8 = 82u8;
    }
    #[doc = "`read()` method returns [cvssa2::R](R) reader structure"]
    impl crate::Readable for CVSSA2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cvssa2::W](W) writer structure"]
    impl crate::Writable for CVSSA2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CVSSA2 to value 0"]
    impl crate::Resettable for CVSSA2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cvssa3::CVSSA3;
#[doc = "Canvas Start address 3"]
pub mod cvssa3 {
    #[doc = "Register `CVSSA3` reader"]
    pub struct R(crate::R<CVSSA3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CVSSA3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CVSSA3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CVSSA3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CVSSA3` writer"]
    pub struct W(crate::W<CVSSA3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CVSSA3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CVSSA3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CVSSA3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CANVAS_START_ADDRESS` reader - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CANVAS_START_ADDRESS` writer - Start address of Canvas"]
    pub type CANVAS_START_ADDRESS_W<'a, const O: u8> = crate::FieldWriter<'a, CVSSA3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        pub fn canvas_start_address(&self) -> CANVAS_START_ADDRESS_R {
            CANVAS_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Start address of Canvas"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_start_address(&mut self) -> CANVAS_START_ADDRESS_W<0> {
            CANVAS_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Canvas Start address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvssa3](index.html) module"]
    pub struct CVSSA3;
    impl crate::RegisterSpec for CVSSA3 {
        const ADDRESS: u8 = 83u8;
    }
    #[doc = "`read()` method returns [cvssa3::R](R) reader structure"]
    impl crate::Readable for CVSSA3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cvssa3::W](W) writer structure"]
    impl crate::Writable for CVSSA3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CVSSA3 to value 0"]
    impl crate::Resettable for CVSSA3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cvs_imwth0::CVS_IMWTH0;
#[doc = "Canvas image width 0"]
pub mod cvs_imwth0 {
    #[doc = "Register `CVS_IMWTH0` reader"]
    pub struct R(crate::R<CVS_IMWTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CVS_IMWTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CVS_IMWTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CVS_IMWTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CVS_IMWTH0` writer"]
    pub struct W(crate::W<CVS_IMWTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CVS_IMWTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CVS_IMWTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CVS_IMWTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CANVAS_IMAGE_WIDTH` reader - Canvas image width"]
    pub type CANVAS_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `CANVAS_IMAGE_WIDTH` writer - Canvas image width"]
    pub type CANVAS_IMAGE_WIDTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, CVS_IMWTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Canvas image width"]
        #[inline(always)]
        pub fn canvas_image_width(&self) -> CANVAS_IMAGE_WIDTH_R {
            CANVAS_IMAGE_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Canvas image width"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_image_width(&mut self) -> CANVAS_IMAGE_WIDTH_W<0> {
            CANVAS_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Canvas image width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvs_imwth0](index.html) module"]
    pub struct CVS_IMWTH0;
    impl crate::RegisterSpec for CVS_IMWTH0 {
        const ADDRESS: u8 = 84u8;
    }
    #[doc = "`read()` method returns [cvs_imwth0::R](R) reader structure"]
    impl crate::Readable for CVS_IMWTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cvs_imwth0::W](W) writer structure"]
    impl crate::Writable for CVS_IMWTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CVS_IMWTH0 to value 0"]
    impl crate::Resettable for CVS_IMWTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cvs_imwth1::CVS_IMWTH1;
#[doc = "Canvas image width 1"]
pub mod cvs_imwth1 {
    #[doc = "Register `CVS_IMWTH1` reader"]
    pub struct R(crate::R<CVS_IMWTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CVS_IMWTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CVS_IMWTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CVS_IMWTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CVS_IMWTH1` writer"]
    pub struct W(crate::W<CVS_IMWTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CVS_IMWTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CVS_IMWTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CVS_IMWTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CANVAS_IMAGE_WIDTH` reader - Canvas image width"]
    pub type CANVAS_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `CANVAS_IMAGE_WIDTH` writer - Canvas image width"]
    pub type CANVAS_IMAGE_WIDTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, CVS_IMWTH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Canvas image width"]
        #[inline(always)]
        pub fn canvas_image_width(&self) -> CANVAS_IMAGE_WIDTH_R {
            CANVAS_IMAGE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Canvas image width"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_image_width(&mut self) -> CANVAS_IMAGE_WIDTH_W<0> {
            CANVAS_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Canvas image width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvs_imwth1](index.html) module"]
    pub struct CVS_IMWTH1;
    impl crate::RegisterSpec for CVS_IMWTH1 {
        const ADDRESS: u8 = 85u8;
    }
    #[doc = "`read()` method returns [cvs_imwth1::R](R) reader structure"]
    impl crate::Readable for CVS_IMWTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cvs_imwth1::W](W) writer structure"]
    impl crate::Writable for CVS_IMWTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CVS_IMWTH1 to value 0"]
    impl crate::Resettable for CVS_IMWTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use awul_x0::AWUL_X0;
#[doc = "Active Window Upper-Left corner X-coordinates 0"]
pub mod awul_x0 {
    #[doc = "Register `AWUL_X0` reader"]
    pub struct R(crate::R<AWUL_X0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AWUL_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AWUL_X0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AWUL_X0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AWUL_X0` writer"]
    pub struct W(crate::W<AWUL_X0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AWUL_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AWUL_X0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AWUL_X0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_X` reader - Active Window Upper-Left corner X-coordinates"]
    pub type ACTIVE_WINDOW_X_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_X` writer - Active Window Upper-Left corner X-coordinates"]
    pub type ACTIVE_WINDOW_X_W<'a, const O: u8> = crate::FieldWriter<'a, AWUL_X0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Active Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn active_window_x(&self) -> ACTIVE_WINDOW_X_R {
            ACTIVE_WINDOW_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Active Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_x(&mut self) -> ACTIVE_WINDOW_X_W<0> {
            ACTIVE_WINDOW_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awul_x0](index.html) module"]
    pub struct AWUL_X0;
    impl crate::RegisterSpec for AWUL_X0 {
        const ADDRESS: u8 = 86u8;
    }
    #[doc = "`read()` method returns [awul_x0::R](R) reader structure"]
    impl crate::Readable for AWUL_X0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [awul_x0::W](W) writer structure"]
    impl crate::Writable for AWUL_X0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AWUL_X0 to value 0"]
    impl crate::Resettable for AWUL_X0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use awul_x1::AWUL_X1;
#[doc = "Active Window Upper-Left corner X-coordinates 1"]
pub mod awul_x1 {
    #[doc = "Register `AWUL_X1` reader"]
    pub struct R(crate::R<AWUL_X1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AWUL_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AWUL_X1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AWUL_X1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AWUL_X1` writer"]
    pub struct W(crate::W<AWUL_X1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AWUL_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AWUL_X1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AWUL_X1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_X` reader - Active Window Upper-Left corner X-coordinates"]
    pub type ACTIVE_WINDOW_X_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_X` writer - Active Window Upper-Left corner X-coordinates"]
    pub type ACTIVE_WINDOW_X_W<'a, const O: u8> = crate::FieldWriter<'a, AWUL_X1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Active Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        pub fn active_window_x(&self) -> ACTIVE_WINDOW_X_R {
            ACTIVE_WINDOW_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Active Window Upper-Left corner X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_x(&mut self) -> ACTIVE_WINDOW_X_W<0> {
            ACTIVE_WINDOW_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awul_x1](index.html) module"]
    pub struct AWUL_X1;
    impl crate::RegisterSpec for AWUL_X1 {
        const ADDRESS: u8 = 87u8;
    }
    #[doc = "`read()` method returns [awul_x1::R](R) reader structure"]
    impl crate::Readable for AWUL_X1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [awul_x1::W](W) writer structure"]
    impl crate::Writable for AWUL_X1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AWUL_X1 to value 0"]
    impl crate::Resettable for AWUL_X1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use awul_y0::AWUL_Y0;
#[doc = "Active Window Upper-Left corner Y-coordinates 0"]
pub mod awul_y0 {
    #[doc = "Register `AWUL_Y0` reader"]
    pub struct R(crate::R<AWUL_Y0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AWUL_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AWUL_Y0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AWUL_Y0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AWUL_Y0` writer"]
    pub struct W(crate::W<AWUL_Y0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AWUL_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AWUL_Y0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AWUL_Y0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_Y` reader - Active Window Upper-Left corner Y-coordinates"]
    pub type ACTIVE_WINDOW_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_Y` writer - Active Window Upper-Left corner Y-coordinates"]
    pub type ACTIVE_WINDOW_Y_W<'a, const O: u8> = crate::FieldWriter<'a, AWUL_Y0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Active Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn active_window_y(&self) -> ACTIVE_WINDOW_Y_R {
            ACTIVE_WINDOW_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Active Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_y(&mut self) -> ACTIVE_WINDOW_Y_W<0> {
            ACTIVE_WINDOW_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awul_y0](index.html) module"]
    pub struct AWUL_Y0;
    impl crate::RegisterSpec for AWUL_Y0 {
        const ADDRESS: u8 = 88u8;
    }
    #[doc = "`read()` method returns [awul_y0::R](R) reader structure"]
    impl crate::Readable for AWUL_Y0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [awul_y0::W](W) writer structure"]
    impl crate::Writable for AWUL_Y0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AWUL_Y0 to value 0"]
    impl crate::Resettable for AWUL_Y0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use awul_y1::AWUL_Y1;
#[doc = "Active Window Upper-Left corner Y-coordinates 1"]
pub mod awul_y1 {
    #[doc = "Register `AWUL_Y1` reader"]
    pub struct R(crate::R<AWUL_Y1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AWUL_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AWUL_Y1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AWUL_Y1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AWUL_Y1` writer"]
    pub struct W(crate::W<AWUL_Y1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AWUL_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AWUL_Y1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AWUL_Y1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_Y` reader - Active Window Upper-Left corner Y-coordinates"]
    pub type ACTIVE_WINDOW_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_Y` writer - Active Window Upper-Left corner Y-coordinates"]
    pub type ACTIVE_WINDOW_Y_W<'a, const O: u8> = crate::FieldWriter<'a, AWUL_Y1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Active Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        pub fn active_window_y(&self) -> ACTIVE_WINDOW_Y_R {
            ACTIVE_WINDOW_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Active Window Upper-Left corner Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_y(&mut self) -> ACTIVE_WINDOW_Y_W<0> {
            ACTIVE_WINDOW_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awul_y1](index.html) module"]
    pub struct AWUL_Y1;
    impl crate::RegisterSpec for AWUL_Y1 {
        const ADDRESS: u8 = 89u8;
    }
    #[doc = "`read()` method returns [awul_y1::R](R) reader structure"]
    impl crate::Readable for AWUL_Y1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [awul_y1::W](W) writer structure"]
    impl crate::Writable for AWUL_Y1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AWUL_Y1 to value 0"]
    impl crate::Resettable for AWUL_Y1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use aw_wth0::AW_WTH0;
#[doc = "Active Window Width 0"]
pub mod aw_wth0 {
    #[doc = "Register `AW_WTH0` reader"]
    pub struct R(crate::R<AW_WTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AW_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AW_WTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AW_WTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AW_WTH0` writer"]
    pub struct W(crate::W<AW_WTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AW_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AW_WTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AW_WTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_WIDTH` reader - Active Window Width"]
    pub type ACTIVE_WINDOW_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_WIDTH` writer - Active Window Width"]
    pub type ACTIVE_WINDOW_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, AW_WTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Active Window Width"]
        #[inline(always)]
        pub fn active_window_width(&self) -> ACTIVE_WINDOW_WIDTH_R {
            ACTIVE_WINDOW_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Active Window Width"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_width(&mut self) -> ACTIVE_WINDOW_WIDTH_W<0> {
            ACTIVE_WINDOW_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aw_wth0](index.html) module"]
    pub struct AW_WTH0;
    impl crate::RegisterSpec for AW_WTH0 {
        const ADDRESS: u8 = 90u8;
    }
    #[doc = "`read()` method returns [aw_wth0::R](R) reader structure"]
    impl crate::Readable for AW_WTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [aw_wth0::W](W) writer structure"]
    impl crate::Writable for AW_WTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AW_WTH0 to value 0"]
    impl crate::Resettable for AW_WTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use aw_wth1::AW_WTH1;
#[doc = "Active Window Width 1"]
pub mod aw_wth1 {
    #[doc = "Register `AW_WTH1` reader"]
    pub struct R(crate::R<AW_WTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AW_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AW_WTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AW_WTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AW_WTH1` writer"]
    pub struct W(crate::W<AW_WTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AW_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AW_WTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AW_WTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_WIDTH` reader - Active Window Width"]
    pub type ACTIVE_WINDOW_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_WIDTH` writer - Active Window Width"]
    pub type ACTIVE_WINDOW_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, AW_WTH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Active Window Width"]
        #[inline(always)]
        pub fn active_window_width(&self) -> ACTIVE_WINDOW_WIDTH_R {
            ACTIVE_WINDOW_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Active Window Width"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_width(&mut self) -> ACTIVE_WINDOW_WIDTH_W<0> {
            ACTIVE_WINDOW_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aw_wth1](index.html) module"]
    pub struct AW_WTH1;
    impl crate::RegisterSpec for AW_WTH1 {
        const ADDRESS: u8 = 91u8;
    }
    #[doc = "`read()` method returns [aw_wth1::R](R) reader structure"]
    impl crate::Readable for AW_WTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [aw_wth1::W](W) writer structure"]
    impl crate::Writable for AW_WTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AW_WTH1 to value 0"]
    impl crate::Resettable for AW_WTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use aw_ht0::AW_HT0;
#[doc = "Active Window Height 0"]
pub mod aw_ht0 {
    #[doc = "Register `AW_HT0` reader"]
    pub struct R(crate::R<AW_HT0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AW_HT0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AW_HT0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AW_HT0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AW_HT0` writer"]
    pub struct W(crate::W<AW_HT0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AW_HT0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AW_HT0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AW_HT0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_HEIGHT` reader - Active Window Height"]
    pub type ACTIVE_WINDOW_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_HEIGHT` writer - Active Window Height"]
    pub type ACTIVE_WINDOW_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, AW_HT0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Active Window Height"]
        #[inline(always)]
        pub fn active_window_height(&self) -> ACTIVE_WINDOW_HEIGHT_R {
            ACTIVE_WINDOW_HEIGHT_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Active Window Height"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_height(&mut self) -> ACTIVE_WINDOW_HEIGHT_W<0> {
            ACTIVE_WINDOW_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Height 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aw_ht0](index.html) module"]
    pub struct AW_HT0;
    impl crate::RegisterSpec for AW_HT0 {
        const ADDRESS: u8 = 92u8;
    }
    #[doc = "`read()` method returns [aw_ht0::R](R) reader structure"]
    impl crate::Readable for AW_HT0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [aw_ht0::W](W) writer structure"]
    impl crate::Writable for AW_HT0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AW_HT0 to value 0"]
    impl crate::Resettable for AW_HT0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use aw_ht1::AW_HT1;
#[doc = "Active Window Height 1"]
pub mod aw_ht1 {
    #[doc = "Register `AW_HT1` reader"]
    pub struct R(crate::R<AW_HT1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AW_HT1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AW_HT1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AW_HT1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AW_HT1` writer"]
    pub struct W(crate::W<AW_HT1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AW_HT1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AW_HT1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AW_HT1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ACTIVE_WINDOW_HEIGHT` reader - Active Window Height"]
    pub type ACTIVE_WINDOW_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `ACTIVE_WINDOW_HEIGHT` writer - Active Window Height"]
    pub type ACTIVE_WINDOW_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, AW_HT1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Active Window Height"]
        #[inline(always)]
        pub fn active_window_height(&self) -> ACTIVE_WINDOW_HEIGHT_R {
            ACTIVE_WINDOW_HEIGHT_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Active Window Height"]
        #[inline(always)]
        #[must_use]
        pub fn active_window_height(&mut self) -> ACTIVE_WINDOW_HEIGHT_W<0> {
            ACTIVE_WINDOW_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Active Window Height 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aw_ht1](index.html) module"]
    pub struct AW_HT1;
    impl crate::RegisterSpec for AW_HT1 {
        const ADDRESS: u8 = 93u8;
    }
    #[doc = "`read()` method returns [aw_ht1::R](R) reader structure"]
    impl crate::Readable for AW_HT1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [aw_ht1::W](W) writer structure"]
    impl crate::Writable for AW_HT1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AW_HT1 to value 0"]
    impl crate::Resettable for AW_HT1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use aw_color::AW_COLOR;
#[doc = "Color Depth of Canvas &amp; Active Window"]
pub mod aw_color {
    #[doc = "Register `AW_COLOR` reader"]
    pub struct R(crate::R<AW_COLOR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<AW_COLOR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<AW_COLOR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<AW_COLOR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `AW_COLOR` writer"]
    pub struct W(crate::W<AW_COLOR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<AW_COLOR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<AW_COLOR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<AW_COLOR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH` reader - Canvas image color depth in Block Mode"]
    pub type CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_R =
        crate::FieldReader<CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A>;
    #[doc = "Canvas image color depth in Block Mode\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A {
        #[doc = "0: 8bpp"]
        DEPTH_8BPP = 0,
        #[doc = "1: 16bpp"]
        DEPTH_16BPP = 1,
        #[doc = "2: 24bpp"]
        DEPTH_24BPP = 2,
    }
    impl From<CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A> for u8 {
        #[inline(always)]
        fn from(variant: CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A) -> Self {
            variant as _
        }
    }
    impl CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> Option<CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A> {
            match self.bits {
                0 => Some(CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_8BPP),
                1 => Some(CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_16BPP),
                2 => Some(CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_24BPP),
                _ => None,
            }
        }
        #[doc = "Checks if the value of the field is `DEPTH_8BPP`"]
        #[inline(always)]
        pub fn is_depth_8bpp(&self) -> bool {
            *self == CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_8BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_16BPP`"]
        #[inline(always)]
        pub fn is_depth_16bpp(&self) -> bool {
            *self == CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_16BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_24BPP`"]
        #[inline(always)]
        pub fn is_depth_24bpp(&self) -> bool {
            *self == CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_24BPP
        }
    }
    #[doc = "Field `CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH` writer - Canvas image color depth in Block Mode"]
    pub type CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, AW_COLOR, u8, CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A, 2, O>;
    impl<'a, const O: u8> CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_W<'a, O> {
        #[doc = "8bpp"]
        #[inline(always)]
        pub fn depth_8bpp(self) -> &'a mut W {
            self.variant(CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_8BPP)
        }
        #[doc = "16bpp"]
        #[inline(always)]
        pub fn depth_16bpp(self) -> &'a mut W {
            self.variant(CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_16BPP)
        }
        #[doc = "24bpp"]
        #[inline(always)]
        pub fn depth_24bpp(self) -> &'a mut W {
            self.variant(CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_A::DEPTH_24BPP)
        }
    }
    #[doc = "Field `CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH` reader - Canvas memory R/W data width in Linear Mode"]
    pub type CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_R =
        crate::BitReader<CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A>;
    #[doc = "Canvas memory R/W data width in Linear Mode\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A {
        #[doc = "0: 8-bits memory data read/write"]
        WIDTH_8BIT = 0,
        #[doc = "1: 16-bits memory data read/write"]
        WIDTH_16BIT = 1,
    }
    impl From<CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A> for bool {
        #[inline(always)]
        fn from(variant: CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A) -> Self {
            variant as u8 != 0
        }
    }
    impl CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A {
            match self.bits {
                false => CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A::WIDTH_8BIT,
                true => CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A::WIDTH_16BIT,
            }
        }
        #[doc = "Checks if the value of the field is `WIDTH_8BIT`"]
        #[inline(always)]
        pub fn is_width_8bit(&self) -> bool {
            *self == CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A::WIDTH_8BIT
        }
        #[doc = "Checks if the value of the field is `WIDTH_16BIT`"]
        #[inline(always)]
        pub fn is_width_16bit(&self) -> bool {
            *self == CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A::WIDTH_16BIT
        }
    }
    #[doc = "Field `CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH` writer - Canvas memory R/W data width in Linear Mode"]
    pub type CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_W<'a, const O: u8> =
        crate::BitWriter<'a, AW_COLOR, CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A, O>;
    impl<'a, const O: u8> CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_W<'a, O> {
        #[doc = "8-bits memory data read/write"]
        #[inline(always)]
        pub fn width_8bit(self) -> &'a mut W {
            self.variant(CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A::WIDTH_8BIT)
        }
        #[doc = "16-bits memory data read/write"]
        #[inline(always)]
        pub fn width_16bit(self) -> &'a mut W {
            self.variant(CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_A::WIDTH_16BIT)
        }
    }
    #[doc = "Field `CANVAS_ADDRESSING_MODE` reader - Canvas addressing mode"]
    pub type CANVAS_ADDRESSING_MODE_R = crate::BitReader<CANVAS_ADDRESSING_MODE_A>;
    #[doc = "Canvas addressing mode\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum CANVAS_ADDRESSING_MODE_A {
        #[doc = "0: Block mode (X/Y coordinate addressing)"]
        BLOCK = 0,
        #[doc = "1: Linear mode"]
        LINEAR = 1,
    }
    impl From<CANVAS_ADDRESSING_MODE_A> for bool {
        #[inline(always)]
        fn from(variant: CANVAS_ADDRESSING_MODE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl CANVAS_ADDRESSING_MODE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CANVAS_ADDRESSING_MODE_A {
            match self.bits {
                false => CANVAS_ADDRESSING_MODE_A::BLOCK,
                true => CANVAS_ADDRESSING_MODE_A::LINEAR,
            }
        }
        #[doc = "Checks if the value of the field is `BLOCK`"]
        #[inline(always)]
        pub fn is_block(&self) -> bool {
            *self == CANVAS_ADDRESSING_MODE_A::BLOCK
        }
        #[doc = "Checks if the value of the field is `LINEAR`"]
        #[inline(always)]
        pub fn is_linear(&self) -> bool {
            *self == CANVAS_ADDRESSING_MODE_A::LINEAR
        }
    }
    #[doc = "Field `CANVAS_ADDRESSING_MODE` writer - Canvas addressing mode"]
    pub type CANVAS_ADDRESSING_MODE_W<'a, const O: u8> =
        crate::BitWriter<'a, AW_COLOR, CANVAS_ADDRESSING_MODE_A, O>;
    impl<'a, const O: u8> CANVAS_ADDRESSING_MODE_W<'a, O> {
        #[doc = "Block mode (X/Y coordinate addressing)"]
        #[inline(always)]
        pub fn block(self) -> &'a mut W {
            self.variant(CANVAS_ADDRESSING_MODE_A::BLOCK)
        }
        #[doc = "Linear mode"]
        #[inline(always)]
        pub fn linear(self) -> &'a mut W {
            self.variant(CANVAS_ADDRESSING_MODE_A::LINEAR)
        }
    }
    impl R {
        #[doc = "Bits 0:1 - Canvas image color depth in Block Mode"]
        #[inline(always)]
        pub fn canvas_image_block_mode_color_depth(&self) -> CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_R {
            CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_R::new(self.bits & 3)
        }
        #[doc = "Bit 0 - Canvas memory R/W data width in Linear Mode"]
        #[inline(always)]
        pub fn canvas_image_linear_mode_data_width(&self) -> CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_R {
            CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 2 - Canvas addressing mode"]
        #[inline(always)]
        pub fn canvas_addressing_mode(&self) -> CANVAS_ADDRESSING_MODE_R {
            CANVAS_ADDRESSING_MODE_R::new(((self.bits >> 2) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Canvas image color depth in Block Mode"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_image_block_mode_color_depth(
            &mut self,
        ) -> CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_W<0> {
            CANVAS_IMAGE_BLOCK_MODE_COLOR_DEPTH_W::new(self)
        }
        #[doc = "Bit 0 - Canvas memory R/W data width in Linear Mode"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_image_linear_mode_data_width(
            &mut self,
        ) -> CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_W<0> {
            CANVAS_IMAGE_LINEAR_MODE_DATA_WIDTH_W::new(self)
        }
        #[doc = "Bit 2 - Canvas addressing mode"]
        #[inline(always)]
        #[must_use]
        pub fn canvas_addressing_mode(&mut self) -> CANVAS_ADDRESSING_MODE_W<2> {
            CANVAS_ADDRESSING_MODE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Color Depth of Canvas &amp; Active Window\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aw_color](index.html) module"]
    pub struct AW_COLOR;
    impl crate::RegisterSpec for AW_COLOR {
        const ADDRESS: u8 = 94u8;
    }
    #[doc = "`read()` method returns [aw_color::R](R) reader structure"]
    impl crate::Readable for AW_COLOR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [aw_color::W](W) writer structure"]
    impl crate::Writable for AW_COLOR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets AW_COLOR to value 0"]
    impl crate::Resettable for AW_COLOR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use curh0::CURH0;
#[doc = "Graphic Read/Write position Horizontal Position Register 0"]
pub mod curh0 {
    #[doc = "Register `CURH0` reader"]
    pub struct R(crate::R<CURH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CURH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CURH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CURH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CURH0` writer"]
    pub struct W(crate::W<CURH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CURH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CURH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CURH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` reader - Memory Read/Write Linear mode address \\[7:0\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` writer - Memory Read/Write Linear mode address \\[7:0\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURH0, u8, u8, 8, O>;
    #[doc = "Field `GRAPHIC_READ_WRITE_HORIZONTAL_POSITION` reader - Graphic Read/Write Block mode horizontal position"]
    pub type GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_READ_WRITE_HORIZONTAL_POSITION` writer - Graphic Read/Write Block mode horizontal position"]
    pub type GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[7:0\\]"]
        #[inline(always)]
        pub fn memory_read_write_address(&self) -> MEMORY_READ_WRITE_ADDRESS_R {
            MEMORY_READ_WRITE_ADDRESS_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - Graphic Read/Write Block mode horizontal position"]
        #[inline(always)]
        pub fn graphic_read_write_horizontal_position(
            &self,
        ) -> GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_R {
            GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[7:0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn memory_read_write_address(&mut self) -> MEMORY_READ_WRITE_ADDRESS_W<0> {
            MEMORY_READ_WRITE_ADDRESS_W::new(self)
        }
        #[doc = "Bits 0:7 - Graphic Read/Write Block mode horizontal position"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_read_write_horizontal_position(
            &mut self,
        ) -> GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_W<0> {
            GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Read/Write position Horizontal Position Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [curh0](index.html) module"]
    pub struct CURH0;
    impl crate::RegisterSpec for CURH0 {
        const ADDRESS: u8 = 95u8;
    }
    #[doc = "`read()` method returns [curh0::R](R) reader structure"]
    impl crate::Readable for CURH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [curh0::W](W) writer structure"]
    impl crate::Writable for CURH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CURH0 to value 0"]
    impl crate::Resettable for CURH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use curh1::CURH1;
#[doc = "Graphic Read/Write position Horizontal Position Register 1"]
pub mod curh1 {
    #[doc = "Register `CURH1` reader"]
    pub struct R(crate::R<CURH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CURH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CURH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CURH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CURH1` writer"]
    pub struct W(crate::W<CURH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CURH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CURH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CURH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` reader - Memory Read/Write Linear mode address \\[15:8\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` writer - Memory Read/Write Linear mode address \\[15:8\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURH1, u8, u8, 8, O>;
    #[doc = "Field `GRAPHIC_READ_WRITE_HORIZONTAL_POSITION` reader - Graphic Read/Write Block mode horizontal position"]
    pub type GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_READ_WRITE_HORIZONTAL_POSITION` writer - Graphic Read/Write Block mode horizontal position"]
    pub type GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[15:8\\]"]
        #[inline(always)]
        pub fn memory_read_write_address(&self) -> MEMORY_READ_WRITE_ADDRESS_R {
            MEMORY_READ_WRITE_ADDRESS_R::new(self.bits)
        }
        #[doc = "Bits 0:4 - Graphic Read/Write Block mode horizontal position"]
        #[inline(always)]
        pub fn graphic_read_write_horizontal_position(
            &self,
        ) -> GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_R {
            GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[15:8\\]"]
        #[inline(always)]
        #[must_use]
        pub fn memory_read_write_address(&mut self) -> MEMORY_READ_WRITE_ADDRESS_W<0> {
            MEMORY_READ_WRITE_ADDRESS_W::new(self)
        }
        #[doc = "Bits 0:4 - Graphic Read/Write Block mode horizontal position"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_read_write_horizontal_position(
            &mut self,
        ) -> GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_W<0> {
            GRAPHIC_READ_WRITE_HORIZONTAL_POSITION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Read/Write position Horizontal Position Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [curh1](index.html) module"]
    pub struct CURH1;
    impl crate::RegisterSpec for CURH1 {
        const ADDRESS: u8 = 96u8;
    }
    #[doc = "`read()` method returns [curh1::R](R) reader structure"]
    impl crate::Readable for CURH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [curh1::W](W) writer structure"]
    impl crate::Writable for CURH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CURH1 to value 0"]
    impl crate::Resettable for CURH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use curv0::CURV0;
#[doc = "Graphic Read/Write position Vertical Position Register 0"]
pub mod curv0 {
    #[doc = "Register `CURV0` reader"]
    pub struct R(crate::R<CURV0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CURV0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CURV0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CURV0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CURV0` writer"]
    pub struct W(crate::W<CURV0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CURV0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CURV0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CURV0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` reader - Memory Read/Write Linear mode address \\[23:16\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` writer - Memory Read/Write Linear mode address \\[23:16\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURV0, u8, u8, 8, O>;
    #[doc = "Field `GRAPHIC_READ_WRITE_VERTICAL_POSITION` reader - Graphic Read/Write Block mode vertical position"]
    pub type GRAPHIC_READ_WRITE_VERTICAL_POSITION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_READ_WRITE_VERTICAL_POSITION` writer - Graphic Read/Write Block mode vertical position"]
    pub type GRAPHIC_READ_WRITE_VERTICAL_POSITION_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURV0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[23:16\\]"]
        #[inline(always)]
        pub fn memory_read_write_address(&self) -> MEMORY_READ_WRITE_ADDRESS_R {
            MEMORY_READ_WRITE_ADDRESS_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - Graphic Read/Write Block mode vertical position"]
        #[inline(always)]
        pub fn graphic_read_write_vertical_position(
            &self,
        ) -> GRAPHIC_READ_WRITE_VERTICAL_POSITION_R {
            GRAPHIC_READ_WRITE_VERTICAL_POSITION_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[23:16\\]"]
        #[inline(always)]
        #[must_use]
        pub fn memory_read_write_address(&mut self) -> MEMORY_READ_WRITE_ADDRESS_W<0> {
            MEMORY_READ_WRITE_ADDRESS_W::new(self)
        }
        #[doc = "Bits 0:7 - Graphic Read/Write Block mode vertical position"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_read_write_vertical_position(
            &mut self,
        ) -> GRAPHIC_READ_WRITE_VERTICAL_POSITION_W<0> {
            GRAPHIC_READ_WRITE_VERTICAL_POSITION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Read/Write position Vertical Position Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [curv0](index.html) module"]
    pub struct CURV0;
    impl crate::RegisterSpec for CURV0 {
        const ADDRESS: u8 = 97u8;
    }
    #[doc = "`read()` method returns [curv0::R](R) reader structure"]
    impl crate::Readable for CURV0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [curv0::W](W) writer structure"]
    impl crate::Writable for CURV0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CURV0 to value 0"]
    impl crate::Resettable for CURV0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use curv1::CURV1;
#[doc = "Graphic Read/Write position Vertical Position Register 1"]
pub mod curv1 {
    #[doc = "Register `CURV1` reader"]
    pub struct R(crate::R<CURV1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CURV1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CURV1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CURV1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CURV1` writer"]
    pub struct W(crate::W<CURV1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CURV1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CURV1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CURV1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` reader - Memory Read/Write Linear mode address \\[31:24\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `MEMORY_READ_WRITE_ADDRESS` writer - Memory Read/Write Linear mode address \\[31:24\\]"]
    pub type MEMORY_READ_WRITE_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURV1, u8, u8, 8, O>;
    #[doc = "Field `GRAPHIC_READ_WRITE_VERTICAL_POSITION` reader - Graphic Read/Write Block mode vertical position"]
    pub type GRAPHIC_READ_WRITE_VERTICAL_POSITION_R = crate::FieldReader<u8>;
    #[doc = "Field `GRAPHIC_READ_WRITE_VERTICAL_POSITION` writer - Graphic Read/Write Block mode vertical position"]
    pub type GRAPHIC_READ_WRITE_VERTICAL_POSITION_W<'a, const O: u8> =
        crate::FieldWriter<'a, CURV1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[31:24\\]"]
        #[inline(always)]
        pub fn memory_read_write_address(&self) -> MEMORY_READ_WRITE_ADDRESS_R {
            MEMORY_READ_WRITE_ADDRESS_R::new(self.bits)
        }
        #[doc = "Bits 0:4 - Graphic Read/Write Block mode vertical position"]
        #[inline(always)]
        pub fn graphic_read_write_vertical_position(
            &self,
        ) -> GRAPHIC_READ_WRITE_VERTICAL_POSITION_R {
            GRAPHIC_READ_WRITE_VERTICAL_POSITION_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Memory Read/Write Linear mode address \\[31:24\\]"]
        #[inline(always)]
        #[must_use]
        pub fn memory_read_write_address(&mut self) -> MEMORY_READ_WRITE_ADDRESS_W<0> {
            MEMORY_READ_WRITE_ADDRESS_W::new(self)
        }
        #[doc = "Bits 0:4 - Graphic Read/Write Block mode vertical position"]
        #[inline(always)]
        #[must_use]
        pub fn graphic_read_write_vertical_position(
            &mut self,
        ) -> GRAPHIC_READ_WRITE_VERTICAL_POSITION_W<0> {
            GRAPHIC_READ_WRITE_VERTICAL_POSITION_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Graphic Read/Write position Vertical Position Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [curv1](index.html) module"]
    pub struct CURV1;
    impl crate::RegisterSpec for CURV1 {
        const ADDRESS: u8 = 98u8;
    }
    #[doc = "`read()` method returns [curv1::R](R) reader structure"]
    impl crate::Readable for CURV1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [curv1::W](W) writer structure"]
    impl crate::Writable for CURV1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CURV1 to value 0"]
    impl crate::Resettable for CURV1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use f_curx0::F_CURX0;
#[doc = "Text Write X-coordinates Register 0"]
pub mod f_curx0 {
    #[doc = "Register `F_CURX0` reader"]
    pub struct R(crate::R<F_CURX0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<F_CURX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<F_CURX0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<F_CURX0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `F_CURX0` writer"]
    pub struct W(crate::W<F_CURX0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<F_CURX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<F_CURX0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<F_CURX0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_WRITE_X` reader - Text Write X-coordinates"]
    pub type TEXT_WRITE_X_R = crate::FieldReader<u8>;
    #[doc = "Field `TEXT_WRITE_X` writer - Text Write X-coordinates"]
    pub type TEXT_WRITE_X_W<'a, const O: u8> = crate::FieldWriter<'a, F_CURX0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Text Write X-coordinates"]
        #[inline(always)]
        pub fn text_write_x(&self) -> TEXT_WRITE_X_R {
            TEXT_WRITE_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Text Write X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn text_write_x(&mut self) -> TEXT_WRITE_X_W<0> {
            TEXT_WRITE_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Text Write X-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [f_curx0](index.html) module"]
    pub struct F_CURX0;
    impl crate::RegisterSpec for F_CURX0 {
        const ADDRESS: u8 = 99u8;
    }
    #[doc = "`read()` method returns [f_curx0::R](R) reader structure"]
    impl crate::Readable for F_CURX0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [f_curx0::W](W) writer structure"]
    impl crate::Writable for F_CURX0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets F_CURX0 to value 0"]
    impl crate::Resettable for F_CURX0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use f_curx1::F_CURX1;
#[doc = "Text Write X-coordinates Register 1"]
pub mod f_curx1 {
    #[doc = "Register `F_CURX1` reader"]
    pub struct R(crate::R<F_CURX1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<F_CURX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<F_CURX1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<F_CURX1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `F_CURX1` writer"]
    pub struct W(crate::W<F_CURX1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<F_CURX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<F_CURX1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<F_CURX1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_WRITE_X` reader - Text Write X-coordinates"]
    pub type TEXT_WRITE_X_R = crate::FieldReader<u8>;
    #[doc = "Field `TEXT_WRITE_X` writer - Text Write X-coordinates"]
    pub type TEXT_WRITE_X_W<'a, const O: u8> = crate::FieldWriter<'a, F_CURX1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Text Write X-coordinates"]
        #[inline(always)]
        pub fn text_write_x(&self) -> TEXT_WRITE_X_R {
            TEXT_WRITE_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Text Write X-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn text_write_x(&mut self) -> TEXT_WRITE_X_W<0> {
            TEXT_WRITE_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Text Write X-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [f_curx1](index.html) module"]
    pub struct F_CURX1;
    impl crate::RegisterSpec for F_CURX1 {
        const ADDRESS: u8 = 100u8;
    }
    #[doc = "`read()` method returns [f_curx1::R](R) reader structure"]
    impl crate::Readable for F_CURX1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [f_curx1::W](W) writer structure"]
    impl crate::Writable for F_CURX1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets F_CURX1 to value 0"]
    impl crate::Resettable for F_CURX1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use f_cury0::F_CURY0;
#[doc = "Text Write Y-coordinates Register 0"]
pub mod f_cury0 {
    #[doc = "Register `F_CURY0` reader"]
    pub struct R(crate::R<F_CURY0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<F_CURY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<F_CURY0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<F_CURY0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `F_CURY0` writer"]
    pub struct W(crate::W<F_CURY0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<F_CURY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<F_CURY0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<F_CURY0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_WRITE_Y` reader - Text Write Y-coordinates"]
    pub type TEXT_WRITE_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `TEXT_WRITE_Y` writer - Text Write Y-coordinates"]
    pub type TEXT_WRITE_Y_W<'a, const O: u8> = crate::FieldWriter<'a, F_CURY0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Text Write Y-coordinates"]
        #[inline(always)]
        pub fn text_write_y(&self) -> TEXT_WRITE_Y_R {
            TEXT_WRITE_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Text Write Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn text_write_y(&mut self) -> TEXT_WRITE_Y_W<0> {
            TEXT_WRITE_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Text Write Y-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [f_cury0](index.html) module"]
    pub struct F_CURY0;
    impl crate::RegisterSpec for F_CURY0 {
        const ADDRESS: u8 = 101u8;
    }
    #[doc = "`read()` method returns [f_cury0::R](R) reader structure"]
    impl crate::Readable for F_CURY0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [f_cury0::W](W) writer structure"]
    impl crate::Writable for F_CURY0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets F_CURY0 to value 0"]
    impl crate::Resettable for F_CURY0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use f_cury1::F_CURY1;
#[doc = "Text Write Y-coordinates Register 1"]
pub mod f_cury1 {
    #[doc = "Register `F_CURY1` reader"]
    pub struct R(crate::R<F_CURY1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<F_CURY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<F_CURY1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<F_CURY1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `F_CURY1` writer"]
    pub struct W(crate::W<F_CURY1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<F_CURY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<F_CURY1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<F_CURY1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TEXT_WRITE_Y` reader - Text Write Y-coordinates"]
    pub type TEXT_WRITE_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `TEXT_WRITE_Y` writer - Text Write Y-coordinates"]
    pub type TEXT_WRITE_Y_W<'a, const O: u8> = crate::FieldWriter<'a, F_CURY1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Text Write Y-coordinates"]
        #[inline(always)]
        pub fn text_write_y(&self) -> TEXT_WRITE_Y_R {
            TEXT_WRITE_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Text Write Y-coordinates"]
        #[inline(always)]
        #[must_use]
        pub fn text_write_y(&mut self) -> TEXT_WRITE_Y_W<0> {
            TEXT_WRITE_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Text Write Y-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [f_cury1](index.html) module"]
    pub struct F_CURY1;
    impl crate::RegisterSpec for F_CURY1 {
        const ADDRESS: u8 = 102u8;
    }
    #[doc = "`read()` method returns [f_cury1::R](R) reader structure"]
    impl crate::Readable for F_CURY1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [f_cury1::W](W) writer structure"]
    impl crate::Writable for F_CURY1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets F_CURY1 to value 0"]
    impl crate::Resettable for F_CURY1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dcr0::DCR0;
#[doc = "Draw Line / Triangle Control Register 0"]
pub mod dcr0 {
    #[doc = "Register `DCR0` reader"]
    pub struct R(crate::R<DCR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DCR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DCR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DCR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DCR0` writer"]
    pub struct W(crate::W<DCR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DCR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DCR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DCR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SHAPE_SELECTION` reader - Draw Triangle or Line Select Signal"]
    pub type SHAPE_SELECTION_R = crate::BitReader<SHAPE_SELECTION_A>;
    #[doc = "Draw Triangle or Line Select Signal\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum SHAPE_SELECTION_A {
        #[doc = "0: Draw Line"]
        LINE = 0,
        #[doc = "1: Draw Triangle"]
        TRIANGLE = 1,
    }
    impl From<SHAPE_SELECTION_A> for bool {
        #[inline(always)]
        fn from(variant: SHAPE_SELECTION_A) -> Self {
            variant as u8 != 0
        }
    }
    impl SHAPE_SELECTION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SHAPE_SELECTION_A {
            match self.bits {
                false => SHAPE_SELECTION_A::LINE,
                true => SHAPE_SELECTION_A::TRIANGLE,
            }
        }
        #[doc = "Checks if the value of the field is `LINE`"]
        #[inline(always)]
        pub fn is_line(&self) -> bool {
            *self == SHAPE_SELECTION_A::LINE
        }
        #[doc = "Checks if the value of the field is `TRIANGLE`"]
        #[inline(always)]
        pub fn is_triangle(&self) -> bool {
            *self == SHAPE_SELECTION_A::TRIANGLE
        }
    }
    #[doc = "Field `SHAPE_SELECTION` writer - Draw Triangle or Line Select Signal"]
    pub type SHAPE_SELECTION_W<'a, const O: u8> = crate::BitWriter<'a, DCR0, SHAPE_SELECTION_A, O>;
    impl<'a, const O: u8> SHAPE_SELECTION_W<'a, O> {
        #[doc = "Draw Line"]
        #[inline(always)]
        pub fn line(self) -> &'a mut W {
            self.variant(SHAPE_SELECTION_A::LINE)
        }
        #[doc = "Draw Triangle"]
        #[inline(always)]
        pub fn triangle(self) -> &'a mut W {
            self.variant(SHAPE_SELECTION_A::TRIANGLE)
        }
    }
    #[doc = "Field `FILL_ENABLE` reader - Fill function for Triangle Signal"]
    pub type FILL_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `FILL_ENABLE` writer - Fill function for Triangle Signal"]
    pub type FILL_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, DCR0, bool, O>;
    #[doc = "Field `DRAW_START` reader - Draw Line / Triangle Start Signal"]
    pub type DRAW_START_R = crate::BitReader<bool>;
    #[doc = "Field `DRAW_START` writer - Draw Line / Triangle Start Signal"]
    pub type DRAW_START_W<'a, const O: u8> = crate::BitWriter<'a, DCR0, bool, O>;
    impl R {
        #[doc = "Bit 1 - Draw Triangle or Line Select Signal"]
        #[inline(always)]
        pub fn shape_selection(&self) -> SHAPE_SELECTION_R {
            SHAPE_SELECTION_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 5 - Fill function for Triangle Signal"]
        #[inline(always)]
        pub fn fill_enable(&self) -> FILL_ENABLE_R {
            FILL_ENABLE_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 7 - Draw Line / Triangle Start Signal"]
        #[inline(always)]
        pub fn draw_start(&self) -> DRAW_START_R {
            DRAW_START_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 1 - Draw Triangle or Line Select Signal"]
        #[inline(always)]
        #[must_use]
        pub fn shape_selection(&mut self) -> SHAPE_SELECTION_W<1> {
            SHAPE_SELECTION_W::new(self)
        }
        #[doc = "Bit 5 - Fill function for Triangle Signal"]
        #[inline(always)]
        #[must_use]
        pub fn fill_enable(&mut self) -> FILL_ENABLE_W<5> {
            FILL_ENABLE_W::new(self)
        }
        #[doc = "Bit 7 - Draw Line / Triangle Start Signal"]
        #[inline(always)]
        #[must_use]
        pub fn draw_start(&mut self) -> DRAW_START_W<7> {
            DRAW_START_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line / Triangle Control Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr0](index.html) module"]
    pub struct DCR0;
    impl crate::RegisterSpec for DCR0 {
        const ADDRESS: u8 = 103u8;
    }
    #[doc = "`read()` method returns [dcr0::R](R) reader structure"]
    impl crate::Readable for DCR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dcr0::W](W) writer structure"]
    impl crate::Writable for DCR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DCR0 to value 0"]
    impl crate::Resettable for DCR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlhsr0::DLHSR0;
#[doc = "Draw Line/Square/Triangle Point 1 X-coordinates Register 0"]
pub mod dlhsr0 {
    #[doc = "Register `DLHSR0` reader"]
    pub struct R(crate::R<DLHSR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLHSR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLHSR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLHSR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLHSR0` writer"]
    pub struct W(crate::W<DLHSR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLHSR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLHSR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLHSR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_1_X` reader - Draw Point 1 X-coordinate"]
    pub type DRAW_POINT_1_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_1_X` writer - Draw Point 1 X-coordinate"]
    pub type DRAW_POINT_1_X_W<'a, const O: u8> = crate::FieldWriter<'a, DLHSR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Point 1 X-coordinate"]
        #[inline(always)]
        pub fn draw_point_1_x(&self) -> DRAW_POINT_1_X_R {
            DRAW_POINT_1_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Point 1 X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_1_x(&mut self) -> DRAW_POINT_1_X_W<0> {
            DRAW_POINT_1_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 1 X-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlhsr0](index.html) module"]
    pub struct DLHSR0;
    impl crate::RegisterSpec for DLHSR0 {
        const ADDRESS: u8 = 104u8;
    }
    #[doc = "`read()` method returns [dlhsr0::R](R) reader structure"]
    impl crate::Readable for DLHSR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlhsr0::W](W) writer structure"]
    impl crate::Writable for DLHSR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLHSR0 to value 0"]
    impl crate::Resettable for DLHSR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlhsr1::DLHSR1;
#[doc = "Draw Line/Square/Triangle Point 1 X-coordinates Register 1"]
pub mod dlhsr1 {
    #[doc = "Register `DLHSR1` reader"]
    pub struct R(crate::R<DLHSR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLHSR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLHSR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLHSR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLHSR1` writer"]
    pub struct W(crate::W<DLHSR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLHSR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLHSR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLHSR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_1_X` reader - Draw Point 1 X-coordinate"]
    pub type DRAW_POINT_1_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_1_X` writer - Draw Point 1 X-coordinate"]
    pub type DRAW_POINT_1_X_W<'a, const O: u8> = crate::FieldWriter<'a, DLHSR1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Point 1 X-coordinate"]
        #[inline(always)]
        pub fn draw_point_1_x(&self) -> DRAW_POINT_1_X_R {
            DRAW_POINT_1_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Point 1 X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_1_x(&mut self) -> DRAW_POINT_1_X_W<0> {
            DRAW_POINT_1_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 1 X-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlhsr1](index.html) module"]
    pub struct DLHSR1;
    impl crate::RegisterSpec for DLHSR1 {
        const ADDRESS: u8 = 105u8;
    }
    #[doc = "`read()` method returns [dlhsr1::R](R) reader structure"]
    impl crate::Readable for DLHSR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlhsr1::W](W) writer structure"]
    impl crate::Writable for DLHSR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLHSR1 to value 0"]
    impl crate::Resettable for DLHSR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlvsr0::DLVSR0;
#[doc = "Draw Line/Square/Triangle Point 1 Y-coordinates Register 0"]
pub mod dlvsr0 {
    #[doc = "Register `DLVSR0` reader"]
    pub struct R(crate::R<DLVSR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLVSR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLVSR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLVSR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLVSR0` writer"]
    pub struct W(crate::W<DLVSR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLVSR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLVSR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLVSR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_1_Y` reader - Draw Point 1 Y-coordinate"]
    pub type DRAW_POINT_1_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_1_Y` writer - Draw Point 1 Y-coordinate"]
    pub type DRAW_POINT_1_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DLVSR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Point 1 Y-coordinate"]
        #[inline(always)]
        pub fn draw_point_1_y(&self) -> DRAW_POINT_1_Y_R {
            DRAW_POINT_1_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Point 1 Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_1_y(&mut self) -> DRAW_POINT_1_Y_W<0> {
            DRAW_POINT_1_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 1 Y-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlvsr0](index.html) module"]
    pub struct DLVSR0;
    impl crate::RegisterSpec for DLVSR0 {
        const ADDRESS: u8 = 106u8;
    }
    #[doc = "`read()` method returns [dlvsr0::R](R) reader structure"]
    impl crate::Readable for DLVSR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlvsr0::W](W) writer structure"]
    impl crate::Writable for DLVSR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLVSR0 to value 0"]
    impl crate::Resettable for DLVSR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlvsr1::DLVSR1;
#[doc = "Draw Line/Square/Triangle Point 1 Y-coordinates Register 1"]
pub mod dlvsr1 {
    #[doc = "Register `DLVSR1` reader"]
    pub struct R(crate::R<DLVSR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLVSR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLVSR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLVSR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLVSR1` writer"]
    pub struct W(crate::W<DLVSR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLVSR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLVSR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLVSR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_1_Y` reader - Draw Point 1 Y-coordinate"]
    pub type DRAW_POINT_1_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_1_Y` writer - Draw Point 1 Y-coordinate"]
    pub type DRAW_POINT_1_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DLVSR1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Point 1 Y-coordinate"]
        #[inline(always)]
        pub fn draw_point_1_y(&self) -> DRAW_POINT_1_Y_R {
            DRAW_POINT_1_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Point 1 Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_1_y(&mut self) -> DRAW_POINT_1_Y_W<0> {
            DRAW_POINT_1_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 1 Y-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlvsr1](index.html) module"]
    pub struct DLVSR1;
    impl crate::RegisterSpec for DLVSR1 {
        const ADDRESS: u8 = 107u8;
    }
    #[doc = "`read()` method returns [dlvsr1::R](R) reader structure"]
    impl crate::Readable for DLVSR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlvsr1::W](W) writer structure"]
    impl crate::Writable for DLVSR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLVSR1 to value 0"]
    impl crate::Resettable for DLVSR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlher0::DLHER0;
#[doc = "Draw Line/Square/Triangle Point 2 X-coordinates Register 0"]
pub mod dlher0 {
    #[doc = "Register `DLHER0` reader"]
    pub struct R(crate::R<DLHER0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLHER0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLHER0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLHER0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLHER0` writer"]
    pub struct W(crate::W<DLHER0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLHER0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLHER0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLHER0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_2_X` reader - Draw Point 2 X-coordinate"]
    pub type DRAW_POINT_2_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_2_X` writer - Draw Point 2 X-coordinate"]
    pub type DRAW_POINT_2_X_W<'a, const O: u8> = crate::FieldWriter<'a, DLHER0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Point 2 X-coordinate"]
        #[inline(always)]
        pub fn draw_point_2_x(&self) -> DRAW_POINT_2_X_R {
            DRAW_POINT_2_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Point 2 X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_2_x(&mut self) -> DRAW_POINT_2_X_W<0> {
            DRAW_POINT_2_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 2 X-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlher0](index.html) module"]
    pub struct DLHER0;
    impl crate::RegisterSpec for DLHER0 {
        const ADDRESS: u8 = 108u8;
    }
    #[doc = "`read()` method returns [dlher0::R](R) reader structure"]
    impl crate::Readable for DLHER0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlher0::W](W) writer structure"]
    impl crate::Writable for DLHER0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLHER0 to value 0"]
    impl crate::Resettable for DLHER0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlher1::DLHER1;
#[doc = "Draw Line/Square/Triangle Point 2 X-coordinates Register 0"]
pub mod dlher1 {
    #[doc = "Register `DLHER1` reader"]
    pub struct R(crate::R<DLHER1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLHER1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLHER1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLHER1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLHER1` writer"]
    pub struct W(crate::W<DLHER1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLHER1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLHER1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLHER1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_2_X` reader - Draw Point 2 X-coordinate"]
    pub type DRAW_POINT_2_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_2_X` writer - Draw Point 2 X-coordinate"]
    pub type DRAW_POINT_2_X_W<'a, const O: u8> = crate::FieldWriter<'a, DLHER1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Point 2 X-coordinate"]
        #[inline(always)]
        pub fn draw_point_2_x(&self) -> DRAW_POINT_2_X_R {
            DRAW_POINT_2_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Point 2 X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_2_x(&mut self) -> DRAW_POINT_2_X_W<0> {
            DRAW_POINT_2_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 2 X-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlher1](index.html) module"]
    pub struct DLHER1;
    impl crate::RegisterSpec for DLHER1 {
        const ADDRESS: u8 = 109u8;
    }
    #[doc = "`read()` method returns [dlher1::R](R) reader structure"]
    impl crate::Readable for DLHER1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlher1::W](W) writer structure"]
    impl crate::Writable for DLHER1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLHER1 to value 0"]
    impl crate::Resettable for DLHER1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlver0::DLVER0;
#[doc = "Draw Line/Square/Triangle Point 2 Y-coordinates Register 0"]
pub mod dlver0 {
    #[doc = "Register `DLVER0` reader"]
    pub struct R(crate::R<DLVER0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLVER0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLVER0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLVER0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLVER0` writer"]
    pub struct W(crate::W<DLVER0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLVER0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLVER0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLVER0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_2_Y` reader - Draw Point 2 Y-coordinate"]
    pub type DRAW_POINT_2_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_2_Y` writer - Draw Point 2 Y-coordinate"]
    pub type DRAW_POINT_2_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DLVER0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Point 2 Y-coordinate"]
        #[inline(always)]
        pub fn draw_point_2_y(&self) -> DRAW_POINT_2_Y_R {
            DRAW_POINT_2_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Point 2 Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_2_y(&mut self) -> DRAW_POINT_2_Y_W<0> {
            DRAW_POINT_2_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 2 Y-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlver0](index.html) module"]
    pub struct DLVER0;
    impl crate::RegisterSpec for DLVER0 {
        const ADDRESS: u8 = 110u8;
    }
    #[doc = "`read()` method returns [dlver0::R](R) reader structure"]
    impl crate::Readable for DLVER0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlver0::W](W) writer structure"]
    impl crate::Writable for DLVER0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLVER0 to value 0"]
    impl crate::Resettable for DLVER0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dlver1::DLVER1;
#[doc = "Draw Line/Square/Triangle Point 2 Y-coordinates Register 0"]
pub mod dlver1 {
    #[doc = "Register `DLVER1` reader"]
    pub struct R(crate::R<DLVER1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DLVER1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DLVER1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DLVER1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DLVER1` writer"]
    pub struct W(crate::W<DLVER1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DLVER1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DLVER1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DLVER1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_2_Y` reader - Draw Point 2 Y-coordinate"]
    pub type DRAW_POINT_2_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_2_Y` writer - Draw Point 2 Y-coordinate"]
    pub type DRAW_POINT_2_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DLVER1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Point 2 Y-coordinate"]
        #[inline(always)]
        pub fn draw_point_2_y(&self) -> DRAW_POINT_2_Y_R {
            DRAW_POINT_2_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Point 2 Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_2_y(&mut self) -> DRAW_POINT_2_Y_W<0> {
            DRAW_POINT_2_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Line/Square/Triangle Point 2 Y-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlver1](index.html) module"]
    pub struct DLVER1;
    impl crate::RegisterSpec for DLVER1 {
        const ADDRESS: u8 = 111u8;
    }
    #[doc = "`read()` method returns [dlver1::R](R) reader structure"]
    impl crate::Readable for DLVER1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dlver1::W](W) writer structure"]
    impl crate::Writable for DLVER1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DLVER1 to value 0"]
    impl crate::Resettable for DLVER1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dtph0::DTPH0;
#[doc = "Draw Triangle Point 3 X-coordinates Register 0"]
pub mod dtph0 {
    #[doc = "Register `DTPH0` reader"]
    pub struct R(crate::R<DTPH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DTPH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DTPH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DTPH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DTPH0` writer"]
    pub struct W(crate::W<DTPH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DTPH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DTPH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DTPH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_3_X` reader - Draw Triangle Point 3 X-coordinate"]
    pub type DRAW_POINT_3_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_3_X` writer - Draw Triangle Point 3 X-coordinate"]
    pub type DRAW_POINT_3_X_W<'a, const O: u8> = crate::FieldWriter<'a, DTPH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Triangle Point 3 X-coordinate"]
        #[inline(always)]
        pub fn draw_point_3_x(&self) -> DRAW_POINT_3_X_R {
            DRAW_POINT_3_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Triangle Point 3 X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_3_x(&mut self) -> DRAW_POINT_3_X_W<0> {
            DRAW_POINT_3_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Triangle Point 3 X-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dtph0](index.html) module"]
    pub struct DTPH0;
    impl crate::RegisterSpec for DTPH0 {
        const ADDRESS: u8 = 112u8;
    }
    #[doc = "`read()` method returns [dtph0::R](R) reader structure"]
    impl crate::Readable for DTPH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dtph0::W](W) writer structure"]
    impl crate::Writable for DTPH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DTPH0 to value 0"]
    impl crate::Resettable for DTPH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dtph1::DTPH1;
#[doc = "Draw Triangle Point 3 X-coordinates Register 1"]
pub mod dtph1 {
    #[doc = "Register `DTPH1` reader"]
    pub struct R(crate::R<DTPH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DTPH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DTPH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DTPH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DTPH1` writer"]
    pub struct W(crate::W<DTPH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DTPH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DTPH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DTPH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_3_X` reader - Draw Triangle Point 3 X-coordinate"]
    pub type DRAW_POINT_3_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_3_X` writer - Draw Triangle Point 3 X-coordinate"]
    pub type DRAW_POINT_3_X_W<'a, const O: u8> = crate::FieldWriter<'a, DTPH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Triangle Point 3 X-coordinate"]
        #[inline(always)]
        pub fn draw_point_3_x(&self) -> DRAW_POINT_3_X_R {
            DRAW_POINT_3_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Triangle Point 3 X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_3_x(&mut self) -> DRAW_POINT_3_X_W<0> {
            DRAW_POINT_3_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Triangle Point 3 X-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dtph1](index.html) module"]
    pub struct DTPH1;
    impl crate::RegisterSpec for DTPH1 {
        const ADDRESS: u8 = 113u8;
    }
    #[doc = "`read()` method returns [dtph1::R](R) reader structure"]
    impl crate::Readable for DTPH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dtph1::W](W) writer structure"]
    impl crate::Writable for DTPH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DTPH1 to value 0"]
    impl crate::Resettable for DTPH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dtpv0::DTPV0;
#[doc = "Draw Triangle Point 3 Y-coordinates Register 0"]
pub mod dtpv0 {
    #[doc = "Register `DTPV0` reader"]
    pub struct R(crate::R<DTPV0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DTPV0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DTPV0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DTPV0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DTPV0` writer"]
    pub struct W(crate::W<DTPV0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DTPV0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DTPV0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DTPV0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_3_Y` reader - Draw Triangle Point 3 Y-coordinate"]
    pub type DRAW_POINT_3_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_3_Y` writer - Draw Triangle Point 3 Y-coordinate"]
    pub type DRAW_POINT_3_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DTPV0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Triangle Point 3 Y-coordinate"]
        #[inline(always)]
        pub fn draw_point_3_y(&self) -> DRAW_POINT_3_Y_R {
            DRAW_POINT_3_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Triangle Point 3 Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_3_y(&mut self) -> DRAW_POINT_3_Y_W<0> {
            DRAW_POINT_3_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Triangle Point 3 Y-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dtpv0](index.html) module"]
    pub struct DTPV0;
    impl crate::RegisterSpec for DTPV0 {
        const ADDRESS: u8 = 114u8;
    }
    #[doc = "`read()` method returns [dtpv0::R](R) reader structure"]
    impl crate::Readable for DTPV0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dtpv0::W](W) writer structure"]
    impl crate::Writable for DTPV0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DTPV0 to value 0"]
    impl crate::Resettable for DTPV0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dtpv1::DTPV1;
#[doc = "Draw Triangle Point 3 Y-coordinates Register 1"]
pub mod dtpv1 {
    #[doc = "Register `DTPV1` reader"]
    pub struct R(crate::R<DTPV1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DTPV1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DTPV1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DTPV1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DTPV1` writer"]
    pub struct W(crate::W<DTPV1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DTPV1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DTPV1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DTPV1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DRAW_POINT_3_Y` reader - Draw Triangle Point 3 Y-coordinate"]
    pub type DRAW_POINT_3_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DRAW_POINT_3_Y` writer - Draw Triangle Point 3 Y-coordinate"]
    pub type DRAW_POINT_3_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DTPV1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Triangle Point 3 Y-coordinate"]
        #[inline(always)]
        pub fn draw_point_3_y(&self) -> DRAW_POINT_3_Y_R {
            DRAW_POINT_3_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Triangle Point 3 Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn draw_point_3_y(&mut self) -> DRAW_POINT_3_Y_W<0> {
            DRAW_POINT_3_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Triangle Point 3 Y-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dtpv1](index.html) module"]
    pub struct DTPV1;
    impl crate::RegisterSpec for DTPV1 {
        const ADDRESS: u8 = 115u8;
    }
    #[doc = "`read()` method returns [dtpv1::R](R) reader structure"]
    impl crate::Readable for DTPV1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dtpv1::W](W) writer structure"]
    impl crate::Writable for DTPV1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DTPV1 to value 0"]
    impl crate::Resettable for DTPV1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dcr1::DCR1;
#[doc = "Draw Circle/Ellipse/Ellipse Curve/Circle Square Control Register 1"]
pub mod dcr1 {
    #[doc = "Register `DCR1` reader"]
    pub struct R(crate::R<DCR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DCR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DCR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DCR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DCR1` writer"]
    pub struct W(crate::W<DCR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DCR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DCR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DCR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CIRCLE_ELLIPSE_CURVE_PART_SELECTION` reader - Draw Circle / Ellipse Curve Part Select(DECP)"]
    pub type CIRCLE_ELLIPSE_CURVE_PART_SELECTION_R =
        crate::FieldReader<CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A>;
    #[doc = "Draw Circle / Ellipse Curve Part Select(DECP)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A {
        #[doc = "0: Bottom-left Ellipse Curve"]
        BOTTOM_LEFT = 0,
        #[doc = "1: Upper-left Ellipse Curve"]
        UPPER_LEFT = 1,
        #[doc = "2: Upper-right Ellipse Curve"]
        UPPER_RIGHT = 2,
        #[doc = "3: Bottom-right Ellipse Curve"]
        BOTTOM_RIGHT = 3,
    }
    impl From<CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A> for u8 {
        #[inline(always)]
        fn from(variant: CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A) -> Self {
            variant as _
        }
    }
    impl CIRCLE_ELLIPSE_CURVE_PART_SELECTION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A {
            match self.bits {
                0 => CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::BOTTOM_LEFT,
                1 => CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::UPPER_LEFT,
                2 => CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::UPPER_RIGHT,
                3 => CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::BOTTOM_RIGHT,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `BOTTOM_LEFT`"]
        #[inline(always)]
        pub fn is_bottom_left(&self) -> bool {
            *self == CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::BOTTOM_LEFT
        }
        #[doc = "Checks if the value of the field is `UPPER_LEFT`"]
        #[inline(always)]
        pub fn is_upper_left(&self) -> bool {
            *self == CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::UPPER_LEFT
        }
        #[doc = "Checks if the value of the field is `UPPER_RIGHT`"]
        #[inline(always)]
        pub fn is_upper_right(&self) -> bool {
            *self == CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::UPPER_RIGHT
        }
        #[doc = "Checks if the value of the field is `BOTTOM_RIGHT`"]
        #[inline(always)]
        pub fn is_bottom_right(&self) -> bool {
            *self == CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::BOTTOM_RIGHT
        }
    }
    #[doc = "Field `CIRCLE_ELLIPSE_CURVE_PART_SELECTION` writer - Draw Circle / Ellipse Curve Part Select(DECP)"]
    pub type CIRCLE_ELLIPSE_CURVE_PART_SELECTION_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, DCR1, u8, CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A, 2, O>;
    impl<'a, const O: u8> CIRCLE_ELLIPSE_CURVE_PART_SELECTION_W<'a, O> {
        #[doc = "Bottom-left Ellipse Curve"]
        #[inline(always)]
        pub fn bottom_left(self) -> &'a mut W {
            self.variant(CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::BOTTOM_LEFT)
        }
        #[doc = "Upper-left Ellipse Curve"]
        #[inline(always)]
        pub fn upper_left(self) -> &'a mut W {
            self.variant(CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::UPPER_LEFT)
        }
        #[doc = "Upper-right Ellipse Curve"]
        #[inline(always)]
        pub fn upper_right(self) -> &'a mut W {
            self.variant(CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::UPPER_RIGHT)
        }
        #[doc = "Bottom-right Ellipse Curve"]
        #[inline(always)]
        pub fn bottom_right(self) -> &'a mut W {
            self.variant(CIRCLE_ELLIPSE_CURVE_PART_SELECTION_A::BOTTOM_RIGHT)
        }
    }
    #[doc = "Field `SHAPE_SELECTION` reader - Draw Circle / Ellipse / Square / Ellipse Curve / Circle Square Select"]
    pub type SHAPE_SELECTION_R = crate::FieldReader<SHAPE_SELECTION_A>;
    #[doc = "Draw Circle / Ellipse / Square / Ellipse Curve / Circle Square Select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum SHAPE_SELECTION_A {
        #[doc = "0: Draw Circle / Ellipse"]
        CIRCLE_ELLIPSE = 0,
        #[doc = "1: Draw Circle / Ellipse Curve"]
        CIRCLE_ELLIPSE_CURVE = 1,
        #[doc = "2: Draw Square"]
        SQUARE = 2,
        #[doc = "3: Draw Circle Square"]
        CIRCLE_SQUARE = 3,
    }
    impl From<SHAPE_SELECTION_A> for u8 {
        #[inline(always)]
        fn from(variant: SHAPE_SELECTION_A) -> Self {
            variant as _
        }
    }
    impl SHAPE_SELECTION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SHAPE_SELECTION_A {
            match self.bits {
                0 => SHAPE_SELECTION_A::CIRCLE_ELLIPSE,
                1 => SHAPE_SELECTION_A::CIRCLE_ELLIPSE_CURVE,
                2 => SHAPE_SELECTION_A::SQUARE,
                3 => SHAPE_SELECTION_A::CIRCLE_SQUARE,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `CIRCLE_ELLIPSE`"]
        #[inline(always)]
        pub fn is_circle_ellipse(&self) -> bool {
            *self == SHAPE_SELECTION_A::CIRCLE_ELLIPSE
        }
        #[doc = "Checks if the value of the field is `CIRCLE_ELLIPSE_CURVE`"]
        #[inline(always)]
        pub fn is_circle_ellipse_curve(&self) -> bool {
            *self == SHAPE_SELECTION_A::CIRCLE_ELLIPSE_CURVE
        }
        #[doc = "Checks if the value of the field is `SQUARE`"]
        #[inline(always)]
        pub fn is_square(&self) -> bool {
            *self == SHAPE_SELECTION_A::SQUARE
        }
        #[doc = "Checks if the value of the field is `CIRCLE_SQUARE`"]
        #[inline(always)]
        pub fn is_circle_square(&self) -> bool {
            *self == SHAPE_SELECTION_A::CIRCLE_SQUARE
        }
    }
    #[doc = "Field `SHAPE_SELECTION` writer - Draw Circle / Ellipse / Square / Ellipse Curve / Circle Square Select"]
    pub type SHAPE_SELECTION_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, DCR1, u8, SHAPE_SELECTION_A, 2, O>;
    impl<'a, const O: u8> SHAPE_SELECTION_W<'a, O> {
        #[doc = "Draw Circle / Ellipse"]
        #[inline(always)]
        pub fn circle_ellipse(self) -> &'a mut W {
            self.variant(SHAPE_SELECTION_A::CIRCLE_ELLIPSE)
        }
        #[doc = "Draw Circle / Ellipse Curve"]
        #[inline(always)]
        pub fn circle_ellipse_curve(self) -> &'a mut W {
            self.variant(SHAPE_SELECTION_A::CIRCLE_ELLIPSE_CURVE)
        }
        #[doc = "Draw Square"]
        #[inline(always)]
        pub fn square(self) -> &'a mut W {
            self.variant(SHAPE_SELECTION_A::SQUARE)
        }
        #[doc = "Draw Circle Square"]
        #[inline(always)]
        pub fn circle_square(self) -> &'a mut W {
            self.variant(SHAPE_SELECTION_A::CIRCLE_SQUARE)
        }
    }
    #[doc = "Field `FILL_ENABLE` reader - Fill the Circle / Ellipse / Square / Circle Square Signal"]
    pub type FILL_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `FILL_ENABLE` writer - Fill the Circle / Ellipse / Square / Circle Square Signal"]
    pub type FILL_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, DCR1, bool, O>;
    #[doc = "Field `DRAW_START` reader - Draw Circle / Ellipse / Square /Circle Square Start Signal"]
    pub type DRAW_START_R = crate::BitReader<bool>;
    #[doc = "Field `DRAW_START` writer - Draw Circle / Ellipse / Square /Circle Square Start Signal"]
    pub type DRAW_START_W<'a, const O: u8> = crate::BitWriter<'a, DCR1, bool, O>;
    impl R {
        #[doc = "Bits 0:1 - Draw Circle / Ellipse Curve Part Select(DECP)"]
        #[inline(always)]
        pub fn circle_ellipse_curve_part_selection(&self) -> CIRCLE_ELLIPSE_CURVE_PART_SELECTION_R {
            CIRCLE_ELLIPSE_CURVE_PART_SELECTION_R::new(self.bits & 3)
        }
        #[doc = "Bits 4:5 - Draw Circle / Ellipse / Square / Ellipse Curve / Circle Square Select"]
        #[inline(always)]
        pub fn shape_selection(&self) -> SHAPE_SELECTION_R {
            SHAPE_SELECTION_R::new((self.bits >> 4) & 3)
        }
        #[doc = "Bit 6 - Fill the Circle / Ellipse / Square / Circle Square Signal"]
        #[inline(always)]
        pub fn fill_enable(&self) -> FILL_ENABLE_R {
            FILL_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Draw Circle / Ellipse / Square /Circle Square Start Signal"]
        #[inline(always)]
        pub fn draw_start(&self) -> DRAW_START_R {
            DRAW_START_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Draw Circle / Ellipse Curve Part Select(DECP)"]
        #[inline(always)]
        #[must_use]
        pub fn circle_ellipse_curve_part_selection(
            &mut self,
        ) -> CIRCLE_ELLIPSE_CURVE_PART_SELECTION_W<0> {
            CIRCLE_ELLIPSE_CURVE_PART_SELECTION_W::new(self)
        }
        #[doc = "Bits 4:5 - Draw Circle / Ellipse / Square / Ellipse Curve / Circle Square Select"]
        #[inline(always)]
        #[must_use]
        pub fn shape_selection(&mut self) -> SHAPE_SELECTION_W<4> {
            SHAPE_SELECTION_W::new(self)
        }
        #[doc = "Bit 6 - Fill the Circle / Ellipse / Square / Circle Square Signal"]
        #[inline(always)]
        #[must_use]
        pub fn fill_enable(&mut self) -> FILL_ENABLE_W<6> {
            FILL_ENABLE_W::new(self)
        }
        #[doc = "Bit 7 - Draw Circle / Ellipse / Square /Circle Square Start Signal"]
        #[inline(always)]
        #[must_use]
        pub fn draw_start(&mut self) -> DRAW_START_W<7> {
            DRAW_START_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Ellipse Curve/Circle Square Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr1](index.html) module"]
    pub struct DCR1;
    impl crate::RegisterSpec for DCR1 {
        const ADDRESS: u8 = 118u8;
    }
    #[doc = "`read()` method returns [dcr1::R](R) reader structure"]
    impl crate::Readable for DCR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dcr1::W](W) writer structure"]
    impl crate::Writable for DCR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DCR1 to value 0"]
    impl crate::Resettable for DCR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ell_a0::ELL_A0;
#[doc = "Draw Circle/Ellipse/Circle Square Major radius Setting Register 0"]
pub mod ell_a0 {
    #[doc = "Register `ELL_A0` reader"]
    pub struct R(crate::R<ELL_A0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<ELL_A0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<ELL_A0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<ELL_A0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `ELL_A0` writer"]
    pub struct W(crate::W<ELL_A0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<ELL_A0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<ELL_A0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<ELL_A0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAJOR_RADIUS` reader - Draw Circle/Ellipse/Circle Square Major radius"]
    pub type MAJOR_RADIUS_R = crate::FieldReader<u8>;
    #[doc = "Field `MAJOR_RADIUS` writer - Draw Circle/Ellipse/Circle Square Major radius"]
    pub type MAJOR_RADIUS_W<'a, const O: u8> = crate::FieldWriter<'a, ELL_A0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Major radius"]
        #[inline(always)]
        pub fn major_radius(&self) -> MAJOR_RADIUS_R {
            MAJOR_RADIUS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Major radius"]
        #[inline(always)]
        #[must_use]
        pub fn major_radius(&mut self) -> MAJOR_RADIUS_W<0> {
            MAJOR_RADIUS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Major radius Setting Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ell_a0](index.html) module"]
    pub struct ELL_A0;
    impl crate::RegisterSpec for ELL_A0 {
        const ADDRESS: u8 = 119u8;
    }
    #[doc = "`read()` method returns [ell_a0::R](R) reader structure"]
    impl crate::Readable for ELL_A0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ell_a0::W](W) writer structure"]
    impl crate::Writable for ELL_A0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets ELL_A0 to value 0"]
    impl crate::Resettable for ELL_A0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ell_a1::ELL_A1;
#[doc = "Draw Circle/Ellipse/Circle Square Major radius Setting Register 1"]
pub mod ell_a1 {
    #[doc = "Register `ELL_A1` reader"]
    pub struct R(crate::R<ELL_A1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<ELL_A1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<ELL_A1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<ELL_A1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `ELL_A1` writer"]
    pub struct W(crate::W<ELL_A1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<ELL_A1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<ELL_A1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<ELL_A1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MAJOR_RADIUS` reader - Draw Circle/Ellipse/Circle Square Major radius"]
    pub type MAJOR_RADIUS_R = crate::FieldReader<u8>;
    #[doc = "Field `MAJOR_RADIUS` writer - Draw Circle/Ellipse/Circle Square Major radius"]
    pub type MAJOR_RADIUS_W<'a, const O: u8> = crate::FieldWriter<'a, ELL_A1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Major radius"]
        #[inline(always)]
        pub fn major_radius(&self) -> MAJOR_RADIUS_R {
            MAJOR_RADIUS_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Major radius"]
        #[inline(always)]
        #[must_use]
        pub fn major_radius(&mut self) -> MAJOR_RADIUS_W<0> {
            MAJOR_RADIUS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Major radius Setting Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ell_a1](index.html) module"]
    pub struct ELL_A1;
    impl crate::RegisterSpec for ELL_A1 {
        const ADDRESS: u8 = 120u8;
    }
    #[doc = "`read()` method returns [ell_a1::R](R) reader structure"]
    impl crate::Readable for ELL_A1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ell_a1::W](W) writer structure"]
    impl crate::Writable for ELL_A1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets ELL_A1 to value 0"]
    impl crate::Resettable for ELL_A1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ell_b0::ELL_B0;
#[doc = "Draw Circle/Ellipse/Circle Square Minor radius Setting Register 0"]
pub mod ell_b0 {
    #[doc = "Register `ELL_B0` reader"]
    pub struct R(crate::R<ELL_B0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<ELL_B0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<ELL_B0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<ELL_B0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `ELL_B0` writer"]
    pub struct W(crate::W<ELL_B0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<ELL_B0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<ELL_B0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<ELL_B0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MINOR_RADIUS` reader - Draw Circle/Ellipse/Circle Square Minor radius"]
    pub type MINOR_RADIUS_R = crate::FieldReader<u8>;
    #[doc = "Field `MINOR_RADIUS` writer - Draw Circle/Ellipse/Circle Square Minor radius"]
    pub type MINOR_RADIUS_W<'a, const O: u8> = crate::FieldWriter<'a, ELL_B0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Minor radius"]
        #[inline(always)]
        pub fn minor_radius(&self) -> MINOR_RADIUS_R {
            MINOR_RADIUS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Minor radius"]
        #[inline(always)]
        #[must_use]
        pub fn minor_radius(&mut self) -> MINOR_RADIUS_W<0> {
            MINOR_RADIUS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Minor radius Setting Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ell_b0](index.html) module"]
    pub struct ELL_B0;
    impl crate::RegisterSpec for ELL_B0 {
        const ADDRESS: u8 = 121u8;
    }
    #[doc = "`read()` method returns [ell_b0::R](R) reader structure"]
    impl crate::Readable for ELL_B0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ell_b0::W](W) writer structure"]
    impl crate::Writable for ELL_B0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets ELL_B0 to value 0"]
    impl crate::Resettable for ELL_B0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ell_b1::ELL_B1;
#[doc = "Draw Circle/Ellipse/Circle Square Minor radius Setting Register 1"]
pub mod ell_b1 {
    #[doc = "Register `ELL_B1` reader"]
    pub struct R(crate::R<ELL_B1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<ELL_B1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<ELL_B1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<ELL_B1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `ELL_B1` writer"]
    pub struct W(crate::W<ELL_B1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<ELL_B1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<ELL_B1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<ELL_B1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `MINOR_RADIUS` reader - Draw Circle/Ellipse/Circle Square Minor radius"]
    pub type MINOR_RADIUS_R = crate::FieldReader<u8>;
    #[doc = "Field `MINOR_RADIUS` writer - Draw Circle/Ellipse/Circle Square Minor radius"]
    pub type MINOR_RADIUS_W<'a, const O: u8> = crate::FieldWriter<'a, ELL_B1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Minor radius"]
        #[inline(always)]
        pub fn minor_radius(&self) -> MINOR_RADIUS_R {
            MINOR_RADIUS_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Minor radius"]
        #[inline(always)]
        #[must_use]
        pub fn minor_radius(&mut self) -> MINOR_RADIUS_W<0> {
            MINOR_RADIUS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Minor radius Setting Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ell_b1](index.html) module"]
    pub struct ELL_B1;
    impl crate::RegisterSpec for ELL_B1 {
        const ADDRESS: u8 = 122u8;
    }
    #[doc = "`read()` method returns [ell_b1::R](R) reader structure"]
    impl crate::Readable for ELL_B1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ell_b1::W](W) writer structure"]
    impl crate::Writable for ELL_B1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets ELL_B1 to value 0"]
    impl crate::Resettable for ELL_B1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dehr0::DEHR0;
#[doc = "Draw Circle/Ellipse/Circle Square Center X-coordinates Register 0"]
pub mod dehr0 {
    #[doc = "Register `DEHR0` reader"]
    pub struct R(crate::R<DEHR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DEHR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DEHR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DEHR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DEHR0` writer"]
    pub struct W(crate::W<DEHR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DEHR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DEHR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DEHR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CENTER_X` reader - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
    pub type CENTER_X_R = crate::FieldReader<u8>;
    #[doc = "Field `CENTER_X` writer - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
    pub type CENTER_X_W<'a, const O: u8> = crate::FieldWriter<'a, DEHR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
        #[inline(always)]
        pub fn center_x(&self) -> CENTER_X_R {
            CENTER_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn center_x(&mut self) -> CENTER_X_W<0> {
            CENTER_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Center X-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dehr0](index.html) module"]
    pub struct DEHR0;
    impl crate::RegisterSpec for DEHR0 {
        const ADDRESS: u8 = 123u8;
    }
    #[doc = "`read()` method returns [dehr0::R](R) reader structure"]
    impl crate::Readable for DEHR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dehr0::W](W) writer structure"]
    impl crate::Writable for DEHR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DEHR0 to value 0"]
    impl crate::Resettable for DEHR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dehr1::DEHR1;
#[doc = "Draw Circle/Ellipse/Circle Square Center X-coordinates Register 1"]
pub mod dehr1 {
    #[doc = "Register `DEHR1` reader"]
    pub struct R(crate::R<DEHR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DEHR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DEHR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DEHR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DEHR1` writer"]
    pub struct W(crate::W<DEHR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DEHR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DEHR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DEHR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CENTER_X` reader - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
    pub type CENTER_X_R = crate::FieldReader<u8>;
    #[doc = "Field `CENTER_X` writer - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
    pub type CENTER_X_W<'a, const O: u8> = crate::FieldWriter<'a, DEHR1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
        #[inline(always)]
        pub fn center_x(&self) -> CENTER_X_R {
            CENTER_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Center X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn center_x(&mut self) -> CENTER_X_W<0> {
            CENTER_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Center X-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dehr1](index.html) module"]
    pub struct DEHR1;
    impl crate::RegisterSpec for DEHR1 {
        const ADDRESS: u8 = 124u8;
    }
    #[doc = "`read()` method returns [dehr1::R](R) reader structure"]
    impl crate::Readable for DEHR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dehr1::W](W) writer structure"]
    impl crate::Writable for DEHR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DEHR1 to value 0"]
    impl crate::Resettable for DEHR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use devr0::DEVR0;
#[doc = "Draw Circle/Ellipse/Circle Square Center Y-coordinates Register 0"]
pub mod devr0 {
    #[doc = "Register `DEVR0` reader"]
    pub struct R(crate::R<DEVR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DEVR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DEVR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DEVR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DEVR0` writer"]
    pub struct W(crate::W<DEVR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DEVR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DEVR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DEVR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CENTER_Y` reader - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
    pub type CENTER_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `CENTER_Y` writer - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
    pub type CENTER_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DEVR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
        #[inline(always)]
        pub fn center_y(&self) -> CENTER_Y_R {
            CENTER_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn center_y(&mut self) -> CENTER_Y_W<0> {
            CENTER_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Center Y-coordinates Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [devr0](index.html) module"]
    pub struct DEVR0;
    impl crate::RegisterSpec for DEVR0 {
        const ADDRESS: u8 = 125u8;
    }
    #[doc = "`read()` method returns [devr0::R](R) reader structure"]
    impl crate::Readable for DEVR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [devr0::W](W) writer structure"]
    impl crate::Writable for DEVR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DEVR0 to value 0"]
    impl crate::Resettable for DEVR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use devr1::DEVR1;
#[doc = "Draw Circle/Ellipse/Circle Square Center Y-coordinates Register 1"]
pub mod devr1 {
    #[doc = "Register `DEVR1` reader"]
    pub struct R(crate::R<DEVR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DEVR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DEVR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DEVR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DEVR1` writer"]
    pub struct W(crate::W<DEVR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DEVR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DEVR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DEVR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CENTER_Y` reader - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
    pub type CENTER_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `CENTER_Y` writer - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
    pub type CENTER_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DEVR1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
        #[inline(always)]
        pub fn center_y(&self) -> CENTER_Y_R {
            CENTER_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Draw Circle/Ellipse/Circle Square Center Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn center_y(&mut self) -> CENTER_Y_W<0> {
            CENTER_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Draw Circle/Ellipse/Circle Square Center Y-coordinates Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [devr1](index.html) module"]
    pub struct DEVR1;
    impl crate::RegisterSpec for DEVR1 {
        const ADDRESS: u8 = 126u8;
    }
    #[doc = "`read()` method returns [devr1::R](R) reader structure"]
    impl crate::Readable for DEVR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [devr1::W](W) writer structure"]
    impl crate::Writable for DEVR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DEVR1 to value 0"]
    impl crate::Resettable for DEVR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use fgcr::FGCR;
#[doc = "Foreground Color Register - Red"]
pub mod fgcr {
    #[doc = "Register `FGCR` reader"]
    pub struct R(crate::R<FGCR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<FGCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<FGCR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<FGCR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `FGCR` writer"]
    pub struct W(crate::W<FGCR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<FGCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<FGCR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<FGCR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `FOREGROUND_COLOR_RED` reader - Foreground Color Red Component"]
    pub type FOREGROUND_COLOR_RED_R = crate::FieldReader<u8>;
    #[doc = "Field `FOREGROUND_COLOR_RED` writer - Foreground Color Red Component"]
    pub type FOREGROUND_COLOR_RED_W<'a, const O: u8> = crate::FieldWriter<'a, FGCR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Foreground Color Red Component"]
        #[inline(always)]
        pub fn foreground_color_red(&self) -> FOREGROUND_COLOR_RED_R {
            FOREGROUND_COLOR_RED_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Foreground Color Red Component"]
        #[inline(always)]
        #[must_use]
        pub fn foreground_color_red(&mut self) -> FOREGROUND_COLOR_RED_W<0> {
            FOREGROUND_COLOR_RED_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Foreground Color Register - Red\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fgcr](index.html) module"]
    pub struct FGCR;
    impl crate::RegisterSpec for FGCR {
        const ADDRESS: u8 = 210u8;
    }
    #[doc = "`read()` method returns [fgcr::R](R) reader structure"]
    impl crate::Readable for FGCR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [fgcr::W](W) writer structure"]
    impl crate::Writable for FGCR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets FGCR to value 0xff"]
    impl crate::Resettable for FGCR {
        const RESET_VALUE: u8 = 0xff;
    }
}
pub use fgcg::FGCG;
#[doc = "Foreground Color Register - Green"]
pub mod fgcg {
    #[doc = "Register `FGCG` reader"]
    pub struct R(crate::R<FGCG>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<FGCG>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<FGCG>> for R {
        #[inline(always)]
        fn from(reader: crate::R<FGCG>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `FGCG` writer"]
    pub struct W(crate::W<FGCG>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<FGCG>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<FGCG>> for W {
        #[inline(always)]
        fn from(writer: crate::W<FGCG>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `FOREGROUND_COLOR_GREEN_8BPP` reader - Foreground Color Green Component"]
    pub type FOREGROUND_COLOR_GREEN_8BPP_R = crate::FieldReader<u8>;
    #[doc = "Field `FOREGROUND_COLOR_GREEN_8BPP` writer - Foreground Color Green Component"]
    pub type FOREGROUND_COLOR_GREEN_8BPP_W<'a, const O: u8> =
        crate::FieldWriter<'a, FGCG, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Foreground Color Green Component"]
        #[inline(always)]
        pub fn foreground_color_green_8bpp(&self) -> FOREGROUND_COLOR_GREEN_8BPP_R {
            FOREGROUND_COLOR_GREEN_8BPP_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Foreground Color Green Component"]
        #[inline(always)]
        #[must_use]
        pub fn foreground_color_green_8bpp(&mut self) -> FOREGROUND_COLOR_GREEN_8BPP_W<0> {
            FOREGROUND_COLOR_GREEN_8BPP_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Foreground Color Register - Green\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fgcg](index.html) module"]
    pub struct FGCG;
    impl crate::RegisterSpec for FGCG {
        const ADDRESS: u8 = 211u8;
    }
    #[doc = "`read()` method returns [fgcg::R](R) reader structure"]
    impl crate::Readable for FGCG {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [fgcg::W](W) writer structure"]
    impl crate::Writable for FGCG {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets FGCG to value 0xff"]
    impl crate::Resettable for FGCG {
        const RESET_VALUE: u8 = 0xff;
    }
}
pub use fgcb::FGCB;
#[doc = "Foreground Color Register - Blue"]
pub mod fgcb {
    #[doc = "Register `FGCB` reader"]
    pub struct R(crate::R<FGCB>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<FGCB>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<FGCB>> for R {
        #[inline(always)]
        fn from(reader: crate::R<FGCB>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `FGCB` writer"]
    pub struct W(crate::W<FGCB>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<FGCB>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<FGCB>> for W {
        #[inline(always)]
        fn from(writer: crate::W<FGCB>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `FOREGROUND_COLOR_BLUE_8BPP` reader - Foreground Color Blue Component"]
    pub type FOREGROUND_COLOR_BLUE_8BPP_R = crate::FieldReader<u8>;
    #[doc = "Field `FOREGROUND_COLOR_BLUE_8BPP` writer - Foreground Color Blue Component"]
    pub type FOREGROUND_COLOR_BLUE_8BPP_W<'a, const O: u8> =
        crate::FieldWriter<'a, FGCB, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Foreground Color Blue Component"]
        #[inline(always)]
        pub fn foreground_color_blue_8bpp(&self) -> FOREGROUND_COLOR_BLUE_8BPP_R {
            FOREGROUND_COLOR_BLUE_8BPP_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Foreground Color Blue Component"]
        #[inline(always)]
        #[must_use]
        pub fn foreground_color_blue_8bpp(&mut self) -> FOREGROUND_COLOR_BLUE_8BPP_W<0> {
            FOREGROUND_COLOR_BLUE_8BPP_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Foreground Color Register - Blue\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fgcb](index.html) module"]
    pub struct FGCB;
    impl crate::RegisterSpec for FGCB {
        const ADDRESS: u8 = 212u8;
    }
    #[doc = "`read()` method returns [fgcb::R](R) reader structure"]
    impl crate::Readable for FGCB {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [fgcb::W](W) writer structure"]
    impl crate::Writable for FGCB {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets FGCB to value 0xff"]
    impl crate::Resettable for FGCB {
        const RESET_VALUE: u8 = 0xff;
    }
}
pub use psclr::PSCLR;
#[doc = "PWM Prescaler Register"]
pub mod psclr {
    #[doc = "Register `PSCLR` reader"]
    pub struct R(crate::R<PSCLR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PSCLR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PSCLR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PSCLR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PSCLR` writer"]
    pub struct W(crate::W<PSCLR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PSCLR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PSCLR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PSCLR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PWM_PRESCALER` reader - PWM Prescaler Register"]
    pub type PWM_PRESCALER_R = crate::FieldReader<u8>;
    #[doc = "Field `PWM_PRESCALER` writer - PWM Prescaler Register"]
    pub type PWM_PRESCALER_W<'a, const O: u8> = crate::FieldWriter<'a, PSCLR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - PWM Prescaler Register"]
        #[inline(always)]
        pub fn pwm_prescaler(&self) -> PWM_PRESCALER_R {
            PWM_PRESCALER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - PWM Prescaler Register"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_prescaler(&mut self) -> PWM_PRESCALER_W<0> {
            PWM_PRESCALER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PWM Prescaler Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psclr](index.html) module"]
    pub struct PSCLR;
    impl crate::RegisterSpec for PSCLR {
        const ADDRESS: u8 = 132u8;
    }
    #[doc = "`read()` method returns [psclr::R](R) reader structure"]
    impl crate::Readable for PSCLR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [psclr::W](W) writer structure"]
    impl crate::Writable for PSCLR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PSCLR to value 0"]
    impl crate::Resettable for PSCLR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pmuxr::PMUXR;
#[doc = "PWM clock Mux Register"]
pub mod pmuxr {
    #[doc = "Register `PMUXR` reader"]
    pub struct R(crate::R<PMUXR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PMUXR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PMUXR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PMUXR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PMUXR` writer"]
    pub struct W(crate::W<PMUXR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PMUXR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PMUXR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PMUXR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PWM0_PIN_FUNCTION` reader - XPWM\\[0\\]
pin function control"]
    pub type PWM0_PIN_FUNCTION_R = crate::FieldReader<u8>;
    #[doc = "Field `PWM0_PIN_FUNCTION` writer - XPWM\\[0\\]
pin function control"]
    pub type PWM0_PIN_FUNCTION_W<'a, const O: u8> = crate::FieldWriter<'a, PMUXR, u8, u8, 2, O>;
    #[doc = "Field `PWM1_PIN_FUNCTION` reader - XPWM\\[1\\]
pin function control"]
    pub type PWM1_PIN_FUNCTION_R = crate::FieldReader<u8>;
    #[doc = "Field `PWM1_PIN_FUNCTION` writer - XPWM\\[1\\]
pin function control"]
    pub type PWM1_PIN_FUNCTION_W<'a, const O: u8> = crate::FieldWriter<'a, PMUXR, u8, u8, 2, O>;
    #[doc = "Field `PWM_TIMER0_CLOCK_DIVIDER` reader - Select 2 clock divider's MUX input for PWM Timer 0"]
    pub type PWM_TIMER0_CLOCK_DIVIDER_R = crate::FieldReader<u8>;
    #[doc = "Field `PWM_TIMER0_CLOCK_DIVIDER` writer - Select 2 clock divider's MUX input for PWM Timer 0"]
    pub type PWM_TIMER0_CLOCK_DIVIDER_W<'a, const O: u8> =
        crate::FieldWriter<'a, PMUXR, u8, u8, 2, O>;
    #[doc = "Field `PWM_TIMER1_CLOCK_DIVIDER` reader - Select 2 clock divider's MUX input for PWM Timer 1"]
    pub type PWM_TIMER1_CLOCK_DIVIDER_R = crate::FieldReader<u8>;
    #[doc = "Field `PWM_TIMER1_CLOCK_DIVIDER` writer - Select 2 clock divider's MUX input for PWM Timer 1"]
    pub type PWM_TIMER1_CLOCK_DIVIDER_W<'a, const O: u8> =
        crate::FieldWriter<'a, PMUXR, u8, u8, 2, O>;
    impl R {
        #[doc = "Bits 0:1 - XPWM\\[0\\]
pin function control"]
        #[inline(always)]
        pub fn pwm0_pin_function(&self) -> PWM0_PIN_FUNCTION_R {
            PWM0_PIN_FUNCTION_R::new(self.bits & 3)
        }
        #[doc = "Bits 2:3 - XPWM\\[1\\]
pin function control"]
        #[inline(always)]
        pub fn pwm1_pin_function(&self) -> PWM1_PIN_FUNCTION_R {
            PWM1_PIN_FUNCTION_R::new((self.bits >> 2) & 3)
        }
        #[doc = "Bits 4:5 - Select 2 clock divider's MUX input for PWM Timer 0"]
        #[inline(always)]
        pub fn pwm_timer0_clock_divider(&self) -> PWM_TIMER0_CLOCK_DIVIDER_R {
            PWM_TIMER0_CLOCK_DIVIDER_R::new((self.bits >> 4) & 3)
        }
        #[doc = "Bits 6:7 - Select 2 clock divider's MUX input for PWM Timer 1"]
        #[inline(always)]
        pub fn pwm_timer1_clock_divider(&self) -> PWM_TIMER1_CLOCK_DIVIDER_R {
            PWM_TIMER1_CLOCK_DIVIDER_R::new((self.bits >> 6) & 3)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - XPWM\\[0\\]
pin function control"]
        #[inline(always)]
        #[must_use]
        pub fn pwm0_pin_function(&mut self) -> PWM0_PIN_FUNCTION_W<0> {
            PWM0_PIN_FUNCTION_W::new(self)
        }
        #[doc = "Bits 2:3 - XPWM\\[1\\]
pin function control"]
        #[inline(always)]
        #[must_use]
        pub fn pwm1_pin_function(&mut self) -> PWM1_PIN_FUNCTION_W<2> {
            PWM1_PIN_FUNCTION_W::new(self)
        }
        #[doc = "Bits 4:5 - Select 2 clock divider's MUX input for PWM Timer 0"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer0_clock_divider(&mut self) -> PWM_TIMER0_CLOCK_DIVIDER_W<4> {
            PWM_TIMER0_CLOCK_DIVIDER_W::new(self)
        }
        #[doc = "Bits 6:7 - Select 2 clock divider's MUX input for PWM Timer 1"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer1_clock_divider(&mut self) -> PWM_TIMER1_CLOCK_DIVIDER_W<6> {
            PWM_TIMER1_CLOCK_DIVIDER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PWM clock Mux Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pmuxr](index.html) module"]
    pub struct PMUXR;
    impl crate::RegisterSpec for PMUXR {
        const ADDRESS: u8 = 133u8;
    }
    #[doc = "`read()` method returns [pmuxr::R](R) reader structure"]
    impl crate::Readable for PMUXR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pmuxr::W](W) writer structure"]
    impl crate::Writable for PMUXR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PMUXR to value 0"]
    impl crate::Resettable for PMUXR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pcfgr::PCFGR;
#[doc = "PWM Configuration Register"]
pub mod pcfgr {
    #[doc = "Register `PCFGR` reader"]
    pub struct R(crate::R<PCFGR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PCFGR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PCFGR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PCFGR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PCFGR` writer"]
    pub struct W(crate::W<PCFGR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PCFGR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PCFGR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PCFGR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PWM_TIMER0_ENABLE` reader - PWM Timer 0 start/stop"]
    pub type PWM_TIMER0_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER0_ENABLE` writer - PWM Timer 0 start/stop"]
    pub type PWM_TIMER0_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PCFGR, bool, O>;
    #[doc = "Field `PWM_TIMER0_AUTO_RELOAD_ENABLE` reader - PWM Timer 0 auto reload on/off"]
    pub type PWM_TIMER0_AUTO_RELOAD_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER0_AUTO_RELOAD_ENABLE` writer - PWM Timer 0 auto reload on/off"]
    pub type PWM_TIMER0_AUTO_RELOAD_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, PCFGR, bool, O>;
    #[doc = "Field `PWM_TIMER0_OUTPUT_INVERTER_ENABLE` reader - PWM Timer 0 output inverter on/off"]
    pub type PWM_TIMER0_OUTPUT_INVERTER_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER0_OUTPUT_INVERTER_ENABLE` writer - PWM Timer 0 output inverter on/off"]
    pub type PWM_TIMER0_OUTPUT_INVERTER_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, PCFGR, bool, O>;
    #[doc = "Field `PWM_TIMER0_DEAD_ZONE_ENABLE` reader - PWM Timer 0 Dead zone enable"]
    pub type PWM_TIMER0_DEAD_ZONE_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER0_DEAD_ZONE_ENABLE` writer - PWM Timer 0 Dead zone enable"]
    pub type PWM_TIMER0_DEAD_ZONE_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PCFGR, bool, O>;
    #[doc = "Field `PWM_TIMER1_ENABLE` reader - PWM Timer 1 start/stop"]
    pub type PWM_TIMER1_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER1_ENABLE` writer - PWM Timer 1 start/stop"]
    pub type PWM_TIMER1_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PCFGR, bool, O>;
    #[doc = "Field `PWM_TIMER1_AUTO_RELOAD_ENABLE` reader - PWM Timer 1 auto reload on/off"]
    pub type PWM_TIMER1_AUTO_RELOAD_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER1_AUTO_RELOAD_ENABLE` writer - PWM Timer 1 auto reload on/off"]
    pub type PWM_TIMER1_AUTO_RELOAD_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, PCFGR, bool, O>;
    #[doc = "Field `PWM_TIMER1_OUTPUT_INVERTER_ENABLE` reader - PWM Timer 1 output inverter on/off"]
    pub type PWM_TIMER1_OUTPUT_INVERTER_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `PWM_TIMER1_OUTPUT_INVERTER_ENABLE` writer - PWM Timer 1 output inverter on/off"]
    pub type PWM_TIMER1_OUTPUT_INVERTER_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, PCFGR, bool, O>;
    impl R {
        #[doc = "Bit 0 - PWM Timer 0 start/stop"]
        #[inline(always)]
        pub fn pwm_timer0_enable(&self) -> PWM_TIMER0_ENABLE_R {
            PWM_TIMER0_ENABLE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - PWM Timer 0 auto reload on/off"]
        #[inline(always)]
        pub fn pwm_timer0_auto_reload_enable(&self) -> PWM_TIMER0_AUTO_RELOAD_ENABLE_R {
            PWM_TIMER0_AUTO_RELOAD_ENABLE_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - PWM Timer 0 output inverter on/off"]
        #[inline(always)]
        pub fn pwm_timer0_output_inverter_enable(&self) -> PWM_TIMER0_OUTPUT_INVERTER_ENABLE_R {
            PWM_TIMER0_OUTPUT_INVERTER_ENABLE_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - PWM Timer 0 Dead zone enable"]
        #[inline(always)]
        pub fn pwm_timer0_dead_zone_enable(&self) -> PWM_TIMER0_DEAD_ZONE_ENABLE_R {
            PWM_TIMER0_DEAD_ZONE_ENABLE_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - PWM Timer 1 start/stop"]
        #[inline(always)]
        pub fn pwm_timer1_enable(&self) -> PWM_TIMER1_ENABLE_R {
            PWM_TIMER1_ENABLE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - PWM Timer 1 auto reload on/off"]
        #[inline(always)]
        pub fn pwm_timer1_auto_reload_enable(&self) -> PWM_TIMER1_AUTO_RELOAD_ENABLE_R {
            PWM_TIMER1_AUTO_RELOAD_ENABLE_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - PWM Timer 1 output inverter on/off"]
        #[inline(always)]
        pub fn pwm_timer1_output_inverter_enable(&self) -> PWM_TIMER1_OUTPUT_INVERTER_ENABLE_R {
            PWM_TIMER1_OUTPUT_INVERTER_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - PWM Timer 0 start/stop"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer0_enable(&mut self) -> PWM_TIMER0_ENABLE_W<0> {
            PWM_TIMER0_ENABLE_W::new(self)
        }
        #[doc = "Bit 1 - PWM Timer 0 auto reload on/off"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer0_auto_reload_enable(&mut self) -> PWM_TIMER0_AUTO_RELOAD_ENABLE_W<1> {
            PWM_TIMER0_AUTO_RELOAD_ENABLE_W::new(self)
        }
        #[doc = "Bit 2 - PWM Timer 0 output inverter on/off"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer0_output_inverter_enable(
            &mut self,
        ) -> PWM_TIMER0_OUTPUT_INVERTER_ENABLE_W<2> {
            PWM_TIMER0_OUTPUT_INVERTER_ENABLE_W::new(self)
        }
        #[doc = "Bit 3 - PWM Timer 0 Dead zone enable"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer0_dead_zone_enable(&mut self) -> PWM_TIMER0_DEAD_ZONE_ENABLE_W<3> {
            PWM_TIMER0_DEAD_ZONE_ENABLE_W::new(self)
        }
        #[doc = "Bit 4 - PWM Timer 1 start/stop"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer1_enable(&mut self) -> PWM_TIMER1_ENABLE_W<4> {
            PWM_TIMER1_ENABLE_W::new(self)
        }
        #[doc = "Bit 5 - PWM Timer 1 auto reload on/off"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer1_auto_reload_enable(&mut self) -> PWM_TIMER1_AUTO_RELOAD_ENABLE_W<5> {
            PWM_TIMER1_AUTO_RELOAD_ENABLE_W::new(self)
        }
        #[doc = "Bit 6 - PWM Timer 1 output inverter on/off"]
        #[inline(always)]
        #[must_use]
        pub fn pwm_timer1_output_inverter_enable(
            &mut self,
        ) -> PWM_TIMER1_OUTPUT_INVERTER_ENABLE_W<6> {
            PWM_TIMER1_OUTPUT_INVERTER_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "PWM Configuration Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcfgr](index.html) module"]
    pub struct PCFGR;
    impl crate::RegisterSpec for PCFGR {
        const ADDRESS: u8 = 134u8;
    }
    #[doc = "`read()` method returns [pcfgr::R](R) reader structure"]
    impl crate::Readable for PCFGR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pcfgr::W](W) writer structure"]
    impl crate::Writable for PCFGR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PCFGR to value 0x22"]
    impl crate::Resettable for PCFGR {
        const RESET_VALUE: u8 = 0x22;
    }
}
pub use dz_length::DZ_LENGTH;
#[doc = "Timer 0 Dead zone length register"]
pub mod dz_length {
    #[doc = "Register `DZ_LENGTH` reader"]
    pub struct R(crate::R<DZ_LENGTH>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DZ_LENGTH>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DZ_LENGTH>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DZ_LENGTH>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DZ_LENGTH` writer"]
    pub struct W(crate::W<DZ_LENGTH>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DZ_LENGTH>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DZ_LENGTH>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DZ_LENGTH>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER0_DEAD_ZONE_LENGTH` reader - Timer 0 Dead zone length register"]
    pub type TIMER0_DEAD_ZONE_LENGTH_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER0_DEAD_ZONE_LENGTH` writer - Timer 0 Dead zone length register"]
    pub type TIMER0_DEAD_ZONE_LENGTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, DZ_LENGTH, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 0 Dead zone length register"]
        #[inline(always)]
        pub fn timer0_dead_zone_length(&self) -> TIMER0_DEAD_ZONE_LENGTH_R {
            TIMER0_DEAD_ZONE_LENGTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 0 Dead zone length register"]
        #[inline(always)]
        #[must_use]
        pub fn timer0_dead_zone_length(&mut self) -> TIMER0_DEAD_ZONE_LENGTH_W<0> {
            TIMER0_DEAD_ZONE_LENGTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 0 Dead zone length register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dz_length](index.html) module"]
    pub struct DZ_LENGTH;
    impl crate::RegisterSpec for DZ_LENGTH {
        const ADDRESS: u8 = 135u8;
    }
    #[doc = "`read()` method returns [dz_length::R](R) reader structure"]
    impl crate::Readable for DZ_LENGTH {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dz_length::W](W) writer structure"]
    impl crate::Writable for DZ_LENGTH {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DZ_LENGTH to value 0"]
    impl crate::Resettable for DZ_LENGTH {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcmpb0l::TCMPB0L;
#[doc = "Timer 0 compare buffer register"]
pub mod tcmpb0l {
    #[doc = "Register `TCMPB0L` reader"]
    pub struct R(crate::R<TCMPB0L>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCMPB0L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCMPB0L>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCMPB0L>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCMPB0L` writer"]
    pub struct W(crate::W<TCMPB0L>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCMPB0L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCMPB0L>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCMPB0L>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER0_COMPARE_BUFFER` reader - Timer 0 compare buffer register --- Low Byte"]
    pub type TIMER0_COMPARE_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER0_COMPARE_BUFFER` writer - Timer 0 compare buffer register --- Low Byte"]
    pub type TIMER0_COMPARE_BUFFER_W<'a, const O: u8> =
        crate::FieldWriter<'a, TCMPB0L, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 0 compare buffer register --- Low Byte"]
        #[inline(always)]
        pub fn timer0_compare_buffer(&self) -> TIMER0_COMPARE_BUFFER_R {
            TIMER0_COMPARE_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 0 compare buffer register --- Low Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer0_compare_buffer(&mut self) -> TIMER0_COMPARE_BUFFER_W<0> {
            TIMER0_COMPARE_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 0 compare buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcmpb0l](index.html) module"]
    pub struct TCMPB0L;
    impl crate::RegisterSpec for TCMPB0L {
        const ADDRESS: u8 = 136u8;
    }
    #[doc = "`read()` method returns [tcmpb0l::R](R) reader structure"]
    impl crate::Readable for TCMPB0L {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcmpb0l::W](W) writer structure"]
    impl crate::Writable for TCMPB0L {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCMPB0L to value 0"]
    impl crate::Resettable for TCMPB0L {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcmpb0h::TCMPB0H;
#[doc = "Timer 0 compare buffer register"]
pub mod tcmpb0h {
    #[doc = "Register `TCMPB0H` reader"]
    pub struct R(crate::R<TCMPB0H>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCMPB0H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCMPB0H>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCMPB0H>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCMPB0H` writer"]
    pub struct W(crate::W<TCMPB0H>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCMPB0H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCMPB0H>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCMPB0H>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER0_COMPARE_BUFFER` reader - Timer 0 compare buffer register --- High Byte"]
    pub type TIMER0_COMPARE_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER0_COMPARE_BUFFER` writer - Timer 0 compare buffer register --- High Byte"]
    pub type TIMER0_COMPARE_BUFFER_W<'a, const O: u8> =
        crate::FieldWriter<'a, TCMPB0H, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 0 compare buffer register --- High Byte"]
        #[inline(always)]
        pub fn timer0_compare_buffer(&self) -> TIMER0_COMPARE_BUFFER_R {
            TIMER0_COMPARE_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 0 compare buffer register --- High Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer0_compare_buffer(&mut self) -> TIMER0_COMPARE_BUFFER_W<0> {
            TIMER0_COMPARE_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 0 compare buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcmpb0h](index.html) module"]
    pub struct TCMPB0H;
    impl crate::RegisterSpec for TCMPB0H {
        const ADDRESS: u8 = 137u8;
    }
    #[doc = "`read()` method returns [tcmpb0h::R](R) reader structure"]
    impl crate::Readable for TCMPB0H {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcmpb0h::W](W) writer structure"]
    impl crate::Writable for TCMPB0H {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCMPB0H to value 0"]
    impl crate::Resettable for TCMPB0H {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcntb0l::TCNTB0L;
#[doc = "Timer 0 count buffer register"]
pub mod tcntb0l {
    #[doc = "Register `TCNTB0L` reader"]
    pub struct R(crate::R<TCNTB0L>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCNTB0L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCNTB0L>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCNTB0L>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCNTB0L` writer"]
    pub struct W(crate::W<TCNTB0L>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCNTB0L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCNTB0L>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCNTB0L>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER0_COUNT_BUFFER` reader - Timer 0 count buffer register --- Low Byte"]
    pub type TIMER0_COUNT_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER0_COUNT_BUFFER` writer - Timer 0 count buffer register --- Low Byte"]
    pub type TIMER0_COUNT_BUFFER_W<'a, const O: u8> = crate::FieldWriter<'a, TCNTB0L, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 0 count buffer register --- Low Byte"]
        #[inline(always)]
        pub fn timer0_count_buffer(&self) -> TIMER0_COUNT_BUFFER_R {
            TIMER0_COUNT_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 0 count buffer register --- Low Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer0_count_buffer(&mut self) -> TIMER0_COUNT_BUFFER_W<0> {
            TIMER0_COUNT_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 0 count buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcntb0l](index.html) module"]
    pub struct TCNTB0L;
    impl crate::RegisterSpec for TCNTB0L {
        const ADDRESS: u8 = 138u8;
    }
    #[doc = "`read()` method returns [tcntb0l::R](R) reader structure"]
    impl crate::Readable for TCNTB0L {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcntb0l::W](W) writer structure"]
    impl crate::Writable for TCNTB0L {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCNTB0L to value 0"]
    impl crate::Resettable for TCNTB0L {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcntb0h::TCNTB0H;
#[doc = "Timer 0 count buffer register"]
pub mod tcntb0h {
    #[doc = "Register `TCNTB0H` reader"]
    pub struct R(crate::R<TCNTB0H>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCNTB0H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCNTB0H>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCNTB0H>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCNTB0H` writer"]
    pub struct W(crate::W<TCNTB0H>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCNTB0H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCNTB0H>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCNTB0H>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER0_COUNT_BUFFER` reader - Timer 0 count buffer register --- High Byte"]
    pub type TIMER0_COUNT_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER0_COUNT_BUFFER` writer - Timer 0 count buffer register --- High Byte"]
    pub type TIMER0_COUNT_BUFFER_W<'a, const O: u8> = crate::FieldWriter<'a, TCNTB0H, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 0 count buffer register --- High Byte"]
        #[inline(always)]
        pub fn timer0_count_buffer(&self) -> TIMER0_COUNT_BUFFER_R {
            TIMER0_COUNT_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 0 count buffer register --- High Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer0_count_buffer(&mut self) -> TIMER0_COUNT_BUFFER_W<0> {
            TIMER0_COUNT_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 0 count buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcntb0h](index.html) module"]
    pub struct TCNTB0H;
    impl crate::RegisterSpec for TCNTB0H {
        const ADDRESS: u8 = 139u8;
    }
    #[doc = "`read()` method returns [tcntb0h::R](R) reader structure"]
    impl crate::Readable for TCNTB0H {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcntb0h::W](W) writer structure"]
    impl crate::Writable for TCNTB0H {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCNTB0H to value 0"]
    impl crate::Resettable for TCNTB0H {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcmpb1l::TCMPB1L;
#[doc = "Timer 1 compare buffer register"]
pub mod tcmpb1l {
    #[doc = "Register `TCMPB1L` reader"]
    pub struct R(crate::R<TCMPB1L>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCMPB1L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCMPB1L>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCMPB1L>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCMPB1L` writer"]
    pub struct W(crate::W<TCMPB1L>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCMPB1L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCMPB1L>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCMPB1L>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER1_COMPARE_BUFFER` reader - Timer 1 compare buffer register --- Low Byte"]
    pub type TIMER1_COMPARE_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER1_COMPARE_BUFFER` writer - Timer 1 compare buffer register --- Low Byte"]
    pub type TIMER1_COMPARE_BUFFER_W<'a, const O: u8> =
        crate::FieldWriter<'a, TCMPB1L, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 1 compare buffer register --- Low Byte"]
        #[inline(always)]
        pub fn timer1_compare_buffer(&self) -> TIMER1_COMPARE_BUFFER_R {
            TIMER1_COMPARE_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 1 compare buffer register --- Low Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer1_compare_buffer(&mut self) -> TIMER1_COMPARE_BUFFER_W<0> {
            TIMER1_COMPARE_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 1 compare buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcmpb1l](index.html) module"]
    pub struct TCMPB1L;
    impl crate::RegisterSpec for TCMPB1L {
        const ADDRESS: u8 = 140u8;
    }
    #[doc = "`read()` method returns [tcmpb1l::R](R) reader structure"]
    impl crate::Readable for TCMPB1L {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcmpb1l::W](W) writer structure"]
    impl crate::Writable for TCMPB1L {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCMPB1L to value 0"]
    impl crate::Resettable for TCMPB1L {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcmpb1h::TCMPB1H;
#[doc = "Timer 1 compare buffer register"]
pub mod tcmpb1h {
    #[doc = "Register `TCMPB1H` reader"]
    pub struct R(crate::R<TCMPB1H>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCMPB1H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCMPB1H>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCMPB1H>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCMPB1H` writer"]
    pub struct W(crate::W<TCMPB1H>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCMPB1H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCMPB1H>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCMPB1H>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER1_COMPARE_BUFFER` reader - Timer 1 compare buffer register --- High Byte"]
    pub type TIMER1_COMPARE_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER1_COMPARE_BUFFER` writer - Timer 1 compare buffer register --- High Byte"]
    pub type TIMER1_COMPARE_BUFFER_W<'a, const O: u8> =
        crate::FieldWriter<'a, TCMPB1H, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 1 compare buffer register --- High Byte"]
        #[inline(always)]
        pub fn timer1_compare_buffer(&self) -> TIMER1_COMPARE_BUFFER_R {
            TIMER1_COMPARE_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 1 compare buffer register --- High Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer1_compare_buffer(&mut self) -> TIMER1_COMPARE_BUFFER_W<0> {
            TIMER1_COMPARE_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 1 compare buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcmpb1h](index.html) module"]
    pub struct TCMPB1H;
    impl crate::RegisterSpec for TCMPB1H {
        const ADDRESS: u8 = 141u8;
    }
    #[doc = "`read()` method returns [tcmpb1h::R](R) reader structure"]
    impl crate::Readable for TCMPB1H {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcmpb1h::W](W) writer structure"]
    impl crate::Writable for TCMPB1H {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCMPB1H to value 0"]
    impl crate::Resettable for TCMPB1H {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcntb1l::TCNTB1L;
#[doc = "Timer 1 count buffer register"]
pub mod tcntb1l {
    #[doc = "Register `TCNTB1L` reader"]
    pub struct R(crate::R<TCNTB1L>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCNTB1L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCNTB1L>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCNTB1L>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCNTB1L` writer"]
    pub struct W(crate::W<TCNTB1L>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCNTB1L>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCNTB1L>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCNTB1L>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER1_COUNT_BUFFER` reader - Timer 1 count buffer register --- Low Byte"]
    pub type TIMER1_COUNT_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER1_COUNT_BUFFER` writer - Timer 1 count buffer register --- Low Byte"]
    pub type TIMER1_COUNT_BUFFER_W<'a, const O: u8> = crate::FieldWriter<'a, TCNTB1L, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 1 count buffer register --- Low Byte"]
        #[inline(always)]
        pub fn timer1_count_buffer(&self) -> TIMER1_COUNT_BUFFER_R {
            TIMER1_COUNT_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 1 count buffer register --- Low Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer1_count_buffer(&mut self) -> TIMER1_COUNT_BUFFER_W<0> {
            TIMER1_COUNT_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 1 count buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcntb1l](index.html) module"]
    pub struct TCNTB1L;
    impl crate::RegisterSpec for TCNTB1L {
        const ADDRESS: u8 = 142u8;
    }
    #[doc = "`read()` method returns [tcntb1l::R](R) reader structure"]
    impl crate::Readable for TCNTB1L {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcntb1l::W](W) writer structure"]
    impl crate::Writable for TCNTB1L {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCNTB1L to value 0"]
    impl crate::Resettable for TCNTB1L {
        const RESET_VALUE: u8 = 0;
    }
}
pub use tcntb1h::TCNTB1H;
#[doc = "Timer 1 count buffer register"]
pub mod tcntb1h {
    #[doc = "Register `TCNTB1H` reader"]
    pub struct R(crate::R<TCNTB1H>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<TCNTB1H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<TCNTB1H>> for R {
        #[inline(always)]
        fn from(reader: crate::R<TCNTB1H>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `TCNTB1H` writer"]
    pub struct W(crate::W<TCNTB1H>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<TCNTB1H>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<TCNTB1H>> for W {
        #[inline(always)]
        fn from(writer: crate::W<TCNTB1H>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TIMER1_COUNT_BUFFER` reader - Timer 1 count buffer register --- High Byte"]
    pub type TIMER1_COUNT_BUFFER_R = crate::FieldReader<u8>;
    #[doc = "Field `TIMER1_COUNT_BUFFER` writer - Timer 1 count buffer register --- High Byte"]
    pub type TIMER1_COUNT_BUFFER_W<'a, const O: u8> = crate::FieldWriter<'a, TCNTB1H, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Timer 1 count buffer register --- High Byte"]
        #[inline(always)]
        pub fn timer1_count_buffer(&self) -> TIMER1_COUNT_BUFFER_R {
            TIMER1_COUNT_BUFFER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Timer 1 count buffer register --- High Byte"]
        #[inline(always)]
        #[must_use]
        pub fn timer1_count_buffer(&mut self) -> TIMER1_COUNT_BUFFER_W<0> {
            TIMER1_COUNT_BUFFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Timer 1 count buffer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tcntb1h](index.html) module"]
    pub struct TCNTB1H;
    impl crate::RegisterSpec for TCNTB1H {
        const ADDRESS: u8 = 143u8;
    }
    #[doc = "`read()` method returns [tcntb1h::R](R) reader structure"]
    impl crate::Readable for TCNTB1H {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [tcntb1h::W](W) writer structure"]
    impl crate::Writable for TCNTB1H {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets TCNTB1H to value 0"]
    impl crate::Resettable for TCNTB1H {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bte_ctrl0::BTE_CTRL0;
#[doc = "BTE Function Control Register 0"]
pub mod bte_ctrl0 {
    #[doc = "Register `BTE_CTRL0` reader"]
    pub struct R(crate::R<BTE_CTRL0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTE_CTRL0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTE_CTRL0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTE_CTRL0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTE_CTRL0` writer"]
    pub struct W(crate::W<BTE_CTRL0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTE_CTRL0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTE_CTRL0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTE_CTRL0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `PATTERN_FORMAT` reader - PATTERN Format"]
    pub type PATTERN_FORMAT_R = crate::BitReader<PATTERN_FORMAT_A>;
    #[doc = "PATTERN Format\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum PATTERN_FORMAT_A {
        #[doc = "0: 8x8"]
        FORMAT_8X8 = 0,
        #[doc = "1: 16x16"]
        FORMAT_16X16 = 1,
    }
    impl From<PATTERN_FORMAT_A> for bool {
        #[inline(always)]
        fn from(variant: PATTERN_FORMAT_A) -> Self {
            variant as u8 != 0
        }
    }
    impl PATTERN_FORMAT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> PATTERN_FORMAT_A {
            match self.bits {
                false => PATTERN_FORMAT_A::FORMAT_8X8,
                true => PATTERN_FORMAT_A::FORMAT_16X16,
            }
        }
        #[doc = "Checks if the value of the field is `FORMAT_8X8`"]
        #[inline(always)]
        pub fn is_format_8x8(&self) -> bool {
            *self == PATTERN_FORMAT_A::FORMAT_8X8
        }
        #[doc = "Checks if the value of the field is `FORMAT_16X16`"]
        #[inline(always)]
        pub fn is_format_16x16(&self) -> bool {
            *self == PATTERN_FORMAT_A::FORMAT_16X16
        }
    }
    #[doc = "Field `PATTERN_FORMAT` writer - PATTERN Format"]
    pub type PATTERN_FORMAT_W<'a, const O: u8> =
        crate::BitWriter<'a, BTE_CTRL0, PATTERN_FORMAT_A, O>;
    impl<'a, const O: u8> PATTERN_FORMAT_W<'a, O> {
        #[doc = "8x8"]
        #[inline(always)]
        pub fn format_8x8(self) -> &'a mut W {
            self.variant(PATTERN_FORMAT_A::FORMAT_8X8)
        }
        #[doc = "16x16"]
        #[inline(always)]
        pub fn format_16x16(self) -> &'a mut W {
            self.variant(PATTERN_FORMAT_A::FORMAT_16X16)
        }
    }
    #[doc = "Field `BTE_FUNCTION_ENABLE` reader - BTE Function Enable / Status"]
    pub type BTE_FUNCTION_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `BTE_FUNCTION_ENABLE` writer - BTE Function Enable / Status"]
    pub type BTE_FUNCTION_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, BTE_CTRL0, bool, O>;
    impl R {
        #[doc = "Bit 0 - PATTERN Format"]
        #[inline(always)]
        pub fn pattern_format(&self) -> PATTERN_FORMAT_R {
            PATTERN_FORMAT_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 4 - BTE Function Enable / Status"]
        #[inline(always)]
        pub fn bte_function_enable(&self) -> BTE_FUNCTION_ENABLE_R {
            BTE_FUNCTION_ENABLE_R::new(((self.bits >> 4) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - PATTERN Format"]
        #[inline(always)]
        #[must_use]
        pub fn pattern_format(&mut self) -> PATTERN_FORMAT_W<0> {
            PATTERN_FORMAT_W::new(self)
        }
        #[doc = "Bit 4 - BTE Function Enable / Status"]
        #[inline(always)]
        #[must_use]
        pub fn bte_function_enable(&mut self) -> BTE_FUNCTION_ENABLE_W<4> {
            BTE_FUNCTION_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "BTE Function Control Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bte_ctrl0](index.html) module"]
    pub struct BTE_CTRL0;
    impl crate::RegisterSpec for BTE_CTRL0 {
        const ADDRESS: u8 = 144u8;
    }
    #[doc = "`read()` method returns [bte_ctrl0::R](R) reader structure"]
    impl crate::Readable for BTE_CTRL0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bte_ctrl0::W](W) writer structure"]
    impl crate::Writable for BTE_CTRL0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTE_CTRL0 to value 0"]
    impl crate::Resettable for BTE_CTRL0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bte_ctrl1::BTE_CTRL1;
#[doc = "BTE Function Control Register 1"]
pub mod bte_ctrl1 {
    #[doc = "Register `BTE_CTRL1` reader"]
    pub struct R(crate::R<BTE_CTRL1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTE_CTRL1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTE_CTRL1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTE_CTRL1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTE_CTRL1` writer"]
    pub struct W(crate::W<BTE_CTRL1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTE_CTRL1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTE_CTRL1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTE_CTRL1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BTE_OPERATION_CODE` reader - BTE Operation Code"]
    pub type BTE_OPERATION_CODE_R = crate::FieldReader<BTE_OPERATION_CODE_A>;
    #[doc = "BTE Operation Code\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum BTE_OPERATION_CODE_A {
        #[doc = "0: MPU Write with ROP"]
        MPU_WRITE_WITH_ROP = 0,
        #[doc = "1: Reserved"]
        RESERVED1 = 1,
        #[doc = "2: Memory Copy with ROP"]
        MEMORY_COPY_WITH_ROP = 2,
        #[doc = "3: Reserved"]
        RESERVED3 = 3,
        #[doc = "4: MPU Write with chroma keying (without ROP)"]
        MPU_WRITE_WITH_CHROMA = 4,
        #[doc = "5: Memory Copy (move) with chroma keying (without ROP)"]
        MEMORY_COPY_WITH_CHROMA = 5,
        #[doc = "6: Pattern Fill with ROP"]
        PATTERN_FILL_WITH_ROP = 6,
        #[doc = "7: Pattern Fill with chroma keying"]
        PATTERN_FILL_WITH_CHROMA = 7,
        #[doc = "8: MPU Write with Color Expansion"]
        MPU_WRITE_COLOR_EXPANSION = 8,
        #[doc = "9: MPU Write with Color Expansion and chroma keying"]
        MPU_WRITE_COLOR_EXPANSION_WITH_CHROMA = 9,
        #[doc = "10: Memory Copy with opacity"]
        MEMORY_COPY_WITH_OPACITY = 10,
        #[doc = "11: MPU Write with opacity"]
        MPU_WRITE_WITH_OPACITY = 11,
        #[doc = "12: Solid Fill"]
        SOLID_FILL = 12,
        #[doc = "13: Reserved"]
        RESERVED13 = 13,
        #[doc = "14: Memory Copy with Color Expansion"]
        MEMORY_COPY_WITH_COLOR_EXPANSION = 14,
        #[doc = "15: Memory Copy with Color Expansion and chroma keying"]
        MEMORY_COPY_WITH_COLOR_EXPANSION_CHROMA = 15,
    }
    impl From<BTE_OPERATION_CODE_A> for u8 {
        #[inline(always)]
        fn from(variant: BTE_OPERATION_CODE_A) -> Self {
            variant as _
        }
    }
    impl BTE_OPERATION_CODE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> BTE_OPERATION_CODE_A {
            match self.bits {
                0 => BTE_OPERATION_CODE_A::MPU_WRITE_WITH_ROP,
                1 => BTE_OPERATION_CODE_A::RESERVED1,
                2 => BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_ROP,
                3 => BTE_OPERATION_CODE_A::RESERVED3,
                4 => BTE_OPERATION_CODE_A::MPU_WRITE_WITH_CHROMA,
                5 => BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_CHROMA,
                6 => BTE_OPERATION_CODE_A::PATTERN_FILL_WITH_ROP,
                7 => BTE_OPERATION_CODE_A::PATTERN_FILL_WITH_CHROMA,
                8 => BTE_OPERATION_CODE_A::MPU_WRITE_COLOR_EXPANSION,
                9 => BTE_OPERATION_CODE_A::MPU_WRITE_COLOR_EXPANSION_WITH_CHROMA,
                10 => BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_OPACITY,
                11 => BTE_OPERATION_CODE_A::MPU_WRITE_WITH_OPACITY,
                12 => BTE_OPERATION_CODE_A::SOLID_FILL,
                13 => BTE_OPERATION_CODE_A::RESERVED13,
                14 => BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_COLOR_EXPANSION,
                15 => BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_COLOR_EXPANSION_CHROMA,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `MPU_WRITE_WITH_ROP`"]
        #[inline(always)]
        pub fn is_mpu_write_with_rop(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MPU_WRITE_WITH_ROP
        }
        #[doc = "Checks if the value of the field is `RESERVED1`"]
        #[inline(always)]
        pub fn is_reserved1(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::RESERVED1
        }
        #[doc = "Checks if the value of the field is `MEMORY_COPY_WITH_ROP`"]
        #[inline(always)]
        pub fn is_memory_copy_with_rop(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_ROP
        }
        #[doc = "Checks if the value of the field is `RESERVED3`"]
        #[inline(always)]
        pub fn is_reserved3(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::RESERVED3
        }
        #[doc = "Checks if the value of the field is `MPU_WRITE_WITH_CHROMA`"]
        #[inline(always)]
        pub fn is_mpu_write_with_chroma(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MPU_WRITE_WITH_CHROMA
        }
        #[doc = "Checks if the value of the field is `MEMORY_COPY_WITH_CHROMA`"]
        #[inline(always)]
        pub fn is_memory_copy_with_chroma(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_CHROMA
        }
        #[doc = "Checks if the value of the field is `PATTERN_FILL_WITH_ROP`"]
        #[inline(always)]
        pub fn is_pattern_fill_with_rop(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::PATTERN_FILL_WITH_ROP
        }
        #[doc = "Checks if the value of the field is `PATTERN_FILL_WITH_CHROMA`"]
        #[inline(always)]
        pub fn is_pattern_fill_with_chroma(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::PATTERN_FILL_WITH_CHROMA
        }
        #[doc = "Checks if the value of the field is `MPU_WRITE_COLOR_EXPANSION`"]
        #[inline(always)]
        pub fn is_mpu_write_color_expansion(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MPU_WRITE_COLOR_EXPANSION
        }
        #[doc = "Checks if the value of the field is `MPU_WRITE_COLOR_EXPANSION_WITH_CHROMA`"]
        #[inline(always)]
        pub fn is_mpu_write_color_expansion_with_chroma(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MPU_WRITE_COLOR_EXPANSION_WITH_CHROMA
        }
        #[doc = "Checks if the value of the field is `MEMORY_COPY_WITH_OPACITY`"]
        #[inline(always)]
        pub fn is_memory_copy_with_opacity(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_OPACITY
        }
        #[doc = "Checks if the value of the field is `MPU_WRITE_WITH_OPACITY`"]
        #[inline(always)]
        pub fn is_mpu_write_with_opacity(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MPU_WRITE_WITH_OPACITY
        }
        #[doc = "Checks if the value of the field is `SOLID_FILL`"]
        #[inline(always)]
        pub fn is_solid_fill(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::SOLID_FILL
        }
        #[doc = "Checks if the value of the field is `RESERVED13`"]
        #[inline(always)]
        pub fn is_reserved13(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::RESERVED13
        }
        #[doc = "Checks if the value of the field is `MEMORY_COPY_WITH_COLOR_EXPANSION`"]
        #[inline(always)]
        pub fn is_memory_copy_with_color_expansion(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_COLOR_EXPANSION
        }
        #[doc = "Checks if the value of the field is `MEMORY_COPY_WITH_COLOR_EXPANSION_CHROMA`"]
        #[inline(always)]
        pub fn is_memory_copy_with_color_expansion_chroma(&self) -> bool {
            *self == BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_COLOR_EXPANSION_CHROMA
        }
    }
    #[doc = "Field `BTE_OPERATION_CODE` writer - BTE Operation Code"]
    pub type BTE_OPERATION_CODE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, BTE_CTRL1, u8, BTE_OPERATION_CODE_A, 4, O>;
    impl<'a, const O: u8> BTE_OPERATION_CODE_W<'a, O> {
        #[doc = "MPU Write with ROP"]
        #[inline(always)]
        pub fn mpu_write_with_rop(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MPU_WRITE_WITH_ROP)
        }
        #[doc = "Reserved"]
        #[inline(always)]
        pub fn reserved1(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::RESERVED1)
        }
        #[doc = "Memory Copy with ROP"]
        #[inline(always)]
        pub fn memory_copy_with_rop(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_ROP)
        }
        #[doc = "Reserved"]
        #[inline(always)]
        pub fn reserved3(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::RESERVED3)
        }
        #[doc = "MPU Write with chroma keying (without ROP)"]
        #[inline(always)]
        pub fn mpu_write_with_chroma(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MPU_WRITE_WITH_CHROMA)
        }
        #[doc = "Memory Copy (move) with chroma keying (without ROP)"]
        #[inline(always)]
        pub fn memory_copy_with_chroma(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_CHROMA)
        }
        #[doc = "Pattern Fill with ROP"]
        #[inline(always)]
        pub fn pattern_fill_with_rop(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::PATTERN_FILL_WITH_ROP)
        }
        #[doc = "Pattern Fill with chroma keying"]
        #[inline(always)]
        pub fn pattern_fill_with_chroma(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::PATTERN_FILL_WITH_CHROMA)
        }
        #[doc = "MPU Write with Color Expansion"]
        #[inline(always)]
        pub fn mpu_write_color_expansion(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MPU_WRITE_COLOR_EXPANSION)
        }
        #[doc = "MPU Write with Color Expansion and chroma keying"]
        #[inline(always)]
        pub fn mpu_write_color_expansion_with_chroma(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MPU_WRITE_COLOR_EXPANSION_WITH_CHROMA)
        }
        #[doc = "Memory Copy with opacity"]
        #[inline(always)]
        pub fn memory_copy_with_opacity(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_OPACITY)
        }
        #[doc = "MPU Write with opacity"]
        #[inline(always)]
        pub fn mpu_write_with_opacity(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MPU_WRITE_WITH_OPACITY)
        }
        #[doc = "Solid Fill"]
        #[inline(always)]
        pub fn solid_fill(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::SOLID_FILL)
        }
        #[doc = "Reserved"]
        #[inline(always)]
        pub fn reserved13(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::RESERVED13)
        }
        #[doc = "Memory Copy with Color Expansion"]
        #[inline(always)]
        pub fn memory_copy_with_color_expansion(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_COLOR_EXPANSION)
        }
        #[doc = "Memory Copy with Color Expansion and chroma keying"]
        #[inline(always)]
        pub fn memory_copy_with_color_expansion_chroma(self) -> &'a mut W {
            self.variant(BTE_OPERATION_CODE_A::MEMORY_COPY_WITH_COLOR_EXPANSION_CHROMA)
        }
    }
    #[doc = "Field `BTE_ROP_CODE` reader - BTE ROP Code or Color expansion starting bit"]
    pub type BTE_ROP_CODE_R = crate::FieldReader<u8>;
    #[doc = "Field `BTE_ROP_CODE` writer - BTE ROP Code or Color expansion starting bit"]
    pub type BTE_ROP_CODE_W<'a, const O: u8> = crate::FieldWriter<'a, BTE_CTRL1, u8, u8, 4, O>;
    impl R {
        #[doc = "Bits 0:3 - BTE Operation Code"]
        #[inline(always)]
        pub fn bte_operation_code(&self) -> BTE_OPERATION_CODE_R {
            BTE_OPERATION_CODE_R::new(self.bits & 0x0f)
        }
        #[doc = "Bits 4:7 - BTE ROP Code or Color expansion starting bit"]
        #[inline(always)]
        pub fn bte_rop_code(&self) -> BTE_ROP_CODE_R {
            BTE_ROP_CODE_R::new((self.bits >> 4) & 0x0f)
        }
    }
    impl W {
        #[doc = "Bits 0:3 - BTE Operation Code"]
        #[inline(always)]
        #[must_use]
        pub fn bte_operation_code(&mut self) -> BTE_OPERATION_CODE_W<0> {
            BTE_OPERATION_CODE_W::new(self)
        }
        #[doc = "Bits 4:7 - BTE ROP Code or Color expansion starting bit"]
        #[inline(always)]
        #[must_use]
        pub fn bte_rop_code(&mut self) -> BTE_ROP_CODE_W<4> {
            BTE_ROP_CODE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "BTE Function Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bte_ctrl1](index.html) module"]
    pub struct BTE_CTRL1;
    impl crate::RegisterSpec for BTE_CTRL1 {
        const ADDRESS: u8 = 145u8;
    }
    #[doc = "`read()` method returns [bte_ctrl1::R](R) reader structure"]
    impl crate::Readable for BTE_CTRL1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bte_ctrl1::W](W) writer structure"]
    impl crate::Writable for BTE_CTRL1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTE_CTRL1 to value 0"]
    impl crate::Resettable for BTE_CTRL1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bte_colr::BTE_COLR;
#[doc = "Source 0/1 &amp; Destination Color Depth"]
pub mod bte_colr {
    #[doc = "Register `BTE_COLR` reader"]
    pub struct R(crate::R<BTE_COLR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTE_COLR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTE_COLR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTE_COLR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTE_COLR` writer"]
    pub struct W(crate::W<BTE_COLR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTE_COLR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTE_COLR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTE_COLR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_COLOR_DEPTH` reader - Destination Color Depth"]
    pub type DESTINATION_COLOR_DEPTH_R = crate::FieldReader<DESTINATION_COLOR_DEPTH_A>;
    #[doc = "Destination Color Depth\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum DESTINATION_COLOR_DEPTH_A {
        #[doc = "0: 256 Color"]
        DEPTH_8BPP = 0,
        #[doc = "1: 64k Color"]
        DEPTH_16BPP = 1,
        #[doc = "2: 16M Color"]
        DEPTH_24BPP = 2,
    }
    impl From<DESTINATION_COLOR_DEPTH_A> for u8 {
        #[inline(always)]
        fn from(variant: DESTINATION_COLOR_DEPTH_A) -> Self {
            variant as _
        }
    }
    impl DESTINATION_COLOR_DEPTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> Option<DESTINATION_COLOR_DEPTH_A> {
            match self.bits {
                0 => Some(DESTINATION_COLOR_DEPTH_A::DEPTH_8BPP),
                1 => Some(DESTINATION_COLOR_DEPTH_A::DEPTH_16BPP),
                2 => Some(DESTINATION_COLOR_DEPTH_A::DEPTH_24BPP),
                _ => None,
            }
        }
        #[doc = "Checks if the value of the field is `DEPTH_8BPP`"]
        #[inline(always)]
        pub fn is_depth_8bpp(&self) -> bool {
            *self == DESTINATION_COLOR_DEPTH_A::DEPTH_8BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_16BPP`"]
        #[inline(always)]
        pub fn is_depth_16bpp(&self) -> bool {
            *self == DESTINATION_COLOR_DEPTH_A::DEPTH_16BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_24BPP`"]
        #[inline(always)]
        pub fn is_depth_24bpp(&self) -> bool {
            *self == DESTINATION_COLOR_DEPTH_A::DEPTH_24BPP
        }
    }
    #[doc = "Field `DESTINATION_COLOR_DEPTH` writer - Destination Color Depth"]
    pub type DESTINATION_COLOR_DEPTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, BTE_COLR, u8, DESTINATION_COLOR_DEPTH_A, 2, O>;
    impl<'a, const O: u8> DESTINATION_COLOR_DEPTH_W<'a, O> {
        #[doc = "256 Color"]
        #[inline(always)]
        pub fn depth_8bpp(self) -> &'a mut W {
            self.variant(DESTINATION_COLOR_DEPTH_A::DEPTH_8BPP)
        }
        #[doc = "64k Color"]
        #[inline(always)]
        pub fn depth_16bpp(self) -> &'a mut W {
            self.variant(DESTINATION_COLOR_DEPTH_A::DEPTH_16BPP)
        }
        #[doc = "16M Color"]
        #[inline(always)]
        pub fn depth_24bpp(self) -> &'a mut W {
            self.variant(DESTINATION_COLOR_DEPTH_A::DEPTH_24BPP)
        }
    }
    #[doc = "Field `SOURCE1_COLOR_DEPTH` reader - S1 Color Depth"]
    pub type SOURCE1_COLOR_DEPTH_R = crate::FieldReader<SOURCE1_COLOR_DEPTH_A>;
    #[doc = "S1 Color Depth\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum SOURCE1_COLOR_DEPTH_A {
        #[doc = "0: 256 Color"]
        DEPTH_8BPP = 0,
        #[doc = "1: 64k Color"]
        DEPTH_16BPP = 1,
        #[doc = "2: 16M Color"]
        DEPTH_24BPP = 2,
        #[doc = "3: Constant color (S1 address is interpreted as 24BPP RGB color)"]
        CONSTANT_COLOR = 3,
        #[doc = "4: 8 bit pixel alpha blending"]
        ALPHA_BLEND_8BPP = 4,
        #[doc = "5: 16 bit pixel alpha blending"]
        ALPHA_BLEND_16BPP = 5,
        #[doc = "6: Reserved"]
        RESERVED6 = 6,
        #[doc = "7: Reserved"]
        RESERVED7 = 7,
    }
    impl From<SOURCE1_COLOR_DEPTH_A> for u8 {
        #[inline(always)]
        fn from(variant: SOURCE1_COLOR_DEPTH_A) -> Self {
            variant as _
        }
    }
    impl SOURCE1_COLOR_DEPTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SOURCE1_COLOR_DEPTH_A {
            match self.bits {
                0 => SOURCE1_COLOR_DEPTH_A::DEPTH_8BPP,
                1 => SOURCE1_COLOR_DEPTH_A::DEPTH_16BPP,
                2 => SOURCE1_COLOR_DEPTH_A::DEPTH_24BPP,
                3 => SOURCE1_COLOR_DEPTH_A::CONSTANT_COLOR,
                4 => SOURCE1_COLOR_DEPTH_A::ALPHA_BLEND_8BPP,
                5 => SOURCE1_COLOR_DEPTH_A::ALPHA_BLEND_16BPP,
                6 => SOURCE1_COLOR_DEPTH_A::RESERVED6,
                7 => SOURCE1_COLOR_DEPTH_A::RESERVED7,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `DEPTH_8BPP`"]
        #[inline(always)]
        pub fn is_depth_8bpp(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::DEPTH_8BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_16BPP`"]
        #[inline(always)]
        pub fn is_depth_16bpp(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::DEPTH_16BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_24BPP`"]
        #[inline(always)]
        pub fn is_depth_24bpp(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::DEPTH_24BPP
        }
        #[doc = "Checks if the value of the field is `CONSTANT_COLOR`"]
        #[inline(always)]
        pub fn is_constant_color(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::CONSTANT_COLOR
        }
        #[doc = "Checks if the value of the field is `ALPHA_BLEND_8BPP`"]
        #[inline(always)]
        pub fn is_alpha_blend_8bpp(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::ALPHA_BLEND_8BPP
        }
        #[doc = "Checks if the value of the field is `ALPHA_BLEND_16BPP`"]
        #[inline(always)]
        pub fn is_alpha_blend_16bpp(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::ALPHA_BLEND_16BPP
        }
        #[doc = "Checks if the value of the field is `RESERVED6`"]
        #[inline(always)]
        pub fn is_reserved6(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::RESERVED6
        }
        #[doc = "Checks if the value of the field is `RESERVED7`"]
        #[inline(always)]
        pub fn is_reserved7(&self) -> bool {
            *self == SOURCE1_COLOR_DEPTH_A::RESERVED7
        }
    }
    #[doc = "Field `SOURCE1_COLOR_DEPTH` writer - S1 Color Depth"]
    pub type SOURCE1_COLOR_DEPTH_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, BTE_COLR, u8, SOURCE1_COLOR_DEPTH_A, 3, O>;
    impl<'a, const O: u8> SOURCE1_COLOR_DEPTH_W<'a, O> {
        #[doc = "256 Color"]
        #[inline(always)]
        pub fn depth_8bpp(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::DEPTH_8BPP)
        }
        #[doc = "64k Color"]
        #[inline(always)]
        pub fn depth_16bpp(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::DEPTH_16BPP)
        }
        #[doc = "16M Color"]
        #[inline(always)]
        pub fn depth_24bpp(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::DEPTH_24BPP)
        }
        #[doc = "Constant color (S1 address is interpreted as 24BPP RGB color)"]
        #[inline(always)]
        pub fn constant_color(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::CONSTANT_COLOR)
        }
        #[doc = "8 bit pixel alpha blending"]
        #[inline(always)]
        pub fn alpha_blend_8bpp(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::ALPHA_BLEND_8BPP)
        }
        #[doc = "16 bit pixel alpha blending"]
        #[inline(always)]
        pub fn alpha_blend_16bpp(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::ALPHA_BLEND_16BPP)
        }
        #[doc = "Reserved"]
        #[inline(always)]
        pub fn reserved6(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::RESERVED6)
        }
        #[doc = "Reserved"]
        #[inline(always)]
        pub fn reserved7(self) -> &'a mut W {
            self.variant(SOURCE1_COLOR_DEPTH_A::RESERVED7)
        }
    }
    #[doc = "Field `SOURCE0_COLOR_DEPTH` reader - S0 Color Depth"]
    pub type SOURCE0_COLOR_DEPTH_R = crate::FieldReader<SOURCE0_COLOR_DEPTH_A>;
    #[doc = "S0 Color Depth\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum SOURCE0_COLOR_DEPTH_A {
        #[doc = "0: 256 Color"]
        DEPTH_8BPP = 0,
        #[doc = "1: 64k Color"]
        DEPTH_16BPP = 1,
        #[doc = "2: 16M Color"]
        DEPTH_24BPP = 2,
    }
    impl From<SOURCE0_COLOR_DEPTH_A> for u8 {
        #[inline(always)]
        fn from(variant: SOURCE0_COLOR_DEPTH_A) -> Self {
            variant as _
        }
    }
    impl SOURCE0_COLOR_DEPTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> Option<SOURCE0_COLOR_DEPTH_A> {
            match self.bits {
                0 => Some(SOURCE0_COLOR_DEPTH_A::DEPTH_8BPP),
                1 => Some(SOURCE0_COLOR_DEPTH_A::DEPTH_16BPP),
                2 => Some(SOURCE0_COLOR_DEPTH_A::DEPTH_24BPP),
                _ => None,
            }
        }
        #[doc = "Checks if the value of the field is `DEPTH_8BPP`"]
        #[inline(always)]
        pub fn is_depth_8bpp(&self) -> bool {
            *self == SOURCE0_COLOR_DEPTH_A::DEPTH_8BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_16BPP`"]
        #[inline(always)]
        pub fn is_depth_16bpp(&self) -> bool {
            *self == SOURCE0_COLOR_DEPTH_A::DEPTH_16BPP
        }
        #[doc = "Checks if the value of the field is `DEPTH_24BPP`"]
        #[inline(always)]
        pub fn is_depth_24bpp(&self) -> bool {
            *self == SOURCE0_COLOR_DEPTH_A::DEPTH_24BPP
        }
    }
    #[doc = "Field `SOURCE0_COLOR_DEPTH` writer - S0 Color Depth"]
    pub type SOURCE0_COLOR_DEPTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, BTE_COLR, u8, SOURCE0_COLOR_DEPTH_A, 2, O>;
    impl<'a, const O: u8> SOURCE0_COLOR_DEPTH_W<'a, O> {
        #[doc = "256 Color"]
        #[inline(always)]
        pub fn depth_8bpp(self) -> &'a mut W {
            self.variant(SOURCE0_COLOR_DEPTH_A::DEPTH_8BPP)
        }
        #[doc = "64k Color"]
        #[inline(always)]
        pub fn depth_16bpp(self) -> &'a mut W {
            self.variant(SOURCE0_COLOR_DEPTH_A::DEPTH_16BPP)
        }
        #[doc = "16M Color"]
        #[inline(always)]
        pub fn depth_24bpp(self) -> &'a mut W {
            self.variant(SOURCE0_COLOR_DEPTH_A::DEPTH_24BPP)
        }
    }
    impl R {
        #[doc = "Bits 0:1 - Destination Color Depth"]
        #[inline(always)]
        pub fn destination_color_depth(&self) -> DESTINATION_COLOR_DEPTH_R {
            DESTINATION_COLOR_DEPTH_R::new(self.bits & 3)
        }
        #[doc = "Bits 2:4 - S1 Color Depth"]
        #[inline(always)]
        pub fn source1_color_depth(&self) -> SOURCE1_COLOR_DEPTH_R {
            SOURCE1_COLOR_DEPTH_R::new((self.bits >> 2) & 7)
        }
        #[doc = "Bits 5:6 - S0 Color Depth"]
        #[inline(always)]
        pub fn source0_color_depth(&self) -> SOURCE0_COLOR_DEPTH_R {
            SOURCE0_COLOR_DEPTH_R::new((self.bits >> 5) & 3)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Destination Color Depth"]
        #[inline(always)]
        #[must_use]
        pub fn destination_color_depth(&mut self) -> DESTINATION_COLOR_DEPTH_W<0> {
            DESTINATION_COLOR_DEPTH_W::new(self)
        }
        #[doc = "Bits 2:4 - S1 Color Depth"]
        #[inline(always)]
        #[must_use]
        pub fn source1_color_depth(&mut self) -> SOURCE1_COLOR_DEPTH_W<2> {
            SOURCE1_COLOR_DEPTH_W::new(self)
        }
        #[doc = "Bits 5:6 - S0 Color Depth"]
        #[inline(always)]
        #[must_use]
        pub fn source0_color_depth(&mut self) -> SOURCE0_COLOR_DEPTH_W<5> {
            SOURCE0_COLOR_DEPTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0/1 &amp; Destination Color Depth\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bte_colr](index.html) module"]
    pub struct BTE_COLR;
    impl crate::RegisterSpec for BTE_COLR {
        const ADDRESS: u8 = 146u8;
    }
    #[doc = "`read()` method returns [bte_colr::R](R) reader structure"]
    impl crate::Readable for BTE_COLR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bte_colr::W](W) writer structure"]
    impl crate::Writable for BTE_COLR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTE_COLR to value 0"]
    impl crate::Resettable for BTE_COLR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_str0::S0_STR0;
#[doc = "Source 0 memory start address 0"]
pub mod s0_str0 {
    #[doc = "Register `S0_STR0` reader"]
    pub struct R(crate::R<S0_STR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_STR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_STR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_STR0` writer"]
    pub struct W(crate::W<S0_STR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_STR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_STR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_START_ADDRESS` reader - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_START_ADDRESS` writer - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S0_STR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        pub fn source0_start_address(&self) -> SOURCE0_START_ADDRESS_R {
            SOURCE0_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source0_start_address(&mut self) -> SOURCE0_START_ADDRESS_W<0> {
            SOURCE0_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 memory start address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_str0](index.html) module"]
    pub struct S0_STR0;
    impl crate::RegisterSpec for S0_STR0 {
        const ADDRESS: u8 = 147u8;
    }
    #[doc = "`read()` method returns [s0_str0::R](R) reader structure"]
    impl crate::Readable for S0_STR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_str0::W](W) writer structure"]
    impl crate::Writable for S0_STR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_STR0 to value 0"]
    impl crate::Resettable for S0_STR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_str1::S0_STR1;
#[doc = "Source 0 memory start address 1"]
pub mod s0_str1 {
    #[doc = "Register `S0_STR1` reader"]
    pub struct R(crate::R<S0_STR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_STR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_STR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_STR1` writer"]
    pub struct W(crate::W<S0_STR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_STR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_STR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_START_ADDRESS` reader - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_START_ADDRESS` writer - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S0_STR1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        pub fn source0_start_address(&self) -> SOURCE0_START_ADDRESS_R {
            SOURCE0_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source0_start_address(&mut self) -> SOURCE0_START_ADDRESS_W<0> {
            SOURCE0_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 memory start address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_str1](index.html) module"]
    pub struct S0_STR1;
    impl crate::RegisterSpec for S0_STR1 {
        const ADDRESS: u8 = 148u8;
    }
    #[doc = "`read()` method returns [s0_str1::R](R) reader structure"]
    impl crate::Readable for S0_STR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_str1::W](W) writer structure"]
    impl crate::Writable for S0_STR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_STR1 to value 0"]
    impl crate::Resettable for S0_STR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_str2::S0_STR2;
#[doc = "Source 0 memory start address 2"]
pub mod s0_str2 {
    #[doc = "Register `S0_STR2` reader"]
    pub struct R(crate::R<S0_STR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_STR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_STR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_STR2` writer"]
    pub struct W(crate::W<S0_STR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_STR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_STR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_START_ADDRESS` reader - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_START_ADDRESS` writer - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S0_STR2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        pub fn source0_start_address(&self) -> SOURCE0_START_ADDRESS_R {
            SOURCE0_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source0_start_address(&mut self) -> SOURCE0_START_ADDRESS_W<0> {
            SOURCE0_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 memory start address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_str2](index.html) module"]
    pub struct S0_STR2;
    impl crate::RegisterSpec for S0_STR2 {
        const ADDRESS: u8 = 149u8;
    }
    #[doc = "`read()` method returns [s0_str2::R](R) reader structure"]
    impl crate::Readable for S0_STR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_str2::W](W) writer structure"]
    impl crate::Writable for S0_STR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_STR2 to value 0"]
    impl crate::Resettable for S0_STR2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_str3::S0_STR3;
#[doc = "Source 0 memory start address 3"]
pub mod s0_str3 {
    #[doc = "Register `S0_STR3` reader"]
    pub struct R(crate::R<S0_STR3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_STR3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_STR3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_STR3` writer"]
    pub struct W(crate::W<S0_STR3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_STR3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_STR3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_START_ADDRESS` reader - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_START_ADDRESS` writer - Source 0 memory start address"]
    pub type SOURCE0_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S0_STR3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        pub fn source0_start_address(&self) -> SOURCE0_START_ADDRESS_R {
            SOURCE0_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 0 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source0_start_address(&mut self) -> SOURCE0_START_ADDRESS_W<0> {
            SOURCE0_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 memory start address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_str3](index.html) module"]
    pub struct S0_STR3;
    impl crate::RegisterSpec for S0_STR3 {
        const ADDRESS: u8 = 150u8;
    }
    #[doc = "`read()` method returns [s0_str3::R](R) reader structure"]
    impl crate::Readable for S0_STR3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_str3::W](W) writer structure"]
    impl crate::Writable for S0_STR3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_STR3 to value 0"]
    impl crate::Resettable for S0_STR3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_wth0::S0_WTH0;
#[doc = "Source 0 image width 0"]
pub mod s0_wth0 {
    #[doc = "Register `S0_WTH0` reader"]
    pub struct R(crate::R<S0_WTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_WTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_WTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_WTH0` writer"]
    pub struct W(crate::W<S0_WTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_WTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_WTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_IMAGE_WIDTH` reader - Source 0 image width"]
    pub type SOURCE0_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_IMAGE_WIDTH` writer - Source 0 image width"]
    pub type SOURCE0_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, S0_WTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 0 image width"]
        #[inline(always)]
        pub fn source0_image_width(&self) -> SOURCE0_IMAGE_WIDTH_R {
            SOURCE0_IMAGE_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 0 image width"]
        #[inline(always)]
        #[must_use]
        pub fn source0_image_width(&mut self) -> SOURCE0_IMAGE_WIDTH_W<0> {
            SOURCE0_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 image width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_wth0](index.html) module"]
    pub struct S0_WTH0;
    impl crate::RegisterSpec for S0_WTH0 {
        const ADDRESS: u8 = 151u8;
    }
    #[doc = "`read()` method returns [s0_wth0::R](R) reader structure"]
    impl crate::Readable for S0_WTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_wth0::W](W) writer structure"]
    impl crate::Writable for S0_WTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_WTH0 to value 0"]
    impl crate::Resettable for S0_WTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_wth1::S0_WTH1;
#[doc = "Source 0 image width 1"]
pub mod s0_wth1 {
    #[doc = "Register `S0_WTH1` reader"]
    pub struct R(crate::R<S0_WTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_WTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_WTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_WTH1` writer"]
    pub struct W(crate::W<S0_WTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_WTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_WTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_IMAGE_WIDTH` reader - Source 0 image width"]
    pub type SOURCE0_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_IMAGE_WIDTH` writer - Source 0 image width"]
    pub type SOURCE0_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, S0_WTH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Source 0 image width"]
        #[inline(always)]
        pub fn source0_image_width(&self) -> SOURCE0_IMAGE_WIDTH_R {
            SOURCE0_IMAGE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Source 0 image width"]
        #[inline(always)]
        #[must_use]
        pub fn source0_image_width(&mut self) -> SOURCE0_IMAGE_WIDTH_W<0> {
            SOURCE0_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 image width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_wth1](index.html) module"]
    pub struct S0_WTH1;
    impl crate::RegisterSpec for S0_WTH1 {
        const ADDRESS: u8 = 152u8;
    }
    #[doc = "`read()` method returns [s0_wth1::R](R) reader structure"]
    impl crate::Readable for S0_WTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_wth1::W](W) writer structure"]
    impl crate::Writable for S0_WTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_WTH1 to value 0"]
    impl crate::Resettable for S0_WTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_x0::S0_X0;
#[doc = "Source 0 Window Upper-Left corner X-coordinates 0"]
pub mod s0_x0 {
    #[doc = "Register `S0_X0` reader"]
    pub struct R(crate::R<S0_X0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_X0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_X0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_X0` writer"]
    pub struct W(crate::W<S0_X0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_X0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_X0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_X` reader - Source 0 Window Upper-Left corner X-coordinate"]
    pub type SOURCE0_X_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_X` writer - Source 0 Window Upper-Left corner X-coordinate"]
    pub type SOURCE0_X_W<'a, const O: u8> = crate::FieldWriter<'a, S0_X0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 0 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        pub fn source0_x(&self) -> SOURCE0_X_R {
            SOURCE0_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 0 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source0_x(&mut self) -> SOURCE0_X_W<0> {
            SOURCE0_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 Window Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_x0](index.html) module"]
    pub struct S0_X0;
    impl crate::RegisterSpec for S0_X0 {
        const ADDRESS: u8 = 153u8;
    }
    #[doc = "`read()` method returns [s0_x0::R](R) reader structure"]
    impl crate::Readable for S0_X0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_x0::W](W) writer structure"]
    impl crate::Writable for S0_X0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_X0 to value 0"]
    impl crate::Resettable for S0_X0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_x1::S0_X1;
#[doc = "Source 0 Window Upper-Left corner X-coordinates 1"]
pub mod s0_x1 {
    #[doc = "Register `S0_X1` reader"]
    pub struct R(crate::R<S0_X1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_X1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_X1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_X1` writer"]
    pub struct W(crate::W<S0_X1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_X1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_X1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_X` reader - Source 0 Window Upper-Left corner X-coordinate"]
    pub type SOURCE0_X_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_X` writer - Source 0 Window Upper-Left corner X-coordinate"]
    pub type SOURCE0_X_W<'a, const O: u8> = crate::FieldWriter<'a, S0_X1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Source 0 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        pub fn source0_x(&self) -> SOURCE0_X_R {
            SOURCE0_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Source 0 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source0_x(&mut self) -> SOURCE0_X_W<0> {
            SOURCE0_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 Window Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_x1](index.html) module"]
    pub struct S0_X1;
    impl crate::RegisterSpec for S0_X1 {
        const ADDRESS: u8 = 154u8;
    }
    #[doc = "`read()` method returns [s0_x1::R](R) reader structure"]
    impl crate::Readable for S0_X1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_x1::W](W) writer structure"]
    impl crate::Writable for S0_X1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_X1 to value 0"]
    impl crate::Resettable for S0_X1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_y0::S0_Y0;
#[doc = "Source 0 Window Upper-Left corner Y-coordinates 0"]
pub mod s0_y0 {
    #[doc = "Register `S0_Y0` reader"]
    pub struct R(crate::R<S0_Y0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_Y0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_Y0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_Y0` writer"]
    pub struct W(crate::W<S0_Y0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_Y0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_Y0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_Y` reader - Source 0 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE0_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_Y` writer - Source 0 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE0_Y_W<'a, const O: u8> = crate::FieldWriter<'a, S0_Y0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 0 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        pub fn source0_y(&self) -> SOURCE0_Y_R {
            SOURCE0_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 0 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source0_y(&mut self) -> SOURCE0_Y_W<0> {
            SOURCE0_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 Window Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_y0](index.html) module"]
    pub struct S0_Y0;
    impl crate::RegisterSpec for S0_Y0 {
        const ADDRESS: u8 = 155u8;
    }
    #[doc = "`read()` method returns [s0_y0::R](R) reader structure"]
    impl crate::Readable for S0_Y0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_y0::W](W) writer structure"]
    impl crate::Writable for S0_Y0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_Y0 to value 0"]
    impl crate::Resettable for S0_Y0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s0_y1::S0_Y1;
#[doc = "Source 0 Window Upper-Left corner Y-coordinates 1"]
pub mod s0_y1 {
    #[doc = "Register `S0_Y1` reader"]
    pub struct R(crate::R<S0_Y1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S0_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S0_Y1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S0_Y1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S0_Y1` writer"]
    pub struct W(crate::W<S0_Y1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S0_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S0_Y1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S0_Y1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE0_Y` reader - Source 0 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE0_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE0_Y` writer - Source 0 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE0_Y_W<'a, const O: u8> = crate::FieldWriter<'a, S0_Y1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Source 0 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        pub fn source0_y(&self) -> SOURCE0_Y_R {
            SOURCE0_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Source 0 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source0_y(&mut self) -> SOURCE0_Y_W<0> {
            SOURCE0_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 0 Window Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s0_y1](index.html) module"]
    pub struct S0_Y1;
    impl crate::RegisterSpec for S0_Y1 {
        const ADDRESS: u8 = 156u8;
    }
    #[doc = "`read()` method returns [s0_y1::R](R) reader structure"]
    impl crate::Readable for S0_Y1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s0_y1::W](W) writer structure"]
    impl crate::Writable for S0_Y1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S0_Y1 to value 0"]
    impl crate::Resettable for S0_Y1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_str0::S1_STR0;
#[doc = "Source 1 memory start address 0"]
pub mod s1_str0 {
    #[doc = "Register `S1_STR0` reader"]
    pub struct R(crate::R<S1_STR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_STR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_STR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_STR0` writer"]
    pub struct W(crate::W<S1_STR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_STR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_STR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_START_ADDRESS` reader - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_START_ADDRESS` writer - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S1_STR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        pub fn source1_start_address(&self) -> SOURCE1_START_ADDRESS_R {
            SOURCE1_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source1_start_address(&mut self) -> SOURCE1_START_ADDRESS_W<0> {
            SOURCE1_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 memory start address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_str0](index.html) module"]
    pub struct S1_STR0;
    impl crate::RegisterSpec for S1_STR0 {
        const ADDRESS: u8 = 157u8;
    }
    #[doc = "`read()` method returns [s1_str0::R](R) reader structure"]
    impl crate::Readable for S1_STR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_str0::W](W) writer structure"]
    impl crate::Writable for S1_STR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_STR0 to value 0"]
    impl crate::Resettable for S1_STR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_str1::S1_STR1;
#[doc = "Source 1 memory start address 1"]
pub mod s1_str1 {
    #[doc = "Register `S1_STR1` reader"]
    pub struct R(crate::R<S1_STR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_STR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_STR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_STR1` writer"]
    pub struct W(crate::W<S1_STR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_STR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_STR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_START_ADDRESS` reader - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_START_ADDRESS` writer - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S1_STR1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        pub fn source1_start_address(&self) -> SOURCE1_START_ADDRESS_R {
            SOURCE1_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source1_start_address(&mut self) -> SOURCE1_START_ADDRESS_W<0> {
            SOURCE1_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 memory start address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_str1](index.html) module"]
    pub struct S1_STR1;
    impl crate::RegisterSpec for S1_STR1 {
        const ADDRESS: u8 = 158u8;
    }
    #[doc = "`read()` method returns [s1_str1::R](R) reader structure"]
    impl crate::Readable for S1_STR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_str1::W](W) writer structure"]
    impl crate::Writable for S1_STR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_STR1 to value 0"]
    impl crate::Resettable for S1_STR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_str2::S1_STR2;
#[doc = "Source 1 memory start address 2"]
pub mod s1_str2 {
    #[doc = "Register `S1_STR2` reader"]
    pub struct R(crate::R<S1_STR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_STR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_STR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_STR2` writer"]
    pub struct W(crate::W<S1_STR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_STR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_STR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_START_ADDRESS` reader - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_START_ADDRESS` writer - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S1_STR2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        pub fn source1_start_address(&self) -> SOURCE1_START_ADDRESS_R {
            SOURCE1_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source1_start_address(&mut self) -> SOURCE1_START_ADDRESS_W<0> {
            SOURCE1_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 memory start address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_str2](index.html) module"]
    pub struct S1_STR2;
    impl crate::RegisterSpec for S1_STR2 {
        const ADDRESS: u8 = 159u8;
    }
    #[doc = "`read()` method returns [s1_str2::R](R) reader structure"]
    impl crate::Readable for S1_STR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_str2::W](W) writer structure"]
    impl crate::Writable for S1_STR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_STR2 to value 0"]
    impl crate::Resettable for S1_STR2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_str3::S1_STR3;
#[doc = "Source 1 memory start address 3"]
pub mod s1_str3 {
    #[doc = "Register `S1_STR3` reader"]
    pub struct R(crate::R<S1_STR3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_STR3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_STR3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_STR3` writer"]
    pub struct W(crate::W<S1_STR3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_STR3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_STR3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_START_ADDRESS` reader - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_START_ADDRESS` writer - Source 1 memory start address"]
    pub type SOURCE1_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, S1_STR3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        pub fn source1_start_address(&self) -> SOURCE1_START_ADDRESS_R {
            SOURCE1_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 1 memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn source1_start_address(&mut self) -> SOURCE1_START_ADDRESS_W<0> {
            SOURCE1_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 memory start address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_str3](index.html) module"]
    pub struct S1_STR3;
    impl crate::RegisterSpec for S1_STR3 {
        const ADDRESS: u8 = 160u8;
    }
    #[doc = "`read()` method returns [s1_str3::R](R) reader structure"]
    impl crate::Readable for S1_STR3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_str3::W](W) writer structure"]
    impl crate::Writable for S1_STR3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_STR3 to value 0"]
    impl crate::Resettable for S1_STR3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_wth0::S1_WTH0;
#[doc = "Source 1 image width 0"]
pub mod s1_wth0 {
    #[doc = "Register `S1_WTH0` reader"]
    pub struct R(crate::R<S1_WTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_WTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_WTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_WTH0` writer"]
    pub struct W(crate::W<S1_WTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_WTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_WTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_IMAGE_WIDTH` reader - Source 1 image width"]
    pub type SOURCE1_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_IMAGE_WIDTH` writer - Source 1 image width"]
    pub type SOURCE1_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, S1_WTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 1 image width"]
        #[inline(always)]
        pub fn source1_image_width(&self) -> SOURCE1_IMAGE_WIDTH_R {
            SOURCE1_IMAGE_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 1 image width"]
        #[inline(always)]
        #[must_use]
        pub fn source1_image_width(&mut self) -> SOURCE1_IMAGE_WIDTH_W<0> {
            SOURCE1_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 image width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_wth0](index.html) module"]
    pub struct S1_WTH0;
    impl crate::RegisterSpec for S1_WTH0 {
        const ADDRESS: u8 = 161u8;
    }
    #[doc = "`read()` method returns [s1_wth0::R](R) reader structure"]
    impl crate::Readable for S1_WTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_wth0::W](W) writer structure"]
    impl crate::Writable for S1_WTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_WTH0 to value 0"]
    impl crate::Resettable for S1_WTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_wth1::S1_WTH1;
#[doc = "Source 1 image width 1"]
pub mod s1_wth1 {
    #[doc = "Register `S1_WTH1` reader"]
    pub struct R(crate::R<S1_WTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_WTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_WTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_WTH1` writer"]
    pub struct W(crate::W<S1_WTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_WTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_WTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_IMAGE_WIDTH` reader - Source 1 image width"]
    pub type SOURCE1_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_IMAGE_WIDTH` writer - Source 1 image width"]
    pub type SOURCE1_IMAGE_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, S1_WTH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Source 1 image width"]
        #[inline(always)]
        pub fn source1_image_width(&self) -> SOURCE1_IMAGE_WIDTH_R {
            SOURCE1_IMAGE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Source 1 image width"]
        #[inline(always)]
        #[must_use]
        pub fn source1_image_width(&mut self) -> SOURCE1_IMAGE_WIDTH_W<0> {
            SOURCE1_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 image width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_wth1](index.html) module"]
    pub struct S1_WTH1;
    impl crate::RegisterSpec for S1_WTH1 {
        const ADDRESS: u8 = 162u8;
    }
    #[doc = "`read()` method returns [s1_wth1::R](R) reader structure"]
    impl crate::Readable for S1_WTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_wth1::W](W) writer structure"]
    impl crate::Writable for S1_WTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_WTH1 to value 0"]
    impl crate::Resettable for S1_WTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_x0::S1_X0;
#[doc = "Source 1 Window Upper-Left corner X-coordinates 0"]
pub mod s1_x0 {
    #[doc = "Register `S1_X0` reader"]
    pub struct R(crate::R<S1_X0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_X0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_X0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_X0` writer"]
    pub struct W(crate::W<S1_X0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_X0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_X0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_X` reader - Source 1 Window Upper-Left corner X-coordinate"]
    pub type SOURCE1_X_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_X` writer - Source 1 Window Upper-Left corner X-coordinate"]
    pub type SOURCE1_X_W<'a, const O: u8> = crate::FieldWriter<'a, S1_X0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 1 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        pub fn source1_x(&self) -> SOURCE1_X_R {
            SOURCE1_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 1 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source1_x(&mut self) -> SOURCE1_X_W<0> {
            SOURCE1_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 Window Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_x0](index.html) module"]
    pub struct S1_X0;
    impl crate::RegisterSpec for S1_X0 {
        const ADDRESS: u8 = 163u8;
    }
    #[doc = "`read()` method returns [s1_x0::R](R) reader structure"]
    impl crate::Readable for S1_X0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_x0::W](W) writer structure"]
    impl crate::Writable for S1_X0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_X0 to value 0"]
    impl crate::Resettable for S1_X0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_x1::S1_X1;
#[doc = "Source 1 Window Upper-Left corner X-coordinates 1"]
pub mod s1_x1 {
    #[doc = "Register `S1_X1` reader"]
    pub struct R(crate::R<S1_X1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_X1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_X1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_X1` writer"]
    pub struct W(crate::W<S1_X1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_X1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_X1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_X` reader - Source 1 Window Upper-Left corner X-coordinate"]
    pub type SOURCE1_X_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_X` writer - Source 1 Window Upper-Left corner X-coordinate"]
    pub type SOURCE1_X_W<'a, const O: u8> = crate::FieldWriter<'a, S1_X1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Source 1 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        pub fn source1_x(&self) -> SOURCE1_X_R {
            SOURCE1_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Source 1 Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source1_x(&mut self) -> SOURCE1_X_W<0> {
            SOURCE1_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 Window Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_x1](index.html) module"]
    pub struct S1_X1;
    impl crate::RegisterSpec for S1_X1 {
        const ADDRESS: u8 = 164u8;
    }
    #[doc = "`read()` method returns [s1_x1::R](R) reader structure"]
    impl crate::Readable for S1_X1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_x1::W](W) writer structure"]
    impl crate::Writable for S1_X1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_X1 to value 0"]
    impl crate::Resettable for S1_X1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_y0::S1_Y0;
#[doc = "Source 1 Window Upper-Left corner Y-coordinates 0"]
pub mod s1_y0 {
    #[doc = "Register `S1_Y0` reader"]
    pub struct R(crate::R<S1_Y0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_Y0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_Y0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_Y0` writer"]
    pub struct W(crate::W<S1_Y0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_Y0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_Y0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_Y` reader - Source 1 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE1_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_Y` writer - Source 1 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE1_Y_W<'a, const O: u8> = crate::FieldWriter<'a, S1_Y0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Source 1 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        pub fn source1_y(&self) -> SOURCE1_Y_R {
            SOURCE1_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Source 1 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source1_y(&mut self) -> SOURCE1_Y_W<0> {
            SOURCE1_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 Window Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_y0](index.html) module"]
    pub struct S1_Y0;
    impl crate::RegisterSpec for S1_Y0 {
        const ADDRESS: u8 = 165u8;
    }
    #[doc = "`read()` method returns [s1_y0::R](R) reader structure"]
    impl crate::Readable for S1_Y0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_y0::W](W) writer structure"]
    impl crate::Writable for S1_Y0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_Y0 to value 0"]
    impl crate::Resettable for S1_Y0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use s1_y1::S1_Y1;
#[doc = "Source 1 Window Upper-Left corner Y-coordinates 1"]
pub mod s1_y1 {
    #[doc = "Register `S1_Y1` reader"]
    pub struct R(crate::R<S1_Y1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<S1_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<S1_Y1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<S1_Y1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `S1_Y1` writer"]
    pub struct W(crate::W<S1_Y1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<S1_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<S1_Y1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<S1_Y1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SOURCE1_Y` reader - Source 1 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE1_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `SOURCE1_Y` writer - Source 1 Window Upper-Left corner Y-coordinate"]
    pub type SOURCE1_Y_W<'a, const O: u8> = crate::FieldWriter<'a, S1_Y1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Source 1 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        pub fn source1_y(&self) -> SOURCE1_Y_R {
            SOURCE1_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Source 1 Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn source1_y(&mut self) -> SOURCE1_Y_W<0> {
            SOURCE1_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Source 1 Window Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1_y1](index.html) module"]
    pub struct S1_Y1;
    impl crate::RegisterSpec for S1_Y1 {
        const ADDRESS: u8 = 166u8;
    }
    #[doc = "`read()` method returns [s1_y1::R](R) reader structure"]
    impl crate::Readable for S1_Y1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [s1_y1::W](W) writer structure"]
    impl crate::Writable for S1_Y1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets S1_Y1 to value 0"]
    impl crate::Resettable for S1_Y1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_str0::DT_STR0;
#[doc = "Destination memory start address 0"]
pub mod dt_str0 {
    #[doc = "Register `DT_STR0` reader"]
    pub struct R(crate::R<DT_STR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_STR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_STR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_STR0` writer"]
    pub struct W(crate::W<DT_STR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_STR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_STR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_START_ADDRESS` reader - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_START_ADDRESS` writer - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DT_STR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        pub fn destination_start_address(&self) -> DESTINATION_START_ADDRESS_R {
            DESTINATION_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn destination_start_address(&mut self) -> DESTINATION_START_ADDRESS_W<0> {
            DESTINATION_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination memory start address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_str0](index.html) module"]
    pub struct DT_STR0;
    impl crate::RegisterSpec for DT_STR0 {
        const ADDRESS: u8 = 167u8;
    }
    #[doc = "`read()` method returns [dt_str0::R](R) reader structure"]
    impl crate::Readable for DT_STR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_str0::W](W) writer structure"]
    impl crate::Writable for DT_STR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_STR0 to value 0"]
    impl crate::Resettable for DT_STR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_str1::DT_STR1;
#[doc = "Destination memory start address 1"]
pub mod dt_str1 {
    #[doc = "Register `DT_STR1` reader"]
    pub struct R(crate::R<DT_STR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_STR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_STR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_STR1` writer"]
    pub struct W(crate::W<DT_STR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_STR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_STR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_START_ADDRESS` reader - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_START_ADDRESS` writer - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DT_STR1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        pub fn destination_start_address(&self) -> DESTINATION_START_ADDRESS_R {
            DESTINATION_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn destination_start_address(&mut self) -> DESTINATION_START_ADDRESS_W<0> {
            DESTINATION_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination memory start address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_str1](index.html) module"]
    pub struct DT_STR1;
    impl crate::RegisterSpec for DT_STR1 {
        const ADDRESS: u8 = 168u8;
    }
    #[doc = "`read()` method returns [dt_str1::R](R) reader structure"]
    impl crate::Readable for DT_STR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_str1::W](W) writer structure"]
    impl crate::Writable for DT_STR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_STR1 to value 0"]
    impl crate::Resettable for DT_STR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_str2::DT_STR2;
#[doc = "Destination memory start address 2"]
pub mod dt_str2 {
    #[doc = "Register `DT_STR2` reader"]
    pub struct R(crate::R<DT_STR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_STR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_STR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_STR2` writer"]
    pub struct W(crate::W<DT_STR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_STR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_STR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_START_ADDRESS` reader - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_START_ADDRESS` writer - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DT_STR2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        pub fn destination_start_address(&self) -> DESTINATION_START_ADDRESS_R {
            DESTINATION_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn destination_start_address(&mut self) -> DESTINATION_START_ADDRESS_W<0> {
            DESTINATION_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination memory start address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_str2](index.html) module"]
    pub struct DT_STR2;
    impl crate::RegisterSpec for DT_STR2 {
        const ADDRESS: u8 = 169u8;
    }
    #[doc = "`read()` method returns [dt_str2::R](R) reader structure"]
    impl crate::Readable for DT_STR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_str2::W](W) writer structure"]
    impl crate::Writable for DT_STR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_STR2 to value 0"]
    impl crate::Resettable for DT_STR2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_str3::DT_STR3;
#[doc = "Destination memory start address 3"]
pub mod dt_str3 {
    #[doc = "Register `DT_STR3` reader"]
    pub struct R(crate::R<DT_STR3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_STR3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_STR3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_STR3` writer"]
    pub struct W(crate::W<DT_STR3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_STR3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_STR3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_START_ADDRESS` reader - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_START_ADDRESS` writer - Destination memory start address"]
    pub type DESTINATION_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DT_STR3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        pub fn destination_start_address(&self) -> DESTINATION_START_ADDRESS_R {
            DESTINATION_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Destination memory start address"]
        #[inline(always)]
        #[must_use]
        pub fn destination_start_address(&mut self) -> DESTINATION_START_ADDRESS_W<0> {
            DESTINATION_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination memory start address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_str3](index.html) module"]
    pub struct DT_STR3;
    impl crate::RegisterSpec for DT_STR3 {
        const ADDRESS: u8 = 170u8;
    }
    #[doc = "`read()` method returns [dt_str3::R](R) reader structure"]
    impl crate::Readable for DT_STR3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_str3::W](W) writer structure"]
    impl crate::Writable for DT_STR3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_STR3 to value 0"]
    impl crate::Resettable for DT_STR3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_wth0::DT_WTH0;
#[doc = "Destination image width 0"]
pub mod dt_wth0 {
    #[doc = "Register `DT_WTH0` reader"]
    pub struct R(crate::R<DT_WTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_WTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_WTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_WTH0` writer"]
    pub struct W(crate::W<DT_WTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_WTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_WTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_IMAGE_WIDTH` reader - Destination image width"]
    pub type DESTINATION_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_IMAGE_WIDTH` writer - Destination image width"]
    pub type DESTINATION_IMAGE_WIDTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, DT_WTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Destination image width"]
        #[inline(always)]
        pub fn destination_image_width(&self) -> DESTINATION_IMAGE_WIDTH_R {
            DESTINATION_IMAGE_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Destination image width"]
        #[inline(always)]
        #[must_use]
        pub fn destination_image_width(&mut self) -> DESTINATION_IMAGE_WIDTH_W<0> {
            DESTINATION_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination image width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_wth0](index.html) module"]
    pub struct DT_WTH0;
    impl crate::RegisterSpec for DT_WTH0 {
        const ADDRESS: u8 = 171u8;
    }
    #[doc = "`read()` method returns [dt_wth0::R](R) reader structure"]
    impl crate::Readable for DT_WTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_wth0::W](W) writer structure"]
    impl crate::Writable for DT_WTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_WTH0 to value 0"]
    impl crate::Resettable for DT_WTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_wth1::DT_WTH1;
#[doc = "Destination image width 1"]
pub mod dt_wth1 {
    #[doc = "Register `DT_WTH1` reader"]
    pub struct R(crate::R<DT_WTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_WTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_WTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_WTH1` writer"]
    pub struct W(crate::W<DT_WTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_WTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_WTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_IMAGE_WIDTH` reader - Destination image width"]
    pub type DESTINATION_IMAGE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_IMAGE_WIDTH` writer - Destination image width"]
    pub type DESTINATION_IMAGE_WIDTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, DT_WTH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Destination image width"]
        #[inline(always)]
        pub fn destination_image_width(&self) -> DESTINATION_IMAGE_WIDTH_R {
            DESTINATION_IMAGE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Destination image width"]
        #[inline(always)]
        #[must_use]
        pub fn destination_image_width(&mut self) -> DESTINATION_IMAGE_WIDTH_W<0> {
            DESTINATION_IMAGE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination image width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_wth1](index.html) module"]
    pub struct DT_WTH1;
    impl crate::RegisterSpec for DT_WTH1 {
        const ADDRESS: u8 = 172u8;
    }
    #[doc = "`read()` method returns [dt_wth1::R](R) reader structure"]
    impl crate::Readable for DT_WTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_wth1::W](W) writer structure"]
    impl crate::Writable for DT_WTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_WTH1 to value 0"]
    impl crate::Resettable for DT_WTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_x0::DT_X0;
#[doc = "Destination Window Upper-Left corner X-coordinates 0"]
pub mod dt_x0 {
    #[doc = "Register `DT_X0` reader"]
    pub struct R(crate::R<DT_X0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_X0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_X0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_X0` writer"]
    pub struct W(crate::W<DT_X0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_X0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_X0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_X0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_X` reader - Destination Window Upper-Left corner X-coordinate"]
    pub type DESTINATION_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_X` writer - Destination Window Upper-Left corner X-coordinate"]
    pub type DESTINATION_X_W<'a, const O: u8> = crate::FieldWriter<'a, DT_X0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Destination Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        pub fn destination_x(&self) -> DESTINATION_X_R {
            DESTINATION_X_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Destination Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn destination_x(&mut self) -> DESTINATION_X_W<0> {
            DESTINATION_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination Window Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_x0](index.html) module"]
    pub struct DT_X0;
    impl crate::RegisterSpec for DT_X0 {
        const ADDRESS: u8 = 173u8;
    }
    #[doc = "`read()` method returns [dt_x0::R](R) reader structure"]
    impl crate::Readable for DT_X0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_x0::W](W) writer structure"]
    impl crate::Writable for DT_X0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_X0 to value 0"]
    impl crate::Resettable for DT_X0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_x1::DT_X1;
#[doc = "Destination Window Upper-Left corner X-coordinates 1"]
pub mod dt_x1 {
    #[doc = "Register `DT_X1` reader"]
    pub struct R(crate::R<DT_X1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_X1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_X1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_X1` writer"]
    pub struct W(crate::W<DT_X1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_X1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_X1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_X1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_X` reader - Destination Window Upper-Left corner X-coordinate"]
    pub type DESTINATION_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_X` writer - Destination Window Upper-Left corner X-coordinate"]
    pub type DESTINATION_X_W<'a, const O: u8> = crate::FieldWriter<'a, DT_X1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Destination Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        pub fn destination_x(&self) -> DESTINATION_X_R {
            DESTINATION_X_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Destination Window Upper-Left corner X-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn destination_x(&mut self) -> DESTINATION_X_W<0> {
            DESTINATION_X_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination Window Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_x1](index.html) module"]
    pub struct DT_X1;
    impl crate::RegisterSpec for DT_X1 {
        const ADDRESS: u8 = 174u8;
    }
    #[doc = "`read()` method returns [dt_x1::R](R) reader structure"]
    impl crate::Readable for DT_X1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_x1::W](W) writer structure"]
    impl crate::Writable for DT_X1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_X1 to value 0"]
    impl crate::Resettable for DT_X1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_y0::DT_Y0;
#[doc = "Destination Window Upper-Left corner Y-coordinates 0"]
pub mod dt_y0 {
    #[doc = "Register `DT_Y0` reader"]
    pub struct R(crate::R<DT_Y0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_Y0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_Y0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_Y0` writer"]
    pub struct W(crate::W<DT_Y0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_Y0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_Y0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_Y0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_Y` reader - Destination Window Upper-Left corner Y-coordinate"]
    pub type DESTINATION_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_Y` writer - Destination Window Upper-Left corner Y-coordinate"]
    pub type DESTINATION_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DT_Y0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Destination Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        pub fn destination_y(&self) -> DESTINATION_Y_R {
            DESTINATION_Y_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Destination Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn destination_y(&mut self) -> DESTINATION_Y_W<0> {
            DESTINATION_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination Window Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_y0](index.html) module"]
    pub struct DT_Y0;
    impl crate::RegisterSpec for DT_Y0 {
        const ADDRESS: u8 = 175u8;
    }
    #[doc = "`read()` method returns [dt_y0::R](R) reader structure"]
    impl crate::Readable for DT_Y0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_y0::W](W) writer structure"]
    impl crate::Writable for DT_Y0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_Y0 to value 0"]
    impl crate::Resettable for DT_Y0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dt_y1::DT_Y1;
#[doc = "Destination Window Upper-Left corner Y-coordinates 1"]
pub mod dt_y1 {
    #[doc = "Register `DT_Y1` reader"]
    pub struct R(crate::R<DT_Y1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DT_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DT_Y1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DT_Y1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DT_Y1` writer"]
    pub struct W(crate::W<DT_Y1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DT_Y1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DT_Y1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DT_Y1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DESTINATION_Y` reader - Destination Window Upper-Left corner Y-coordinate"]
    pub type DESTINATION_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DESTINATION_Y` writer - Destination Window Upper-Left corner Y-coordinate"]
    pub type DESTINATION_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DT_Y1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Destination Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        pub fn destination_y(&self) -> DESTINATION_Y_R {
            DESTINATION_Y_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Destination Window Upper-Left corner Y-coordinate"]
        #[inline(always)]
        #[must_use]
        pub fn destination_y(&mut self) -> DESTINATION_Y_W<0> {
            DESTINATION_Y_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Destination Window Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dt_y1](index.html) module"]
    pub struct DT_Y1;
    impl crate::RegisterSpec for DT_Y1 {
        const ADDRESS: u8 = 176u8;
    }
    #[doc = "`read()` method returns [dt_y1::R](R) reader structure"]
    impl crate::Readable for DT_Y1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dt_y1::W](W) writer structure"]
    impl crate::Writable for DT_Y1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DT_Y1 to value 0"]
    impl crate::Resettable for DT_Y1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bte_wth0::BTE_WTH0;
#[doc = "BTE Window Width Setting 0"]
pub mod bte_wth0 {
    #[doc = "Register `BTE_WTH0` reader"]
    pub struct R(crate::R<BTE_WTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTE_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTE_WTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTE_WTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTE_WTH0` writer"]
    pub struct W(crate::W<BTE_WTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTE_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTE_WTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTE_WTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BTE_WINDOW_WIDTH` reader - BTE Window Width Setting"]
    pub type BTE_WINDOW_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `BTE_WINDOW_WIDTH` writer - BTE Window Width Setting"]
    pub type BTE_WINDOW_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, BTE_WTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - BTE Window Width Setting"]
        #[inline(always)]
        pub fn bte_window_width(&self) -> BTE_WINDOW_WIDTH_R {
            BTE_WINDOW_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - BTE Window Width Setting"]
        #[inline(always)]
        #[must_use]
        pub fn bte_window_width(&mut self) -> BTE_WINDOW_WIDTH_W<0> {
            BTE_WINDOW_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "BTE Window Width Setting 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bte_wth0](index.html) module"]
    pub struct BTE_WTH0;
    impl crate::RegisterSpec for BTE_WTH0 {
        const ADDRESS: u8 = 177u8;
    }
    #[doc = "`read()` method returns [bte_wth0::R](R) reader structure"]
    impl crate::Readable for BTE_WTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bte_wth0::W](W) writer structure"]
    impl crate::Writable for BTE_WTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTE_WTH0 to value 0"]
    impl crate::Resettable for BTE_WTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bte_wth1::BTE_WTH1;
#[doc = "BTE Window Width Setting 1"]
pub mod bte_wth1 {
    #[doc = "Register `BTE_WTH1` reader"]
    pub struct R(crate::R<BTE_WTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTE_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTE_WTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTE_WTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTE_WTH1` writer"]
    pub struct W(crate::W<BTE_WTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTE_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTE_WTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTE_WTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BTE_WINDOW_WIDTH` reader - BTE Window Width Setting"]
    pub type BTE_WINDOW_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `BTE_WINDOW_WIDTH` writer - BTE Window Width Setting"]
    pub type BTE_WINDOW_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, BTE_WTH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - BTE Window Width Setting"]
        #[inline(always)]
        pub fn bte_window_width(&self) -> BTE_WINDOW_WIDTH_R {
            BTE_WINDOW_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - BTE Window Width Setting"]
        #[inline(always)]
        #[must_use]
        pub fn bte_window_width(&mut self) -> BTE_WINDOW_WIDTH_W<0> {
            BTE_WINDOW_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "BTE Window Width Setting 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bte_wth1](index.html) module"]
    pub struct BTE_WTH1;
    impl crate::RegisterSpec for BTE_WTH1 {
        const ADDRESS: u8 = 178u8;
    }
    #[doc = "`read()` method returns [bte_wth1::R](R) reader structure"]
    impl crate::Readable for BTE_WTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bte_wth1::W](W) writer structure"]
    impl crate::Writable for BTE_WTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTE_WTH1 to value 0"]
    impl crate::Resettable for BTE_WTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bte_hig0::BTE_HIG0;
#[doc = "BTE Window Height Setting 0"]
pub mod bte_hig0 {
    #[doc = "Register `BTE_HIG0` reader"]
    pub struct R(crate::R<BTE_HIG0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTE_HIG0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTE_HIG0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTE_HIG0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTE_HIG0` writer"]
    pub struct W(crate::W<BTE_HIG0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTE_HIG0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTE_HIG0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTE_HIG0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BTE_WINDOW_HEIGHT` reader - BTE Window Height Setting"]
    pub type BTE_WINDOW_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `BTE_WINDOW_HEIGHT` writer - BTE Window Height Setting"]
    pub type BTE_WINDOW_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, BTE_HIG0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - BTE Window Height Setting"]
        #[inline(always)]
        pub fn bte_window_height(&self) -> BTE_WINDOW_HEIGHT_R {
            BTE_WINDOW_HEIGHT_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - BTE Window Height Setting"]
        #[inline(always)]
        #[must_use]
        pub fn bte_window_height(&mut self) -> BTE_WINDOW_HEIGHT_W<0> {
            BTE_WINDOW_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "BTE Window Height Setting 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bte_hig0](index.html) module"]
    pub struct BTE_HIG0;
    impl crate::RegisterSpec for BTE_HIG0 {
        const ADDRESS: u8 = 179u8;
    }
    #[doc = "`read()` method returns [bte_hig0::R](R) reader structure"]
    impl crate::Readable for BTE_HIG0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bte_hig0::W](W) writer structure"]
    impl crate::Writable for BTE_HIG0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTE_HIG0 to value 0"]
    impl crate::Resettable for BTE_HIG0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bte_hig1::BTE_HIG1;
#[doc = "BTE Window Height Setting 1"]
pub mod bte_hig1 {
    #[doc = "Register `BTE_HIG1` reader"]
    pub struct R(crate::R<BTE_HIG1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BTE_HIG1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BTE_HIG1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BTE_HIG1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BTE_HIG1` writer"]
    pub struct W(crate::W<BTE_HIG1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BTE_HIG1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BTE_HIG1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BTE_HIG1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BTE_WINDOW_HEIGHT` reader - BTE Window Height Setting"]
    pub type BTE_WINDOW_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `BTE_WINDOW_HEIGHT` writer - BTE Window Height Setting"]
    pub type BTE_WINDOW_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, BTE_HIG1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - BTE Window Height Setting"]
        #[inline(always)]
        pub fn bte_window_height(&self) -> BTE_WINDOW_HEIGHT_R {
            BTE_WINDOW_HEIGHT_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - BTE Window Height Setting"]
        #[inline(always)]
        #[must_use]
        pub fn bte_window_height(&mut self) -> BTE_WINDOW_HEIGHT_W<0> {
            BTE_WINDOW_HEIGHT_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "BTE Window Height Setting 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bte_hig1](index.html) module"]
    pub struct BTE_HIG1;
    impl crate::RegisterSpec for BTE_HIG1 {
        const ADDRESS: u8 = 180u8;
    }
    #[doc = "`read()` method returns [bte_hig1::R](R) reader structure"]
    impl crate::Readable for BTE_HIG1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bte_hig1::W](W) writer structure"]
    impl crate::Writable for BTE_HIG1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BTE_HIG1 to value 0"]
    impl crate::Resettable for BTE_HIG1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use apb_ctrl::APB_CTRL;
#[doc = "Alpha Blending"]
pub mod apb_ctrl {
    #[doc = "Register `APB_CTRL` reader"]
    pub struct R(crate::R<APB_CTRL>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<APB_CTRL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<APB_CTRL>> for R {
        #[inline(always)]
        fn from(reader: crate::R<APB_CTRL>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `APB_CTRL` writer"]
    pub struct W(crate::W<APB_CTRL>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<APB_CTRL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<APB_CTRL>> for W {
        #[inline(always)]
        fn from(writer: crate::W<APB_CTRL>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ALPHA_BLENDING` reader - Window Alpha Blending effect for S0 &amp; S1 | Alpha = APB_CTRL/32 | Output Effect = (S0 image x (1 - alpha setting value)) + (S1 image x alpha setting value)"]
    pub type ALPHA_BLENDING_R = crate::FieldReader<u8>;
    #[doc = "Field `ALPHA_BLENDING` writer - Window Alpha Blending effect for S0 &amp; S1 | Alpha = APB_CTRL/32 | Output Effect = (S0 image x (1 - alpha setting value)) + (S1 image x alpha setting value)"]
    pub type ALPHA_BLENDING_W<'a, const O: u8> = crate::FieldWriter<'a, APB_CTRL, u8, u8, 6, O>;
    impl R {
        #[doc = "Bits 0:5 - Window Alpha Blending effect for S0 &amp; S1 | Alpha = APB_CTRL/32 | Output Effect = (S0 image x (1 - alpha setting value)) + (S1 image x alpha setting value)"]
        #[inline(always)]
        pub fn alpha_blending(&self) -> ALPHA_BLENDING_R {
            ALPHA_BLENDING_R::new(self.bits & 0x3f)
        }
    }
    impl W {
        #[doc = "Bits 0:5 - Window Alpha Blending effect for S0 &amp; S1 | Alpha = APB_CTRL/32 | Output Effect = (S0 image x (1 - alpha setting value)) + (S1 image x alpha setting value)"]
        #[inline(always)]
        #[must_use]
        pub fn alpha_blending(&mut self) -> ALPHA_BLENDING_W<0> {
            ALPHA_BLENDING_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Alpha Blending\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb_ctrl](index.html) module"]
    pub struct APB_CTRL;
    impl crate::RegisterSpec for APB_CTRL {
        const ADDRESS: u8 = 181u8;
    }
    #[doc = "`read()` method returns [apb_ctrl::R](R) reader structure"]
    impl crate::Readable for APB_CTRL {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [apb_ctrl::W](W) writer structure"]
    impl crate::Writable for APB_CTRL {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets APB_CTRL to value 0"]
    impl crate::Resettable for APB_CTRL {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_ctrl::DMA_CTRL;
#[doc = "Serial flash DMA Controller REG"]
pub mod dma_ctrl {
    #[doc = "Register `DMA_CTRL` reader"]
    pub struct R(crate::R<DMA_CTRL>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_CTRL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_CTRL>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_CTRL>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_CTRL` writer"]
    pub struct W(crate::W<DMA_CTRL>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_CTRL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_CTRL>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_CTRL>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_ENABLE` reader - DMA Start Bit (write) or DMA Busy Check Bit (read)"]
    pub type DMA_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `DMA_ENABLE` writer - DMA Start Bit (write) or DMA Busy Check Bit (read)"]
    pub type DMA_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, DMA_CTRL, bool, O>;
    impl R {
        #[doc = "Bit 0 - DMA Start Bit (write) or DMA Busy Check Bit (read)"]
        #[inline(always)]
        pub fn dma_enable(&self) -> DMA_ENABLE_R {
            DMA_ENABLE_R::new((self.bits & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - DMA Start Bit (write) or DMA Busy Check Bit (read)"]
        #[inline(always)]
        #[must_use]
        pub fn dma_enable(&mut self) -> DMA_ENABLE_W<0> {
            DMA_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Serial flash DMA Controller REG\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_ctrl](index.html) module"]
    pub struct DMA_CTRL;
    impl crate::RegisterSpec for DMA_CTRL {
        const ADDRESS: u8 = 182u8;
    }
    #[doc = "`read()` method returns [dma_ctrl::R](R) reader structure"]
    impl crate::Readable for DMA_CTRL {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_ctrl::W](W) writer structure"]
    impl crate::Writable for DMA_CTRL {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_CTRL to value 0"]
    impl crate::Resettable for DMA_CTRL {
        const RESET_VALUE: u8 = 0;
    }
}
pub use sfl_ctrl::SFL_CTRL;
#[doc = "Serial Flash/ROM Controller Register"]
pub mod sfl_ctrl {
    #[doc = "Register `SFL_CTRL` reader"]
    pub struct R(crate::R<SFL_CTRL>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SFL_CTRL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SFL_CTRL>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SFL_CTRL>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SFL_CTRL` writer"]
    pub struct W(crate::W<SFL_CTRL>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SFL_CTRL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SFL_CTRL>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SFL_CTRL>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `READ_COMMAND_CODE_AND_BEHAVIOR` reader - Read Command code &amp; behavior selection"]
    pub type READ_COMMAND_CODE_AND_BEHAVIOR_R = crate::FieldReader<u8>;
    #[doc = "Field `READ_COMMAND_CODE_AND_BEHAVIOR` writer - Read Command code &amp; behavior selection"]
    pub type READ_COMMAND_CODE_AND_BEHAVIOR_W<'a, const O: u8> =
        crate::FieldWriter<'a, SFL_CTRL, u8, u8, 4, O>;
    #[doc = "Field `RA8875_COMPATIBLE_ENABLE` reader - RA8875 compatible mode"]
    pub type RA8875_COMPATIBLE_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `RA8875_COMPATIBLE_ENABLE` writer - RA8875 compatible mode"]
    pub type RA8875_COMPATIBLE_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, SFL_CTRL, bool, O>;
    #[doc = "Field `SERIAL_FLASH_ROM_ADDRESS_MODE` reader - Serial Flash/ROM Address Mode"]
    pub type SERIAL_FLASH_ROM_ADDRESS_MODE_R = crate::BitReader<SERIAL_FLASH_ROM_ADDRESS_MODE_A>;
    #[doc = "Serial Flash/ROM Address Mode\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum SERIAL_FLASH_ROM_ADDRESS_MODE_A {
        #[doc = "0: 24 bits address mode"]
        ADDRESS_24BIT = 0,
        #[doc = "1: 32 bits address mode"]
        ADDRESS_32BIT = 1,
    }
    impl From<SERIAL_FLASH_ROM_ADDRESS_MODE_A> for bool {
        #[inline(always)]
        fn from(variant: SERIAL_FLASH_ROM_ADDRESS_MODE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl SERIAL_FLASH_ROM_ADDRESS_MODE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SERIAL_FLASH_ROM_ADDRESS_MODE_A {
            match self.bits {
                false => SERIAL_FLASH_ROM_ADDRESS_MODE_A::ADDRESS_24BIT,
                true => SERIAL_FLASH_ROM_ADDRESS_MODE_A::ADDRESS_32BIT,
            }
        }
        #[doc = "Checks if the value of the field is `ADDRESS_24BIT`"]
        #[inline(always)]
        pub fn is_address_24bit(&self) -> bool {
            *self == SERIAL_FLASH_ROM_ADDRESS_MODE_A::ADDRESS_24BIT
        }
        #[doc = "Checks if the value of the field is `ADDRESS_32BIT`"]
        #[inline(always)]
        pub fn is_address_32bit(&self) -> bool {
            *self == SERIAL_FLASH_ROM_ADDRESS_MODE_A::ADDRESS_32BIT
        }
    }
    #[doc = "Field `SERIAL_FLASH_ROM_ADDRESS_MODE` writer - Serial Flash/ROM Address Mode"]
    pub type SERIAL_FLASH_ROM_ADDRESS_MODE_W<'a, const O: u8> =
        crate::BitWriter<'a, SFL_CTRL, SERIAL_FLASH_ROM_ADDRESS_MODE_A, O>;
    impl<'a, const O: u8> SERIAL_FLASH_ROM_ADDRESS_MODE_W<'a, O> {
        #[doc = "24 bits address mode"]
        #[inline(always)]
        pub fn address_24bit(self) -> &'a mut W {
            self.variant(SERIAL_FLASH_ROM_ADDRESS_MODE_A::ADDRESS_24BIT)
        }
        #[doc = "32 bits address mode"]
        #[inline(always)]
        pub fn address_32bit(self) -> &'a mut W {
            self.variant(SERIAL_FLASH_ROM_ADDRESS_MODE_A::ADDRESS_32BIT)
        }
    }
    #[doc = "Field `SERIAL_FLASH_ROM_ACCESS_MODE` reader - Serial Flash/ROM Access Mode"]
    pub type SERIAL_FLASH_ROM_ACCESS_MODE_R = crate::BitReader<SERIAL_FLASH_ROM_ACCESS_MODE_A>;
    #[doc = "Serial Flash/ROM Access Mode\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum SERIAL_FLASH_ROM_ACCESS_MODE_A {
        #[doc = "0: Font mode (for external CGROM)"]
        FONT = 0,
        #[doc = "1: DMA mode (for CGRAM, pattern, boot start image or OSD)"]
        DMA = 1,
    }
    impl From<SERIAL_FLASH_ROM_ACCESS_MODE_A> for bool {
        #[inline(always)]
        fn from(variant: SERIAL_FLASH_ROM_ACCESS_MODE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl SERIAL_FLASH_ROM_ACCESS_MODE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SERIAL_FLASH_ROM_ACCESS_MODE_A {
            match self.bits {
                false => SERIAL_FLASH_ROM_ACCESS_MODE_A::FONT,
                true => SERIAL_FLASH_ROM_ACCESS_MODE_A::DMA,
            }
        }
        #[doc = "Checks if the value of the field is `FONT`"]
        #[inline(always)]
        pub fn is_font(&self) -> bool {
            *self == SERIAL_FLASH_ROM_ACCESS_MODE_A::FONT
        }
        #[doc = "Checks if the value of the field is `DMA`"]
        #[inline(always)]
        pub fn is_dma(&self) -> bool {
            *self == SERIAL_FLASH_ROM_ACCESS_MODE_A::DMA
        }
    }
    #[doc = "Field `SERIAL_FLASH_ROM_ACCESS_MODE` writer - Serial Flash/ROM Access Mode"]
    pub type SERIAL_FLASH_ROM_ACCESS_MODE_W<'a, const O: u8> =
        crate::BitWriter<'a, SFL_CTRL, SERIAL_FLASH_ROM_ACCESS_MODE_A, O>;
    impl<'a, const O: u8> SERIAL_FLASH_ROM_ACCESS_MODE_W<'a, O> {
        #[doc = "Font mode (for external CGROM)"]
        #[inline(always)]
        pub fn font(self) -> &'a mut W {
            self.variant(SERIAL_FLASH_ROM_ACCESS_MODE_A::FONT)
        }
        #[doc = "DMA mode (for CGRAM, pattern, boot start image or OSD)"]
        #[inline(always)]
        pub fn dma(self) -> &'a mut W {
            self.variant(SERIAL_FLASH_ROM_ACCESS_MODE_A::DMA)
        }
    }
    #[doc = "Field `SERIAL_FLASH_ROM_INTERFACE_NUMBER` reader - Serial Flash/ROM Interface \\# Select"]
    pub type SERIAL_FLASH_ROM_INTERFACE_NUMBER_R = crate::BitReader<bool>;
    #[doc = "Field `SERIAL_FLASH_ROM_INTERFACE_NUMBER` writer - Serial Flash/ROM Interface \\# Select"]
    pub type SERIAL_FLASH_ROM_INTERFACE_NUMBER_W<'a, const O: u8> =
        crate::BitWriter<'a, SFL_CTRL, bool, O>;
    impl R {
        #[doc = "Bits 0:3 - Read Command code &amp; behavior selection"]
        #[inline(always)]
        pub fn read_command_code_and_behavior(&self) -> READ_COMMAND_CODE_AND_BEHAVIOR_R {
            READ_COMMAND_CODE_AND_BEHAVIOR_R::new(self.bits & 0x0f)
        }
        #[doc = "Bit 4 - RA8875 compatible mode"]
        #[inline(always)]
        pub fn ra8875_compatible_enable(&self) -> RA8875_COMPATIBLE_ENABLE_R {
            RA8875_COMPATIBLE_ENABLE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Serial Flash/ROM Address Mode"]
        #[inline(always)]
        pub fn serial_flash_rom_address_mode(&self) -> SERIAL_FLASH_ROM_ADDRESS_MODE_R {
            SERIAL_FLASH_ROM_ADDRESS_MODE_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Serial Flash/ROM Access Mode"]
        #[inline(always)]
        pub fn serial_flash_rom_access_mode(&self) -> SERIAL_FLASH_ROM_ACCESS_MODE_R {
            SERIAL_FLASH_ROM_ACCESS_MODE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Serial Flash/ROM Interface \\# Select"]
        #[inline(always)]
        pub fn serial_flash_rom_interface_number(&self) -> SERIAL_FLASH_ROM_INTERFACE_NUMBER_R {
            SERIAL_FLASH_ROM_INTERFACE_NUMBER_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:3 - Read Command code &amp; behavior selection"]
        #[inline(always)]
        #[must_use]
        pub fn read_command_code_and_behavior(&mut self) -> READ_COMMAND_CODE_AND_BEHAVIOR_W<0> {
            READ_COMMAND_CODE_AND_BEHAVIOR_W::new(self)
        }
        #[doc = "Bit 4 - RA8875 compatible mode"]
        #[inline(always)]
        #[must_use]
        pub fn ra8875_compatible_enable(&mut self) -> RA8875_COMPATIBLE_ENABLE_W<4> {
            RA8875_COMPATIBLE_ENABLE_W::new(self)
        }
        #[doc = "Bit 5 - Serial Flash/ROM Address Mode"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_rom_address_mode(&mut self) -> SERIAL_FLASH_ROM_ADDRESS_MODE_W<5> {
            SERIAL_FLASH_ROM_ADDRESS_MODE_W::new(self)
        }
        #[doc = "Bit 6 - Serial Flash/ROM Access Mode"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_rom_access_mode(&mut self) -> SERIAL_FLASH_ROM_ACCESS_MODE_W<6> {
            SERIAL_FLASH_ROM_ACCESS_MODE_W::new(self)
        }
        #[doc = "Bit 7 - Serial Flash/ROM Interface \\# Select"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_rom_interface_number(
            &mut self,
        ) -> SERIAL_FLASH_ROM_INTERFACE_NUMBER_W<7> {
            SERIAL_FLASH_ROM_INTERFACE_NUMBER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Serial Flash/ROM Controller Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sfl_ctrl](index.html) module"]
    pub struct SFL_CTRL;
    impl crate::RegisterSpec for SFL_CTRL {
        const ADDRESS: u8 = 183u8;
    }
    #[doc = "`read()` method returns [sfl_ctrl::R](R) reader structure"]
    impl crate::Readable for SFL_CTRL {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [sfl_ctrl::W](W) writer structure"]
    impl crate::Writable for SFL_CTRL {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SFL_CTRL to value 0"]
    impl crate::Resettable for SFL_CTRL {
        const RESET_VALUE: u8 = 0;
    }
}
pub use spidr::SPIDR;
#[doc = "SPI master Tx/Rx FIFO Data Register"]
pub mod spidr {
    #[doc = "Register `SPIDR` reader"]
    pub struct R(crate::R<SPIDR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SPIDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SPIDR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SPIDR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SPIDR` writer"]
    pub struct W(crate::W<SPIDR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SPIDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SPIDR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SPIDR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `FIFO` reader - SPI master Tx/Rx FIFO Data"]
    pub type FIFO_R = crate::FieldReader<u8>;
    #[doc = "Field `FIFO` writer - SPI master Tx/Rx FIFO Data"]
    pub type FIFO_W<'a, const O: u8> = crate::FieldWriter<'a, SPIDR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - SPI master Tx/Rx FIFO Data"]
        #[inline(always)]
        pub fn fifo(&self) -> FIFO_R {
            FIFO_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - SPI master Tx/Rx FIFO Data"]
        #[inline(always)]
        #[must_use]
        pub fn fifo(&mut self) -> FIFO_W<0> {
            FIFO_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SPI master Tx/Rx FIFO Data Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spidr](index.html) module"]
    pub struct SPIDR;
    impl crate::RegisterSpec for SPIDR {
        const ADDRESS: u8 = 184u8;
    }
    #[doc = "`read()` method returns [spidr::R](R) reader structure"]
    impl crate::Readable for SPIDR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [spidr::W](W) writer structure"]
    impl crate::Writable for SPIDR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SPIDR to value 0"]
    impl crate::Resettable for SPIDR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use spimcr2::SPIMCR2;
#[doc = "SPI master Control Register"]
pub mod spimcr2 {
    #[doc = "Register `SPIMCR2` reader"]
    pub struct R(crate::R<SPIMCR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SPIMCR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SPIMCR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SPIMCR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SPIMCR2` writer"]
    pub struct W(crate::W<SPIMCR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SPIMCR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SPIMCR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SPIMCR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SPI_MODE` reader - SPI operation mode"]
    pub type SPI_MODE_R = crate::FieldReader<u8>;
    #[doc = "Field `SPI_MODE` writer - SPI operation mode"]
    pub type SPI_MODE_W<'a, const O: u8> = crate::FieldWriter<'a, SPIMCR2, u8, u8, 2, O>;
    #[doc = "Field `MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT` reader - Mask interrupt for while Tx FIFO empty &amp; SPI engine/FSM idle"]
    pub type MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT` writer - Mask interrupt for while Tx FIFO empty &amp; SPI engine/FSM idle"]
    pub type MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_W<'a, const O: u8> =
        crate::BitWriter<'a, SPIMCR2, bool, O>;
    #[doc = "Field `MASK_FIFO_OVERFLOW_INTERRUPT` reader - Mask interrupt for FIFO overflow error"]
    pub type MASK_FIFO_OVERFLOW_INTERRUPT_R = crate::BitReader<bool>;
    #[doc = "Field `MASK_FIFO_OVERFLOW_INTERRUPT` writer - Mask interrupt for FIFO overflow error"]
    pub type MASK_FIFO_OVERFLOW_INTERRUPT_W<'a, const O: u8> =
        crate::BitWriter<'a, SPIMCR2, bool, O>;
    #[doc = "Field `SLAVE_SELECT_ACTIVE_ENABLE` reader - Slave Select signal active"]
    pub type SLAVE_SELECT_ACTIVE_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `SLAVE_SELECT_ACTIVE_ENABLE` writer - Slave Select signal active"]
    pub type SLAVE_SELECT_ACTIVE_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, SPIMCR2, bool, O>;
    #[doc = "Field `SLAVE_SELECT_PORT` reader - Control Slave Select drive on which xnsfcs"]
    pub type SLAVE_SELECT_PORT_R = crate::BitReader<bool>;
    #[doc = "Field `SLAVE_SELECT_PORT` writer - Control Slave Select drive on which xnsfcs"]
    pub type SLAVE_SELECT_PORT_W<'a, const O: u8> = crate::BitWriter<'a, SPIMCR2, bool, O>;
    #[doc = "Field `MASTER_INTERRUPT_ENABLE` reader - SPI Master Interrupt enable"]
    pub type MASTER_INTERRUPT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `MASTER_INTERRUPT_ENABLE` writer - SPI Master Interrupt enable"]
    pub type MASTER_INTERRUPT_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, SPIMCR2, bool, O>;
    impl R {
        #[doc = "Bits 0:1 - SPI operation mode"]
        #[inline(always)]
        pub fn spi_mode(&self) -> SPI_MODE_R {
            SPI_MODE_R::new(self.bits & 3)
        }
        #[doc = "Bit 2 - Mask interrupt for while Tx FIFO empty &amp; SPI engine/FSM idle"]
        #[inline(always)]
        pub fn mask_tx_fifo_empty_and_spi_engine_idle_interrupt(
            &self,
        ) -> MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_R {
            MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Mask interrupt for FIFO overflow error"]
        #[inline(always)]
        pub fn mask_fifo_overflow_interrupt(&self) -> MASK_FIFO_OVERFLOW_INTERRUPT_R {
            MASK_FIFO_OVERFLOW_INTERRUPT_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Slave Select signal active"]
        #[inline(always)]
        pub fn slave_select_active_enable(&self) -> SLAVE_SELECT_ACTIVE_ENABLE_R {
            SLAVE_SELECT_ACTIVE_ENABLE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Control Slave Select drive on which xnsfcs"]
        #[inline(always)]
        pub fn slave_select_port(&self) -> SLAVE_SELECT_PORT_R {
            SLAVE_SELECT_PORT_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - SPI Master Interrupt enable"]
        #[inline(always)]
        pub fn master_interrupt_enable(&self) -> MASTER_INTERRUPT_ENABLE_R {
            MASTER_INTERRUPT_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - SPI operation mode"]
        #[inline(always)]
        #[must_use]
        pub fn spi_mode(&mut self) -> SPI_MODE_W<0> {
            SPI_MODE_W::new(self)
        }
        #[doc = "Bit 2 - Mask interrupt for while Tx FIFO empty &amp; SPI engine/FSM idle"]
        #[inline(always)]
        #[must_use]
        pub fn mask_tx_fifo_empty_and_spi_engine_idle_interrupt(
            &mut self,
        ) -> MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_W<2> {
            MASK_TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_W::new(self)
        }
        #[doc = "Bit 3 - Mask interrupt for FIFO overflow error"]
        #[inline(always)]
        #[must_use]
        pub fn mask_fifo_overflow_interrupt(&mut self) -> MASK_FIFO_OVERFLOW_INTERRUPT_W<3> {
            MASK_FIFO_OVERFLOW_INTERRUPT_W::new(self)
        }
        #[doc = "Bit 4 - Slave Select signal active"]
        #[inline(always)]
        #[must_use]
        pub fn slave_select_active_enable(&mut self) -> SLAVE_SELECT_ACTIVE_ENABLE_W<4> {
            SLAVE_SELECT_ACTIVE_ENABLE_W::new(self)
        }
        #[doc = "Bit 5 - Control Slave Select drive on which xnsfcs"]
        #[inline(always)]
        #[must_use]
        pub fn slave_select_port(&mut self) -> SLAVE_SELECT_PORT_W<5> {
            SLAVE_SELECT_PORT_W::new(self)
        }
        #[doc = "Bit 6 - SPI Master Interrupt enable"]
        #[inline(always)]
        #[must_use]
        pub fn master_interrupt_enable(&mut self) -> MASTER_INTERRUPT_ENABLE_W<6> {
            MASTER_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SPI master Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spimcr2](index.html) module"]
    pub struct SPIMCR2;
    impl crate::RegisterSpec for SPIMCR2 {
        const ADDRESS: u8 = 185u8;
    }
    #[doc = "`read()` method returns [spimcr2::R](R) reader structure"]
    impl crate::Readable for SPIMCR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [spimcr2::W](W) writer structure"]
    impl crate::Writable for SPIMCR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SPIMCR2 to value 0"]
    impl crate::Resettable for SPIMCR2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use spimsr::SPIMSR;
#[doc = "SPI master Status Register"]
pub mod spimsr {
    #[doc = "Register `SPIMSR` reader"]
    pub struct R(crate::R<SPIMSR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SPIMSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SPIMSR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SPIMSR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SPIMSR` writer"]
    pub struct W(crate::W<SPIMSR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SPIMSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SPIMSR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SPIMSR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG` reader - Tx FIFO empty &amp; SPI engine/FSM idle interrupt flag"]
    pub type TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG` writer - Tx FIFO empty &amp; SPI engine/FSM idle interrupt flag"]
    pub type TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG_W<'a, const O: u8> =
        crate::BitWriter<'a, SPIMSR, bool, O>;
    #[doc = "Field `OVERFLOW_INTERRUPT_FLAG` reader - Overflow interrupt flag"]
    pub type OVERFLOW_INTERRUPT_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `OVERFLOW_INTERRUPT_FLAG` writer - Overflow interrupt flag"]
    pub type OVERFLOW_INTERRUPT_FLAG_W<'a, const O: u8> = crate::BitWriter<'a, SPIMSR, bool, O>;
    #[doc = "Field `RX_FIFO_FULL_FLAG` reader - Rx FIFO full flag"]
    pub type RX_FIFO_FULL_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `RX_FIFO_EMPTY_FLAG` reader - Rx FIFO empty flag"]
    pub type RX_FIFO_EMPTY_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `TX_FIFO_FULL_FLAG` reader - Tx FIFO full flag"]
    pub type TX_FIFO_FULL_FLAG_R = crate::BitReader<bool>;
    #[doc = "Field `TX_FIFO_EMPTY_FLAG` reader - Tx FIFO empty flag"]
    pub type TX_FIFO_EMPTY_FLAG_R = crate::BitReader<bool>;
    impl R {
        #[doc = "Bit 2 - Tx FIFO empty &amp; SPI engine/FSM idle interrupt flag"]
        #[inline(always)]
        pub fn tx_fifo_empty_and_spi_engine_idle_interrupt_flag(
            &self,
        ) -> TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG_R {
            TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Overflow interrupt flag"]
        #[inline(always)]
        pub fn overflow_interrupt_flag(&self) -> OVERFLOW_INTERRUPT_FLAG_R {
            OVERFLOW_INTERRUPT_FLAG_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Rx FIFO full flag"]
        #[inline(always)]
        pub fn rx_fifo_full_flag(&self) -> RX_FIFO_FULL_FLAG_R {
            RX_FIFO_FULL_FLAG_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Rx FIFO empty flag"]
        #[inline(always)]
        pub fn rx_fifo_empty_flag(&self) -> RX_FIFO_EMPTY_FLAG_R {
            RX_FIFO_EMPTY_FLAG_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Tx FIFO full flag"]
        #[inline(always)]
        pub fn tx_fifo_full_flag(&self) -> TX_FIFO_FULL_FLAG_R {
            TX_FIFO_FULL_FLAG_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Tx FIFO empty flag"]
        #[inline(always)]
        pub fn tx_fifo_empty_flag(&self) -> TX_FIFO_EMPTY_FLAG_R {
            TX_FIFO_EMPTY_FLAG_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 2 - Tx FIFO empty &amp; SPI engine/FSM idle interrupt flag"]
        #[inline(always)]
        #[must_use]
        pub fn tx_fifo_empty_and_spi_engine_idle_interrupt_flag(
            &mut self,
        ) -> TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG_W<2> {
            TX_FIFO_EMPTY_AND_SPI_ENGINE_IDLE_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Bit 3 - Overflow interrupt flag"]
        #[inline(always)]
        #[must_use]
        pub fn overflow_interrupt_flag(&mut self) -> OVERFLOW_INTERRUPT_FLAG_W<3> {
            OVERFLOW_INTERRUPT_FLAG_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SPI master Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spimsr](index.html) module"]
    pub struct SPIMSR;
    impl crate::RegisterSpec for SPIMSR {
        const ADDRESS: u8 = 186u8;
    }
    #[doc = "`read()` method returns [spimsr::R](R) reader structure"]
    impl crate::Readable for SPIMSR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [spimsr::W](W) writer structure"]
    impl crate::Writable for SPIMSR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SPIMSR to value 0"]
    impl crate::Resettable for SPIMSR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use spi_divsor::SPI_DIVSOR;
#[doc = "SPI Clock period"]
pub mod spi_divsor {
    #[doc = "Register `SPI_DIVSOR` reader"]
    pub struct R(crate::R<SPI_DIVSOR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SPI_DIVSOR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SPI_DIVSOR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SPI_DIVSOR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SPI_DIVSOR` writer"]
    pub struct W(crate::W<SPI_DIVSOR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SPI_DIVSOR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SPI_DIVSOR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SPI_DIVSOR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SPI_CLOCK_PERIOD` reader - Set the SPI Clock period | Fsck = Fcore/((SPI_DIVSOR+1)*2)"]
    pub type SPI_CLOCK_PERIOD_R = crate::FieldReader<u8>;
    #[doc = "Field `SPI_CLOCK_PERIOD` writer - Set the SPI Clock period | Fsck = Fcore/((SPI_DIVSOR+1)*2)"]
    pub type SPI_CLOCK_PERIOD_W<'a, const O: u8> = crate::FieldWriter<'a, SPI_DIVSOR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Set the SPI Clock period | Fsck = Fcore/((SPI_DIVSOR+1)*2)"]
        #[inline(always)]
        pub fn spi_clock_period(&self) -> SPI_CLOCK_PERIOD_R {
            SPI_CLOCK_PERIOD_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Set the SPI Clock period | Fsck = Fcore/((SPI_DIVSOR+1)*2)"]
        #[inline(always)]
        #[must_use]
        pub fn spi_clock_period(&mut self) -> SPI_CLOCK_PERIOD_W<0> {
            SPI_CLOCK_PERIOD_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SPI Clock period\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_divsor](index.html) module"]
    pub struct SPI_DIVSOR;
    impl crate::RegisterSpec for SPI_DIVSOR {
        const ADDRESS: u8 = 187u8;
    }
    #[doc = "`read()` method returns [spi_divsor::R](R) reader structure"]
    impl crate::Readable for SPI_DIVSOR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [spi_divsor::W](W) writer structure"]
    impl crate::Writable for SPI_DIVSOR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SPI_DIVSOR to value 0x03"]
    impl crate::Resettable for SPI_DIVSOR {
        const RESET_VALUE: u8 = 0x03;
    }
}
pub use dma_sstr0::DMA_SSTR0;
#[doc = "Serial flash DMA Source Starting Address 0"]
pub mod dma_sstr0 {
    #[doc = "Register `DMA_SSTR0` reader"]
    pub struct R(crate::R<DMA_SSTR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_SSTR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_SSTR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_SSTR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_SSTR0` writer"]
    pub struct W(crate::W<DMA_SSTR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_SSTR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_SSTR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_SSTR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` reader - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` writer - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_SSTR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        pub fn serial_flash_dma_source_start_address(
            &self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_dma_source_start_address(
            &mut self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<0> {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Serial flash DMA Source Starting Address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_sstr0](index.html) module"]
    pub struct DMA_SSTR0;
    impl crate::RegisterSpec for DMA_SSTR0 {
        const ADDRESS: u8 = 188u8;
    }
    #[doc = "`read()` method returns [dma_sstr0::R](R) reader structure"]
    impl crate::Readable for DMA_SSTR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_sstr0::W](W) writer structure"]
    impl crate::Writable for DMA_SSTR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_SSTR0 to value 0"]
    impl crate::Resettable for DMA_SSTR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_sstr1::DMA_SSTR1;
#[doc = "Serial flash DMA Source Starting Address 1"]
pub mod dma_sstr1 {
    #[doc = "Register `DMA_SSTR1` reader"]
    pub struct R(crate::R<DMA_SSTR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_SSTR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_SSTR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_SSTR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_SSTR1` writer"]
    pub struct W(crate::W<DMA_SSTR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_SSTR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_SSTR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_SSTR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` reader - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` writer - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_SSTR1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        pub fn serial_flash_dma_source_start_address(
            &self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_dma_source_start_address(
            &mut self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<0> {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Serial flash DMA Source Starting Address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_sstr1](index.html) module"]
    pub struct DMA_SSTR1;
    impl crate::RegisterSpec for DMA_SSTR1 {
        const ADDRESS: u8 = 189u8;
    }
    #[doc = "`read()` method returns [dma_sstr1::R](R) reader structure"]
    impl crate::Readable for DMA_SSTR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_sstr1::W](W) writer structure"]
    impl crate::Writable for DMA_SSTR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_SSTR1 to value 0"]
    impl crate::Resettable for DMA_SSTR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_sstr2::DMA_SSTR2;
#[doc = "Serial flash DMA Source Starting Address 2"]
pub mod dma_sstr2 {
    #[doc = "Register `DMA_SSTR2` reader"]
    pub struct R(crate::R<DMA_SSTR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_SSTR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_SSTR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_SSTR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_SSTR2` writer"]
    pub struct W(crate::W<DMA_SSTR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_SSTR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_SSTR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_SSTR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` reader - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` writer - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_SSTR2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        pub fn serial_flash_dma_source_start_address(
            &self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_dma_source_start_address(
            &mut self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<0> {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Serial flash DMA Source Starting Address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_sstr2](index.html) module"]
    pub struct DMA_SSTR2;
    impl crate::RegisterSpec for DMA_SSTR2 {
        const ADDRESS: u8 = 190u8;
    }
    #[doc = "`read()` method returns [dma_sstr2::R](R) reader structure"]
    impl crate::Readable for DMA_SSTR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_sstr2::W](W) writer structure"]
    impl crate::Writable for DMA_SSTR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_SSTR2 to value 0"]
    impl crate::Resettable for DMA_SSTR2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_sstr3::DMA_SSTR3;
#[doc = "Serial flash DMA Source Starting Address 3"]
pub mod dma_sstr3 {
    #[doc = "Register `DMA_SSTR3` reader"]
    pub struct R(crate::R<DMA_SSTR3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_SSTR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_SSTR3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_SSTR3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_SSTR3` writer"]
    pub struct W(crate::W<DMA_SSTR3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_SSTR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_SSTR3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_SSTR3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` reader - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `SERIAL_FLASH_DMA_SOURCE_START_ADDRESS` writer - Serial flash DMA Source START ADDRESS"]
    pub type SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_SSTR3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        pub fn serial_flash_dma_source_start_address(
            &self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Serial flash DMA Source START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn serial_flash_dma_source_start_address(
            &mut self,
        ) -> SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W<0> {
            SERIAL_FLASH_DMA_SOURCE_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Serial flash DMA Source Starting Address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_sstr3](index.html) module"]
    pub struct DMA_SSTR3;
    impl crate::RegisterSpec for DMA_SSTR3 {
        const ADDRESS: u8 = 191u8;
    }
    #[doc = "`read()` method returns [dma_sstr3::R](R) reader structure"]
    impl crate::Readable for DMA_SSTR3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_sstr3::W](W) writer structure"]
    impl crate::Writable for DMA_SSTR3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_SSTR3 to value 0"]
    impl crate::Resettable for DMA_SSTR3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_dx0::DMA_DX0;
#[doc = "DMA Destination Window Upper-Left corner X-coordinates 0"]
pub mod dma_dx0 {
    #[doc = "Register `DMA_DX0` reader"]
    pub struct R(crate::R<DMA_DX0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_DX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_DX0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_DX0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_DX0` writer"]
    pub struct W(crate::W<DMA_DX0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_DX0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_DX0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_DX0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_DESTINATION_X` reader - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
    pub type DMA_DESTINATION_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_X` writer - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
    pub type DMA_DESTINATION_X_W<'a, const O: u8> = crate::FieldWriter<'a, DMA_DX0, u8, u8, 8, O>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` reader - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` writer - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_DX0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
        #[inline(always)]
        pub fn dma_destination_x(&self) -> DMA_DESTINATION_X_R {
            DMA_DESTINATION_X_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        pub fn dma_destination_address(&self) -> DMA_DESTINATION_ADDRESS_R {
            DMA_DESTINATION_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_x(&mut self) -> DMA_DESTINATION_X_W<0> {
            DMA_DESTINATION_X_W::new(self)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_address(&mut self) -> DMA_DESTINATION_ADDRESS_W<0> {
            DMA_DESTINATION_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Destination Window Upper-Left corner X-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_dx0](index.html) module"]
    pub struct DMA_DX0;
    impl crate::RegisterSpec for DMA_DX0 {
        const ADDRESS: u8 = 192u8;
    }
    #[doc = "`read()` method returns [dma_dx0::R](R) reader structure"]
    impl crate::Readable for DMA_DX0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_dx0::W](W) writer structure"]
    impl crate::Writable for DMA_DX0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_DX0 to value 0"]
    impl crate::Resettable for DMA_DX0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_dx1::DMA_DX1;
#[doc = "DMA Destination Window Upper-Left corner X-coordinates 1"]
pub mod dma_dx1 {
    #[doc = "Register `DMA_DX1` reader"]
    pub struct R(crate::R<DMA_DX1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_DX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_DX1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_DX1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_DX1` writer"]
    pub struct W(crate::W<DMA_DX1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_DX1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_DX1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_DX1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_DESTINATION_X` reader - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
    pub type DMA_DESTINATION_X_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_X` writer - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
    pub type DMA_DESTINATION_X_W<'a, const O: u8> = crate::FieldWriter<'a, DMA_DX1, u8, u8, 5, O>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` reader - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` writer - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_DX1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:4 - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
        #[inline(always)]
        pub fn dma_destination_x(&self) -> DMA_DESTINATION_X_R {
            DMA_DESTINATION_X_R::new(self.bits & 0x1f)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        pub fn dma_destination_address(&self) -> DMA_DESTINATION_ADDRESS_R {
            DMA_DESTINATION_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - DMA Destination Window Upper-Left corner X-coordinates on Canvas area"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_x(&mut self) -> DMA_DESTINATION_X_W<0> {
            DMA_DESTINATION_X_W::new(self)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_address(&mut self) -> DMA_DESTINATION_ADDRESS_W<0> {
            DMA_DESTINATION_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Destination Window Upper-Left corner X-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_dx1](index.html) module"]
    pub struct DMA_DX1;
    impl crate::RegisterSpec for DMA_DX1 {
        const ADDRESS: u8 = 193u8;
    }
    #[doc = "`read()` method returns [dma_dx1::R](R) reader structure"]
    impl crate::Readable for DMA_DX1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_dx1::W](W) writer structure"]
    impl crate::Writable for DMA_DX1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_DX1 to value 0"]
    impl crate::Resettable for DMA_DX1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_dy0::DMA_DY0;
#[doc = "DMA Destination Window Upper-Left corner Y-coordinates 0"]
pub mod dma_dy0 {
    #[doc = "Register `DMA_DY0` reader"]
    pub struct R(crate::R<DMA_DY0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_DY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_DY0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_DY0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_DY0` writer"]
    pub struct W(crate::W<DMA_DY0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_DY0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_DY0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_DY0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_DESTINATION_Y` reader - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
    pub type DMA_DESTINATION_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_Y` writer - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
    pub type DMA_DESTINATION_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DMA_DY0, u8, u8, 8, O>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` reader - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` writer - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_DY0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
        #[inline(always)]
        pub fn dma_destination_y(&self) -> DMA_DESTINATION_Y_R {
            DMA_DESTINATION_Y_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        pub fn dma_destination_address(&self) -> DMA_DESTINATION_ADDRESS_R {
            DMA_DESTINATION_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_y(&mut self) -> DMA_DESTINATION_Y_W<0> {
            DMA_DESTINATION_Y_W::new(self)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_address(&mut self) -> DMA_DESTINATION_ADDRESS_W<0> {
            DMA_DESTINATION_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Destination Window Upper-Left corner Y-coordinates 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_dy0](index.html) module"]
    pub struct DMA_DY0;
    impl crate::RegisterSpec for DMA_DY0 {
        const ADDRESS: u8 = 194u8;
    }
    #[doc = "`read()` method returns [dma_dy0::R](R) reader structure"]
    impl crate::Readable for DMA_DY0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_dy0::W](W) writer structure"]
    impl crate::Writable for DMA_DY0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_DY0 to value 0"]
    impl crate::Resettable for DMA_DY0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_dy1::DMA_DY1;
#[doc = "DMA Destination Window Upper-Left corner Y-coordinates 1"]
pub mod dma_dy1 {
    #[doc = "Register `DMA_DY1` reader"]
    pub struct R(crate::R<DMA_DY1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_DY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_DY1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_DY1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_DY1` writer"]
    pub struct W(crate::W<DMA_DY1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_DY1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_DY1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_DY1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_DESTINATION_Y` reader - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
    pub type DMA_DESTINATION_Y_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_Y` writer - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
    pub type DMA_DESTINATION_Y_W<'a, const O: u8> = crate::FieldWriter<'a, DMA_DY1, u8, u8, 5, O>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` reader - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_DESTINATION_ADDRESS` writer - Destination address in SDRAM"]
    pub type DMA_DESTINATION_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_DY1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:4 - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
        #[inline(always)]
        pub fn dma_destination_y(&self) -> DMA_DESTINATION_Y_R {
            DMA_DESTINATION_Y_R::new(self.bits & 0x1f)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        pub fn dma_destination_address(&self) -> DMA_DESTINATION_ADDRESS_R {
            DMA_DESTINATION_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - DMA Destination Window Upper-Left corner Y-coordinates on Canvas area"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_y(&mut self) -> DMA_DESTINATION_Y_W<0> {
            DMA_DESTINATION_Y_W::new(self)
        }
        #[doc = "Bits 0:7 - Destination address in SDRAM"]
        #[inline(always)]
        #[must_use]
        pub fn dma_destination_address(&mut self) -> DMA_DESTINATION_ADDRESS_W<0> {
            DMA_DESTINATION_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Destination Window Upper-Left corner Y-coordinates 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_dy1](index.html) module"]
    pub struct DMA_DY1;
    impl crate::RegisterSpec for DMA_DY1 {
        const ADDRESS: u8 = 195u8;
    }
    #[doc = "`read()` method returns [dma_dy1::R](R) reader structure"]
    impl crate::Readable for DMA_DY1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_dy1::W](W) writer structure"]
    impl crate::Writable for DMA_DY1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_DY1 to value 0"]
    impl crate::Resettable for DMA_DY1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dmaw_wth0::DMAW_WTH0;
#[doc = "DMA Block Width 0"]
pub mod dmaw_wth0 {
    #[doc = "Register `DMAW_WTH0` reader"]
    pub struct R(crate::R<DMAW_WTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMAW_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMAW_WTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMAW_WTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMAW_WTH0` writer"]
    pub struct W(crate::W<DMAW_WTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMAW_WTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMAW_WTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMAW_WTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_BLOCK_WIDTH` reader - DMA Block Width"]
    pub type DMA_BLOCK_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_BLOCK_WIDTH` writer - DMA Block Width"]
    pub type DMA_BLOCK_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, DMAW_WTH0, u8, u8, 8, O>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` reader - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` writer - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMAW_WTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - DMA Block Width"]
        #[inline(always)]
        pub fn dma_block_width(&self) -> DMA_BLOCK_WIDTH_R {
            DMA_BLOCK_WIDTH_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        pub fn dma_transfer_number(&self) -> DMA_TRANSFER_NUMBER_R {
            DMA_TRANSFER_NUMBER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - DMA Block Width"]
        #[inline(always)]
        #[must_use]
        pub fn dma_block_width(&mut self) -> DMA_BLOCK_WIDTH_W<0> {
            DMA_BLOCK_WIDTH_W::new(self)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        #[must_use]
        pub fn dma_transfer_number(&mut self) -> DMA_TRANSFER_NUMBER_W<0> {
            DMA_TRANSFER_NUMBER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Block Width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaw_wth0](index.html) module"]
    pub struct DMAW_WTH0;
    impl crate::RegisterSpec for DMAW_WTH0 {
        const ADDRESS: u8 = 198u8;
    }
    #[doc = "`read()` method returns [dmaw_wth0::R](R) reader structure"]
    impl crate::Readable for DMAW_WTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dmaw_wth0::W](W) writer structure"]
    impl crate::Writable for DMAW_WTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMAW_WTH0 to value 0"]
    impl crate::Resettable for DMAW_WTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dmaw_wth1::DMAW_WTH1;
#[doc = "DMA Block Width 1"]
pub mod dmaw_wth1 {
    #[doc = "Register `DMAW_WTH1` reader"]
    pub struct R(crate::R<DMAW_WTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMAW_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMAW_WTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMAW_WTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMAW_WTH1` writer"]
    pub struct W(crate::W<DMAW_WTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMAW_WTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMAW_WTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMAW_WTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_BLOCK_WIDTH` reader - DMA Block Width"]
    pub type DMA_BLOCK_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_BLOCK_WIDTH` writer - DMA Block Width"]
    pub type DMA_BLOCK_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, DMAW_WTH1, u8, u8, 8, O>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` reader - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` writer - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMAW_WTH1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - DMA Block Width"]
        #[inline(always)]
        pub fn dma_block_width(&self) -> DMA_BLOCK_WIDTH_R {
            DMA_BLOCK_WIDTH_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        pub fn dma_transfer_number(&self) -> DMA_TRANSFER_NUMBER_R {
            DMA_TRANSFER_NUMBER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - DMA Block Width"]
        #[inline(always)]
        #[must_use]
        pub fn dma_block_width(&mut self) -> DMA_BLOCK_WIDTH_W<0> {
            DMA_BLOCK_WIDTH_W::new(self)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        #[must_use]
        pub fn dma_transfer_number(&mut self) -> DMA_TRANSFER_NUMBER_W<0> {
            DMA_TRANSFER_NUMBER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Block Width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaw_wth1](index.html) module"]
    pub struct DMAW_WTH1;
    impl crate::RegisterSpec for DMAW_WTH1 {
        const ADDRESS: u8 = 199u8;
    }
    #[doc = "`read()` method returns [dmaw_wth1::R](R) reader structure"]
    impl crate::Readable for DMAW_WTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dmaw_wth1::W](W) writer structure"]
    impl crate::Writable for DMAW_WTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMAW_WTH1 to value 0"]
    impl crate::Resettable for DMAW_WTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dmaw_high0::DMAW_HIGH0;
#[doc = "DMA Block Height 0"]
pub mod dmaw_high0 {
    #[doc = "Register `DMAW_HIGH0` reader"]
    pub struct R(crate::R<DMAW_HIGH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMAW_HIGH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMAW_HIGH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMAW_HIGH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMAW_HIGH0` writer"]
    pub struct W(crate::W<DMAW_HIGH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMAW_HIGH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMAW_HIGH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMAW_HIGH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_BLOCK_HEIGHT` reader - DMA Block Height"]
    pub type DMA_BLOCK_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_BLOCK_HEIGHT` writer - DMA Block Height"]
    pub type DMA_BLOCK_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, DMAW_HIGH0, u8, u8, 8, O>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` reader - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` writer - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMAW_HIGH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - DMA Block Height"]
        #[inline(always)]
        pub fn dma_block_height(&self) -> DMA_BLOCK_HEIGHT_R {
            DMA_BLOCK_HEIGHT_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        pub fn dma_transfer_number(&self) -> DMA_TRANSFER_NUMBER_R {
            DMA_TRANSFER_NUMBER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - DMA Block Height"]
        #[inline(always)]
        #[must_use]
        pub fn dma_block_height(&mut self) -> DMA_BLOCK_HEIGHT_W<0> {
            DMA_BLOCK_HEIGHT_W::new(self)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        #[must_use]
        pub fn dma_transfer_number(&mut self) -> DMA_TRANSFER_NUMBER_W<0> {
            DMA_TRANSFER_NUMBER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Block Height 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaw_high0](index.html) module"]
    pub struct DMAW_HIGH0;
    impl crate::RegisterSpec for DMAW_HIGH0 {
        const ADDRESS: u8 = 200u8;
    }
    #[doc = "`read()` method returns [dmaw_high0::R](R) reader structure"]
    impl crate::Readable for DMAW_HIGH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dmaw_high0::W](W) writer structure"]
    impl crate::Writable for DMAW_HIGH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMAW_HIGH0 to value 0"]
    impl crate::Resettable for DMAW_HIGH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dmaw_high1::DMAW_HIGH1;
#[doc = "DMA Block Height 1"]
pub mod dmaw_high1 {
    #[doc = "Register `DMAW_HIGH1` reader"]
    pub struct R(crate::R<DMAW_HIGH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMAW_HIGH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMAW_HIGH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMAW_HIGH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMAW_HIGH1` writer"]
    pub struct W(crate::W<DMAW_HIGH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMAW_HIGH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMAW_HIGH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMAW_HIGH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_BLOCK_HEIGHT` reader - DMA Block Height"]
    pub type DMA_BLOCK_HEIGHT_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_BLOCK_HEIGHT` writer - DMA Block Height"]
    pub type DMA_BLOCK_HEIGHT_W<'a, const O: u8> = crate::FieldWriter<'a, DMAW_HIGH1, u8, u8, 8, O>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` reader - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_TRANSFER_NUMBER` writer - DMA Transfer Number"]
    pub type DMA_TRANSFER_NUMBER_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMAW_HIGH1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - DMA Block Height"]
        #[inline(always)]
        pub fn dma_block_height(&self) -> DMA_BLOCK_HEIGHT_R {
            DMA_BLOCK_HEIGHT_R::new(self.bits)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        pub fn dma_transfer_number(&self) -> DMA_TRANSFER_NUMBER_R {
            DMA_TRANSFER_NUMBER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - DMA Block Height"]
        #[inline(always)]
        #[must_use]
        pub fn dma_block_height(&mut self) -> DMA_BLOCK_HEIGHT_W<0> {
            DMA_BLOCK_HEIGHT_W::new(self)
        }
        #[doc = "Bits 0:7 - DMA Transfer Number"]
        #[inline(always)]
        #[must_use]
        pub fn dma_transfer_number(&mut self) -> DMA_TRANSFER_NUMBER_W<0> {
            DMA_TRANSFER_NUMBER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Block Height 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaw_high1](index.html) module"]
    pub struct DMAW_HIGH1;
    impl crate::RegisterSpec for DMAW_HIGH1 {
        const ADDRESS: u8 = 201u8;
    }
    #[doc = "`read()` method returns [dmaw_high1::R](R) reader structure"]
    impl crate::Readable for DMAW_HIGH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dmaw_high1::W](W) writer structure"]
    impl crate::Writable for DMAW_HIGH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMAW_HIGH1 to value 0"]
    impl crate::Resettable for DMAW_HIGH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_swth0::DMA_SWTH0;
#[doc = "DMA Source Picture Width 0"]
pub mod dma_swth0 {
    #[doc = "Register `DMA_SWTH0` reader"]
    pub struct R(crate::R<DMA_SWTH0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_SWTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_SWTH0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_SWTH0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_SWTH0` writer"]
    pub struct W(crate::W<DMA_SWTH0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_SWTH0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_SWTH0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_SWTH0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_SOURCE_PICTURE_WIDTH` reader - DMA Source Picture Width"]
    pub type DMA_SOURCE_PICTURE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_SOURCE_PICTURE_WIDTH` writer - DMA Source Picture Width"]
    pub type DMA_SOURCE_PICTURE_WIDTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_SWTH0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - DMA Source Picture Width"]
        #[inline(always)]
        pub fn dma_source_picture_width(&self) -> DMA_SOURCE_PICTURE_WIDTH_R {
            DMA_SOURCE_PICTURE_WIDTH_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - DMA Source Picture Width"]
        #[inline(always)]
        #[must_use]
        pub fn dma_source_picture_width(&mut self) -> DMA_SOURCE_PICTURE_WIDTH_W<0> {
            DMA_SOURCE_PICTURE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Source Picture Width 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_swth0](index.html) module"]
    pub struct DMA_SWTH0;
    impl crate::RegisterSpec for DMA_SWTH0 {
        const ADDRESS: u8 = 202u8;
    }
    #[doc = "`read()` method returns [dma_swth0::R](R) reader structure"]
    impl crate::Readable for DMA_SWTH0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_swth0::W](W) writer structure"]
    impl crate::Writable for DMA_SWTH0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_SWTH0 to value 0"]
    impl crate::Resettable for DMA_SWTH0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use dma_swth1::DMA_SWTH1;
#[doc = "DMA Source Picture Width 1"]
pub mod dma_swth1 {
    #[doc = "Register `DMA_SWTH1` reader"]
    pub struct R(crate::R<DMA_SWTH1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<DMA_SWTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<DMA_SWTH1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<DMA_SWTH1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `DMA_SWTH1` writer"]
    pub struct W(crate::W<DMA_SWTH1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<DMA_SWTH1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<DMA_SWTH1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<DMA_SWTH1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `DMA_SOURCE_PICTURE_WIDTH` reader - DMA Source Picture Width"]
    pub type DMA_SOURCE_PICTURE_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `DMA_SOURCE_PICTURE_WIDTH` writer - DMA Source Picture Width"]
    pub type DMA_SOURCE_PICTURE_WIDTH_W<'a, const O: u8> =
        crate::FieldWriter<'a, DMA_SWTH1, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - DMA Source Picture Width"]
        #[inline(always)]
        pub fn dma_source_picture_width(&self) -> DMA_SOURCE_PICTURE_WIDTH_R {
            DMA_SOURCE_PICTURE_WIDTH_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - DMA Source Picture Width"]
        #[inline(always)]
        #[must_use]
        pub fn dma_source_picture_width(&mut self) -> DMA_SOURCE_PICTURE_WIDTH_W<0> {
            DMA_SOURCE_PICTURE_WIDTH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "DMA Source Picture Width 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dma_swth1](index.html) module"]
    pub struct DMA_SWTH1;
    impl crate::RegisterSpec for DMA_SWTH1 {
        const ADDRESS: u8 = 203u8;
    }
    #[doc = "`read()` method returns [dma_swth1::R](R) reader structure"]
    impl crate::Readable for DMA_SWTH1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [dma_swth1::W](W) writer structure"]
    impl crate::Writable for DMA_SWTH1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets DMA_SWTH1 to value 0"]
    impl crate::Resettable for DMA_SWTH1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ccr0::CCR0;
#[doc = "Character Control Register 0"]
pub mod ccr0 {
    #[doc = "Register `CCR0` reader"]
    pub struct R(crate::R<CCR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CCR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CCR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CCR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CCR0` writer"]
    pub struct W(crate::W<CCR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CCR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CCR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CCR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `INTERNAL_CHARACTER_SET` reader - Character Selection for internal CGROM"]
    pub type INTERNAL_CHARACTER_SET_R = crate::FieldReader<INTERNAL_CHARACTER_SET_A>;
    #[doc = "Character Selection for internal CGROM\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum INTERNAL_CHARACTER_SET_A {
        #[doc = "0: ISO-8859-1"]
        ISO_8859_1 = 0,
        #[doc = "1: ISO-8859-2"]
        ISO_8859_2 = 1,
        #[doc = "2: ISO-8859-4"]
        ISO_8859_4 = 2,
        #[doc = "3: ISO-8859-5"]
        ISO_8859_5 = 3,
    }
    impl From<INTERNAL_CHARACTER_SET_A> for u8 {
        #[inline(always)]
        fn from(variant: INTERNAL_CHARACTER_SET_A) -> Self {
            variant as _
        }
    }
    impl INTERNAL_CHARACTER_SET_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> INTERNAL_CHARACTER_SET_A {
            match self.bits {
                0 => INTERNAL_CHARACTER_SET_A::ISO_8859_1,
                1 => INTERNAL_CHARACTER_SET_A::ISO_8859_2,
                2 => INTERNAL_CHARACTER_SET_A::ISO_8859_4,
                3 => INTERNAL_CHARACTER_SET_A::ISO_8859_5,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `ISO_8859_1`"]
        #[inline(always)]
        pub fn is_iso_8859_1(&self) -> bool {
            *self == INTERNAL_CHARACTER_SET_A::ISO_8859_1
        }
        #[doc = "Checks if the value of the field is `ISO_8859_2`"]
        #[inline(always)]
        pub fn is_iso_8859_2(&self) -> bool {
            *self == INTERNAL_CHARACTER_SET_A::ISO_8859_2
        }
        #[doc = "Checks if the value of the field is `ISO_8859_4`"]
        #[inline(always)]
        pub fn is_iso_8859_4(&self) -> bool {
            *self == INTERNAL_CHARACTER_SET_A::ISO_8859_4
        }
        #[doc = "Checks if the value of the field is `ISO_8859_5`"]
        #[inline(always)]
        pub fn is_iso_8859_5(&self) -> bool {
            *self == INTERNAL_CHARACTER_SET_A::ISO_8859_5
        }
    }
    #[doc = "Field `INTERNAL_CHARACTER_SET` writer - Character Selection for internal CGROM"]
    pub type INTERNAL_CHARACTER_SET_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, CCR0, u8, INTERNAL_CHARACTER_SET_A, 2, O>;
    impl<'a, const O: u8> INTERNAL_CHARACTER_SET_W<'a, O> {
        #[doc = "ISO-8859-1"]
        #[inline(always)]
        pub fn iso_8859_1(self) -> &'a mut W {
            self.variant(INTERNAL_CHARACTER_SET_A::ISO_8859_1)
        }
        #[doc = "ISO-8859-2"]
        #[inline(always)]
        pub fn iso_8859_2(self) -> &'a mut W {
            self.variant(INTERNAL_CHARACTER_SET_A::ISO_8859_2)
        }
        #[doc = "ISO-8859-4"]
        #[inline(always)]
        pub fn iso_8859_4(self) -> &'a mut W {
            self.variant(INTERNAL_CHARACTER_SET_A::ISO_8859_4)
        }
        #[doc = "ISO-8859-5"]
        #[inline(always)]
        pub fn iso_8859_5(self) -> &'a mut W {
            self.variant(INTERNAL_CHARACTER_SET_A::ISO_8859_5)
        }
    }
    #[doc = "Field `CHARACTER_HEIGHT` reader - Character Height Setting"]
    pub type CHARACTER_HEIGHT_R = crate::FieldReader<CHARACTER_HEIGHT_A>;
    #[doc = "Character Height Setting\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum CHARACTER_HEIGHT_A {
        #[doc = "0: 16 (ex. 8x16 / 16x16 / variable character width x 16)"]
        HEIGHT_16 = 0,
        #[doc = "1: 24 (ex. 12x24 / 24x24 / variable character width x 24)"]
        HEIGHT_24 = 1,
        #[doc = "2: 32 (ex. 16x32 / 32x32 / variable character width x 32)"]
        HEIGHT_32 = 2,
        #[doc = "3: NA"]
        NA4 = 3,
    }
    impl From<CHARACTER_HEIGHT_A> for u8 {
        #[inline(always)]
        fn from(variant: CHARACTER_HEIGHT_A) -> Self {
            variant as _
        }
    }
    impl CHARACTER_HEIGHT_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CHARACTER_HEIGHT_A {
            match self.bits {
                0 => CHARACTER_HEIGHT_A::HEIGHT_16,
                1 => CHARACTER_HEIGHT_A::HEIGHT_24,
                2 => CHARACTER_HEIGHT_A::HEIGHT_32,
                3 => CHARACTER_HEIGHT_A::NA4,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `HEIGHT_16`"]
        #[inline(always)]
        pub fn is_height_16(&self) -> bool {
            *self == CHARACTER_HEIGHT_A::HEIGHT_16
        }
        #[doc = "Checks if the value of the field is `HEIGHT_24`"]
        #[inline(always)]
        pub fn is_height_24(&self) -> bool {
            *self == CHARACTER_HEIGHT_A::HEIGHT_24
        }
        #[doc = "Checks if the value of the field is `HEIGHT_32`"]
        #[inline(always)]
        pub fn is_height_32(&self) -> bool {
            *self == CHARACTER_HEIGHT_A::HEIGHT_32
        }
        #[doc = "Checks if the value of the field is `NA4`"]
        #[inline(always)]
        pub fn is_na4(&self) -> bool {
            *self == CHARACTER_HEIGHT_A::NA4
        }
    }
    #[doc = "Field `CHARACTER_HEIGHT` writer - Character Height Setting"]
    pub type CHARACTER_HEIGHT_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, CCR0, u8, CHARACTER_HEIGHT_A, 2, O>;
    impl<'a, const O: u8> CHARACTER_HEIGHT_W<'a, O> {
        #[doc = "16 (ex. 8x16 / 16x16 / variable character width x 16)"]
        #[inline(always)]
        pub fn height_16(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_A::HEIGHT_16)
        }
        #[doc = "24 (ex. 12x24 / 24x24 / variable character width x 24)"]
        #[inline(always)]
        pub fn height_24(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_A::HEIGHT_24)
        }
        #[doc = "32 (ex. 16x32 / 32x32 / variable character width x 32)"]
        #[inline(always)]
        pub fn height_32(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_A::HEIGHT_32)
        }
        #[doc = "NA"]
        #[inline(always)]
        pub fn na4(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_A::NA4)
        }
    }
    #[doc = "Field `CHARACTER_SOURCE` reader - Character source selection"]
    pub type CHARACTER_SOURCE_R = crate::FieldReader<CHARACTER_SOURCE_A>;
    #[doc = "Character source selection\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum CHARACTER_SOURCE_A {
        #[doc = "0: Internal CGROM Character"]
        INTERNAL = 0,
        #[doc = "1: External CGROM Character (e.g. Genitop serial flash)"]
        EXTERNAL = 1,
        #[doc = "2: External CGROM Character (e.g. Genitop serial flash)"]
        USER_DEFINED = 2,
        #[doc = "3: NA"]
        NA4 = 3,
    }
    impl From<CHARACTER_SOURCE_A> for u8 {
        #[inline(always)]
        fn from(variant: CHARACTER_SOURCE_A) -> Self {
            variant as _
        }
    }
    impl CHARACTER_SOURCE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CHARACTER_SOURCE_A {
            match self.bits {
                0 => CHARACTER_SOURCE_A::INTERNAL,
                1 => CHARACTER_SOURCE_A::EXTERNAL,
                2 => CHARACTER_SOURCE_A::USER_DEFINED,
                3 => CHARACTER_SOURCE_A::NA4,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `INTERNAL`"]
        #[inline(always)]
        pub fn is_internal(&self) -> bool {
            *self == CHARACTER_SOURCE_A::INTERNAL
        }
        #[doc = "Checks if the value of the field is `EXTERNAL`"]
        #[inline(always)]
        pub fn is_external(&self) -> bool {
            *self == CHARACTER_SOURCE_A::EXTERNAL
        }
        #[doc = "Checks if the value of the field is `USER_DEFINED`"]
        #[inline(always)]
        pub fn is_user_defined(&self) -> bool {
            *self == CHARACTER_SOURCE_A::USER_DEFINED
        }
        #[doc = "Checks if the value of the field is `NA4`"]
        #[inline(always)]
        pub fn is_na4(&self) -> bool {
            *self == CHARACTER_SOURCE_A::NA4
        }
    }
    #[doc = "Field `CHARACTER_SOURCE` writer - Character source selection"]
    pub type CHARACTER_SOURCE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, CCR0, u8, CHARACTER_SOURCE_A, 2, O>;
    impl<'a, const O: u8> CHARACTER_SOURCE_W<'a, O> {
        #[doc = "Internal CGROM Character"]
        #[inline(always)]
        pub fn internal(self) -> &'a mut W {
            self.variant(CHARACTER_SOURCE_A::INTERNAL)
        }
        #[doc = "External CGROM Character (e.g. Genitop serial flash)"]
        #[inline(always)]
        pub fn external(self) -> &'a mut W {
            self.variant(CHARACTER_SOURCE_A::EXTERNAL)
        }
        #[doc = "External CGROM Character (e.g. Genitop serial flash)"]
        #[inline(always)]
        pub fn user_defined(self) -> &'a mut W {
            self.variant(CHARACTER_SOURCE_A::USER_DEFINED)
        }
        #[doc = "NA"]
        #[inline(always)]
        pub fn na4(self) -> &'a mut W {
            self.variant(CHARACTER_SOURCE_A::NA4)
        }
    }
    impl R {
        #[doc = "Bits 0:1 - Character Selection for internal CGROM"]
        #[inline(always)]
        pub fn internal_character_set(&self) -> INTERNAL_CHARACTER_SET_R {
            INTERNAL_CHARACTER_SET_R::new(self.bits & 3)
        }
        #[doc = "Bits 4:5 - Character Height Setting"]
        #[inline(always)]
        pub fn character_height(&self) -> CHARACTER_HEIGHT_R {
            CHARACTER_HEIGHT_R::new((self.bits >> 4) & 3)
        }
        #[doc = "Bits 6:7 - Character source selection"]
        #[inline(always)]
        pub fn character_source(&self) -> CHARACTER_SOURCE_R {
            CHARACTER_SOURCE_R::new((self.bits >> 6) & 3)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Character Selection for internal CGROM"]
        #[inline(always)]
        #[must_use]
        pub fn internal_character_set(&mut self) -> INTERNAL_CHARACTER_SET_W<0> {
            INTERNAL_CHARACTER_SET_W::new(self)
        }
        #[doc = "Bits 4:5 - Character Height Setting"]
        #[inline(always)]
        #[must_use]
        pub fn character_height(&mut self) -> CHARACTER_HEIGHT_W<4> {
            CHARACTER_HEIGHT_W::new(self)
        }
        #[doc = "Bits 6:7 - Character source selection"]
        #[inline(always)]
        #[must_use]
        pub fn character_source(&mut self) -> CHARACTER_SOURCE_W<6> {
            CHARACTER_SOURCE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Character Control Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr0](index.html) module"]
    pub struct CCR0;
    impl crate::RegisterSpec for CCR0 {
        const ADDRESS: u8 = 204u8;
    }
    #[doc = "`read()` method returns [ccr0::R](R) reader structure"]
    impl crate::Readable for CCR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ccr0::W](W) writer structure"]
    impl crate::Writable for CCR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CCR0 to value 0"]
    impl crate::Resettable for CCR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ccr1::CCR1;
#[doc = "Character Control Register 1"]
pub mod ccr1 {
    #[doc = "Register `CCR1` reader"]
    pub struct R(crate::R<CCR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CCR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CCR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CCR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CCR1` writer"]
    pub struct W(crate::W<CCR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CCR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CCR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CCR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CHARACTER_HEIGHT_SCALE` reader - Character height enlargement factor"]
    pub type CHARACTER_HEIGHT_SCALE_R = crate::FieldReader<CHARACTER_HEIGHT_SCALE_A>;
    #[doc = "Character height enlargement factor\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum CHARACTER_HEIGHT_SCALE_A {
        #[doc = "0: X1 scale"]
        X1 = 0,
        #[doc = "1: X2 scale"]
        X2 = 1,
        #[doc = "2: X3 scale"]
        X3 = 2,
        #[doc = "3: X4 scale"]
        X4 = 3,
    }
    impl From<CHARACTER_HEIGHT_SCALE_A> for u8 {
        #[inline(always)]
        fn from(variant: CHARACTER_HEIGHT_SCALE_A) -> Self {
            variant as _
        }
    }
    impl CHARACTER_HEIGHT_SCALE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CHARACTER_HEIGHT_SCALE_A {
            match self.bits {
                0 => CHARACTER_HEIGHT_SCALE_A::X1,
                1 => CHARACTER_HEIGHT_SCALE_A::X2,
                2 => CHARACTER_HEIGHT_SCALE_A::X3,
                3 => CHARACTER_HEIGHT_SCALE_A::X4,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `X1`"]
        #[inline(always)]
        pub fn is_x1(&self) -> bool {
            *self == CHARACTER_HEIGHT_SCALE_A::X1
        }
        #[doc = "Checks if the value of the field is `X2`"]
        #[inline(always)]
        pub fn is_x2(&self) -> bool {
            *self == CHARACTER_HEIGHT_SCALE_A::X2
        }
        #[doc = "Checks if the value of the field is `X3`"]
        #[inline(always)]
        pub fn is_x3(&self) -> bool {
            *self == CHARACTER_HEIGHT_SCALE_A::X3
        }
        #[doc = "Checks if the value of the field is `X4`"]
        #[inline(always)]
        pub fn is_x4(&self) -> bool {
            *self == CHARACTER_HEIGHT_SCALE_A::X4
        }
    }
    #[doc = "Field `CHARACTER_HEIGHT_SCALE` writer - Character height enlargement factor"]
    pub type CHARACTER_HEIGHT_SCALE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, CCR1, u8, CHARACTER_HEIGHT_SCALE_A, 2, O>;
    impl<'a, const O: u8> CHARACTER_HEIGHT_SCALE_W<'a, O> {
        #[doc = "X1 scale"]
        #[inline(always)]
        pub fn x1(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_SCALE_A::X1)
        }
        #[doc = "X2 scale"]
        #[inline(always)]
        pub fn x2(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_SCALE_A::X2)
        }
        #[doc = "X3 scale"]
        #[inline(always)]
        pub fn x3(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_SCALE_A::X3)
        }
        #[doc = "X4 scale"]
        #[inline(always)]
        pub fn x4(self) -> &'a mut W {
            self.variant(CHARACTER_HEIGHT_SCALE_A::X4)
        }
    }
    #[doc = "Field `CHARACTER_WIDTH_SCALE` reader - Character width enlargement factor"]
    pub type CHARACTER_WIDTH_SCALE_R = crate::FieldReader<CHARACTER_WIDTH_SCALE_A>;
    #[doc = "Character width enlargement factor\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum CHARACTER_WIDTH_SCALE_A {
        #[doc = "0: X1 scale"]
        X1 = 0,
        #[doc = "1: X2 scale"]
        X2 = 1,
        #[doc = "2: X3 scale"]
        X3 = 2,
        #[doc = "3: X4 scale"]
        X4 = 3,
    }
    impl From<CHARACTER_WIDTH_SCALE_A> for u8 {
        #[inline(always)]
        fn from(variant: CHARACTER_WIDTH_SCALE_A) -> Self {
            variant as _
        }
    }
    impl CHARACTER_WIDTH_SCALE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CHARACTER_WIDTH_SCALE_A {
            match self.bits {
                0 => CHARACTER_WIDTH_SCALE_A::X1,
                1 => CHARACTER_WIDTH_SCALE_A::X2,
                2 => CHARACTER_WIDTH_SCALE_A::X3,
                3 => CHARACTER_WIDTH_SCALE_A::X4,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `X1`"]
        #[inline(always)]
        pub fn is_x1(&self) -> bool {
            *self == CHARACTER_WIDTH_SCALE_A::X1
        }
        #[doc = "Checks if the value of the field is `X2`"]
        #[inline(always)]
        pub fn is_x2(&self) -> bool {
            *self == CHARACTER_WIDTH_SCALE_A::X2
        }
        #[doc = "Checks if the value of the field is `X3`"]
        #[inline(always)]
        pub fn is_x3(&self) -> bool {
            *self == CHARACTER_WIDTH_SCALE_A::X3
        }
        #[doc = "Checks if the value of the field is `X4`"]
        #[inline(always)]
        pub fn is_x4(&self) -> bool {
            *self == CHARACTER_WIDTH_SCALE_A::X4
        }
    }
    #[doc = "Field `CHARACTER_WIDTH_SCALE` writer - Character width enlargement factor"]
    pub type CHARACTER_WIDTH_SCALE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, CCR1, u8, CHARACTER_WIDTH_SCALE_A, 2, O>;
    impl<'a, const O: u8> CHARACTER_WIDTH_SCALE_W<'a, O> {
        #[doc = "X1 scale"]
        #[inline(always)]
        pub fn x1(self) -> &'a mut W {
            self.variant(CHARACTER_WIDTH_SCALE_A::X1)
        }
        #[doc = "X2 scale"]
        #[inline(always)]
        pub fn x2(self) -> &'a mut W {
            self.variant(CHARACTER_WIDTH_SCALE_A::X2)
        }
        #[doc = "X3 scale"]
        #[inline(always)]
        pub fn x3(self) -> &'a mut W {
            self.variant(CHARACTER_WIDTH_SCALE_A::X3)
        }
        #[doc = "X4 scale"]
        #[inline(always)]
        pub fn x4(self) -> &'a mut W {
            self.variant(CHARACTER_WIDTH_SCALE_A::X4)
        }
    }
    #[doc = "Field `CHARACTER_ROTATION` reader - Character Rotation"]
    pub type CHARACTER_ROTATION_R = crate::BitReader<CHARACTER_ROTATION_A>;
    #[doc = "Character Rotation\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum CHARACTER_ROTATION_A {
        #[doc = "0: Text direction from left to right then from top to bottom"]
        NORMAL = 0,
        #[doc = "1: Top→Bottom then Left→Right (Rotate right 90° and horizontal flip)"]
        TOP_BOTTOM_LEFT_RIGHT = 1,
    }
    impl From<CHARACTER_ROTATION_A> for bool {
        #[inline(always)]
        fn from(variant: CHARACTER_ROTATION_A) -> Self {
            variant as u8 != 0
        }
    }
    impl CHARACTER_ROTATION_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> CHARACTER_ROTATION_A {
            match self.bits {
                false => CHARACTER_ROTATION_A::NORMAL,
                true => CHARACTER_ROTATION_A::TOP_BOTTOM_LEFT_RIGHT,
            }
        }
        #[doc = "Checks if the value of the field is `NORMAL`"]
        #[inline(always)]
        pub fn is_normal(&self) -> bool {
            *self == CHARACTER_ROTATION_A::NORMAL
        }
        #[doc = "Checks if the value of the field is `TOP_BOTTOM_LEFT_RIGHT`"]
        #[inline(always)]
        pub fn is_top_bottom_left_right(&self) -> bool {
            *self == CHARACTER_ROTATION_A::TOP_BOTTOM_LEFT_RIGHT
        }
    }
    #[doc = "Field `CHARACTER_ROTATION` writer - Character Rotation"]
    pub type CHARACTER_ROTATION_W<'a, const O: u8> =
        crate::BitWriter<'a, CCR1, CHARACTER_ROTATION_A, O>;
    impl<'a, const O: u8> CHARACTER_ROTATION_W<'a, O> {
        #[doc = "Text direction from left to right then from top to bottom"]
        #[inline(always)]
        pub fn normal(self) -> &'a mut W {
            self.variant(CHARACTER_ROTATION_A::NORMAL)
        }
        #[doc = "Top→Bottom then Left→Right (Rotate right 90° and horizontal flip)"]
        #[inline(always)]
        pub fn top_bottom_left_right(self) -> &'a mut W {
            self.variant(CHARACTER_ROTATION_A::TOP_BOTTOM_LEFT_RIGHT)
        }
    }
    #[doc = "Field `CHROMA_KEY_ENABLE` reader - Chroma keying enable on Text input"]
    pub type CHROMA_KEY_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `CHROMA_KEY_ENABLE` writer - Chroma keying enable on Text input"]
    pub type CHROMA_KEY_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, CCR1, bool, O>;
    #[doc = "Field `FULL_ALIGNMENT_ENABLE` reader - Full Alignment Selection Bit"]
    pub type FULL_ALIGNMENT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `FULL_ALIGNMENT_ENABLE` writer - Full Alignment Selection Bit"]
    pub type FULL_ALIGNMENT_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, CCR1, bool, O>;
    impl R {
        #[doc = "Bits 0:1 - Character height enlargement factor"]
        #[inline(always)]
        pub fn character_height_scale(&self) -> CHARACTER_HEIGHT_SCALE_R {
            CHARACTER_HEIGHT_SCALE_R::new(self.bits & 3)
        }
        #[doc = "Bits 2:3 - Character width enlargement factor"]
        #[inline(always)]
        pub fn character_width_scale(&self) -> CHARACTER_WIDTH_SCALE_R {
            CHARACTER_WIDTH_SCALE_R::new((self.bits >> 2) & 3)
        }
        #[doc = "Bit 4 - Character Rotation"]
        #[inline(always)]
        pub fn character_rotation(&self) -> CHARACTER_ROTATION_R {
            CHARACTER_ROTATION_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 6 - Chroma keying enable on Text input"]
        #[inline(always)]
        pub fn chroma_key_enable(&self) -> CHROMA_KEY_ENABLE_R {
            CHROMA_KEY_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Full Alignment Selection Bit"]
        #[inline(always)]
        pub fn full_alignment_enable(&self) -> FULL_ALIGNMENT_ENABLE_R {
            FULL_ALIGNMENT_ENABLE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Character height enlargement factor"]
        #[inline(always)]
        #[must_use]
        pub fn character_height_scale(&mut self) -> CHARACTER_HEIGHT_SCALE_W<0> {
            CHARACTER_HEIGHT_SCALE_W::new(self)
        }
        #[doc = "Bits 2:3 - Character width enlargement factor"]
        #[inline(always)]
        #[must_use]
        pub fn character_width_scale(&mut self) -> CHARACTER_WIDTH_SCALE_W<2> {
            CHARACTER_WIDTH_SCALE_W::new(self)
        }
        #[doc = "Bit 4 - Character Rotation"]
        #[inline(always)]
        #[must_use]
        pub fn character_rotation(&mut self) -> CHARACTER_ROTATION_W<4> {
            CHARACTER_ROTATION_W::new(self)
        }
        #[doc = "Bit 6 - Chroma keying enable on Text input"]
        #[inline(always)]
        #[must_use]
        pub fn chroma_key_enable(&mut self) -> CHROMA_KEY_ENABLE_W<6> {
            CHROMA_KEY_ENABLE_W::new(self)
        }
        #[doc = "Bit 7 - Full Alignment Selection Bit"]
        #[inline(always)]
        #[must_use]
        pub fn full_alignment_enable(&mut self) -> FULL_ALIGNMENT_ENABLE_W<7> {
            FULL_ALIGNMENT_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Character Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](index.html) module"]
    pub struct CCR1;
    impl crate::RegisterSpec for CCR1 {
        const ADDRESS: u8 = 205u8;
    }
    #[doc = "`read()` method returns [ccr1::R](R) reader structure"]
    impl crate::Readable for CCR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ccr1::W](W) writer structure"]
    impl crate::Writable for CCR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CCR1 to value 0"]
    impl crate::Resettable for CCR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gtfnt_sel::GTFNT_SEL;
#[doc = "GT Character ROM Select"]
pub mod gtfnt_sel {
    #[doc = "Register `GTFNT_SEL` reader"]
    pub struct R(crate::R<GTFNT_SEL>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GTFNT_SEL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GTFNT_SEL>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GTFNT_SEL>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GTFNT_SEL` writer"]
    pub struct W(crate::W<GTFNT_SEL>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GTFNT_SEL>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GTFNT_SEL>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GTFNT_SEL>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GT_SERIAL_CHARACTER_ROM` reader - GT Serial Character ROM Select"]
    pub type GT_SERIAL_CHARACTER_ROM_R = crate::FieldReader<GT_SERIAL_CHARACTER_ROM_A>;
    #[doc = "GT Serial Character ROM Select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum GT_SERIAL_CHARACTER_ROM_A {
        #[doc = "0: GT21L16T1W"]
        GT21L16T1W = 0,
        #[doc = "1: GT30L16U2W"]
        GT30L16U2W = 1,
        #[doc = "2: GT30L24T3Y"]
        GT30L24T3Y = 2,
        #[doc = "3: GT30L24M1Z"]
        GT30L24M1Z = 3,
        #[doc = "4: GT30L32S4W"]
        GT30L32S4W = 4,
        #[doc = "5: GT20L24F6Y"]
        GT20L24F6Y = 5,
        #[doc = "6: GT21L24S1W"]
        GT21L24S1W = 6,
        #[doc = "7: NA"]
        NA7 = 7,
    }
    impl From<GT_SERIAL_CHARACTER_ROM_A> for u8 {
        #[inline(always)]
        fn from(variant: GT_SERIAL_CHARACTER_ROM_A) -> Self {
            variant as _
        }
    }
    impl GT_SERIAL_CHARACTER_ROM_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> GT_SERIAL_CHARACTER_ROM_A {
            match self.bits {
                0 => GT_SERIAL_CHARACTER_ROM_A::GT21L16T1W,
                1 => GT_SERIAL_CHARACTER_ROM_A::GT30L16U2W,
                2 => GT_SERIAL_CHARACTER_ROM_A::GT30L24T3Y,
                3 => GT_SERIAL_CHARACTER_ROM_A::GT30L24M1Z,
                4 => GT_SERIAL_CHARACTER_ROM_A::GT30L32S4W,
                5 => GT_SERIAL_CHARACTER_ROM_A::GT20L24F6Y,
                6 => GT_SERIAL_CHARACTER_ROM_A::GT21L24S1W,
                7 => GT_SERIAL_CHARACTER_ROM_A::NA7,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `GT21L16T1W`"]
        #[inline(always)]
        pub fn is_gt21l16t1w(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::GT21L16T1W
        }
        #[doc = "Checks if the value of the field is `GT30L16U2W`"]
        #[inline(always)]
        pub fn is_gt30l16u2w(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::GT30L16U2W
        }
        #[doc = "Checks if the value of the field is `GT30L24T3Y`"]
        #[inline(always)]
        pub fn is_gt30l24t3y(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::GT30L24T3Y
        }
        #[doc = "Checks if the value of the field is `GT30L24M1Z`"]
        #[inline(always)]
        pub fn is_gt30l24m1z(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::GT30L24M1Z
        }
        #[doc = "Checks if the value of the field is `GT30L32S4W`"]
        #[inline(always)]
        pub fn is_gt30l32s4w(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::GT30L32S4W
        }
        #[doc = "Checks if the value of the field is `GT20L24F6Y`"]
        #[inline(always)]
        pub fn is_gt20l24f6y(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::GT20L24F6Y
        }
        #[doc = "Checks if the value of the field is `GT21L24S1W`"]
        #[inline(always)]
        pub fn is_gt21l24s1w(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::GT21L24S1W
        }
        #[doc = "Checks if the value of the field is `NA7`"]
        #[inline(always)]
        pub fn is_na7(&self) -> bool {
            *self == GT_SERIAL_CHARACTER_ROM_A::NA7
        }
    }
    #[doc = "Field `GT_SERIAL_CHARACTER_ROM` writer - GT Serial Character ROM Select"]
    pub type GT_SERIAL_CHARACTER_ROM_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, GTFNT_SEL, u8, GT_SERIAL_CHARACTER_ROM_A, 3, O>;
    impl<'a, const O: u8> GT_SERIAL_CHARACTER_ROM_W<'a, O> {
        #[doc = "GT21L16T1W"]
        #[inline(always)]
        pub fn gt21l16t1w(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::GT21L16T1W)
        }
        #[doc = "GT30L16U2W"]
        #[inline(always)]
        pub fn gt30l16u2w(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::GT30L16U2W)
        }
        #[doc = "GT30L24T3Y"]
        #[inline(always)]
        pub fn gt30l24t3y(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::GT30L24T3Y)
        }
        #[doc = "GT30L24M1Z"]
        #[inline(always)]
        pub fn gt30l24m1z(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::GT30L24M1Z)
        }
        #[doc = "GT30L32S4W"]
        #[inline(always)]
        pub fn gt30l32s4w(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::GT30L32S4W)
        }
        #[doc = "GT20L24F6Y"]
        #[inline(always)]
        pub fn gt20l24f6y(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::GT20L24F6Y)
        }
        #[doc = "GT21L24S1W"]
        #[inline(always)]
        pub fn gt21l24s1w(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::GT21L24S1W)
        }
        #[doc = "NA"]
        #[inline(always)]
        pub fn na7(self) -> &'a mut W {
            self.variant(GT_SERIAL_CHARACTER_ROM_A::NA7)
        }
    }
    impl R {
        #[doc = "Bits 5:7 - GT Serial Character ROM Select"]
        #[inline(always)]
        pub fn gt_serial_character_rom(&self) -> GT_SERIAL_CHARACTER_ROM_R {
            GT_SERIAL_CHARACTER_ROM_R::new((self.bits >> 5) & 7)
        }
    }
    impl W {
        #[doc = "Bits 5:7 - GT Serial Character ROM Select"]
        #[inline(always)]
        #[must_use]
        pub fn gt_serial_character_rom(&mut self) -> GT_SERIAL_CHARACTER_ROM_W<5> {
            GT_SERIAL_CHARACTER_ROM_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GT Character ROM Select\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gtfnt_sel](index.html) module"]
    pub struct GTFNT_SEL;
    impl crate::RegisterSpec for GTFNT_SEL {
        const ADDRESS: u8 = 206u8;
    }
    #[doc = "`read()` method returns [gtfnt_sel::R](R) reader structure"]
    impl crate::Readable for GTFNT_SEL {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gtfnt_sel::W](W) writer structure"]
    impl crate::Writable for GTFNT_SEL {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GTFNT_SEL to value 0"]
    impl crate::Resettable for GTFNT_SEL {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gtfnt_cr::GTFNT_CR;
#[doc = "GT Character ROM Control register"]
pub mod gtfnt_cr {
    #[doc = "Register `GTFNT_CR` reader"]
    pub struct R(crate::R<GTFNT_CR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GTFNT_CR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GTFNT_CR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GTFNT_CR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GTFNT_CR` writer"]
    pub struct W(crate::W<GTFNT_CR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GTFNT_CR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GTFNT_CR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GTFNT_CR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `GT_CHARACTER_WIDTH` reader - GT Character width setting"]
    pub type GT_CHARACTER_WIDTH_R = crate::FieldReader<u8>;
    #[doc = "Field `GT_CHARACTER_WIDTH` writer - GT Character width setting"]
    pub type GT_CHARACTER_WIDTH_W<'a, const O: u8> = crate::FieldWriter<'a, GTFNT_CR, u8, u8, 2, O>;
    #[doc = "Field `GT_CHARACTER_SET` reader - Character set"]
    pub type GT_CHARACTER_SET_R = crate::FieldReader<u8>;
    #[doc = "Field `GT_CHARACTER_SET` writer - Character set"]
    pub type GT_CHARACTER_SET_W<'a, const O: u8> = crate::FieldWriter<'a, GTFNT_CR, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:1 - GT Character width setting"]
        #[inline(always)]
        pub fn gt_character_width(&self) -> GT_CHARACTER_WIDTH_R {
            GT_CHARACTER_WIDTH_R::new(self.bits & 3)
        }
        #[doc = "Bits 3:7 - Character set"]
        #[inline(always)]
        pub fn gt_character_set(&self) -> GT_CHARACTER_SET_R {
            GT_CHARACTER_SET_R::new((self.bits >> 3) & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - GT Character width setting"]
        #[inline(always)]
        #[must_use]
        pub fn gt_character_width(&mut self) -> GT_CHARACTER_WIDTH_W<0> {
            GT_CHARACTER_WIDTH_W::new(self)
        }
        #[doc = "Bits 3:7 - Character set"]
        #[inline(always)]
        #[must_use]
        pub fn gt_character_set(&mut self) -> GT_CHARACTER_SET_W<3> {
            GT_CHARACTER_SET_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GT Character ROM Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gtfnt_cr](index.html) module"]
    pub struct GTFNT_CR;
    impl crate::RegisterSpec for GTFNT_CR {
        const ADDRESS: u8 = 207u8;
    }
    #[doc = "`read()` method returns [gtfnt_cr::R](R) reader structure"]
    impl crate::Readable for GTFNT_CR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gtfnt_cr::W](W) writer structure"]
    impl crate::Writable for GTFNT_CR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GTFNT_CR to value 0"]
    impl crate::Resettable for GTFNT_CR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use fldr::FLDR;
#[doc = "Character Line gap Setting Register"]
pub mod fldr {
    #[doc = "Register `FLDR` reader"]
    pub struct R(crate::R<FLDR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<FLDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<FLDR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<FLDR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `FLDR` writer"]
    pub struct W(crate::W<FLDR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<FLDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<FLDR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<FLDR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CHARACTER_LINE_GAP` reader - Character Line gap Setting"]
    pub type CHARACTER_LINE_GAP_R = crate::FieldReader<u8>;
    #[doc = "Field `CHARACTER_LINE_GAP` writer - Character Line gap Setting"]
    pub type CHARACTER_LINE_GAP_W<'a, const O: u8> = crate::FieldWriter<'a, FLDR, u8, u8, 5, O>;
    impl R {
        #[doc = "Bits 0:4 - Character Line gap Setting"]
        #[inline(always)]
        pub fn character_line_gap(&self) -> CHARACTER_LINE_GAP_R {
            CHARACTER_LINE_GAP_R::new(self.bits & 0x1f)
        }
    }
    impl W {
        #[doc = "Bits 0:4 - Character Line gap Setting"]
        #[inline(always)]
        #[must_use]
        pub fn character_line_gap(&mut self) -> CHARACTER_LINE_GAP_W<0> {
            CHARACTER_LINE_GAP_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Character Line gap Setting Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fldr](index.html) module"]
    pub struct FLDR;
    impl crate::RegisterSpec for FLDR {
        const ADDRESS: u8 = 208u8;
    }
    #[doc = "`read()` method returns [fldr::R](R) reader structure"]
    impl crate::Readable for FLDR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [fldr::W](W) writer structure"]
    impl crate::Writable for FLDR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets FLDR to value 0"]
    impl crate::Resettable for FLDR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use f2fssr::F2FSSR;
#[doc = "Character to Character Space Setting Register"]
pub mod f2fssr {
    #[doc = "Register `F2FSSR` reader"]
    pub struct R(crate::R<F2FSSR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<F2FSSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<F2FSSR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<F2FSSR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `F2FSSR` writer"]
    pub struct W(crate::W<F2FSSR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<F2FSSR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<F2FSSR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<F2FSSR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CHARACTER_TO_CHARACTER_SPACING` reader - Character to Character Space Setting"]
    pub type CHARACTER_TO_CHARACTER_SPACING_R = crate::FieldReader<u8>;
    #[doc = "Field `CHARACTER_TO_CHARACTER_SPACING` writer - Character to Character Space Setting"]
    pub type CHARACTER_TO_CHARACTER_SPACING_W<'a, const O: u8> =
        crate::FieldWriter<'a, F2FSSR, u8, u8, 6, O>;
    impl R {
        #[doc = "Bits 0:5 - Character to Character Space Setting"]
        #[inline(always)]
        pub fn character_to_character_spacing(&self) -> CHARACTER_TO_CHARACTER_SPACING_R {
            CHARACTER_TO_CHARACTER_SPACING_R::new(self.bits & 0x3f)
        }
    }
    impl W {
        #[doc = "Bits 0:5 - Character to Character Space Setting"]
        #[inline(always)]
        #[must_use]
        pub fn character_to_character_spacing(&mut self) -> CHARACTER_TO_CHARACTER_SPACING_W<0> {
            CHARACTER_TO_CHARACTER_SPACING_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Character to Character Space Setting Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [f2fssr](index.html) module"]
    pub struct F2FSSR;
    impl crate::RegisterSpec for F2FSSR {
        const ADDRESS: u8 = 209u8;
    }
    #[doc = "`read()` method returns [f2fssr::R](R) reader structure"]
    impl crate::Readable for F2FSSR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [f2fssr::W](W) writer structure"]
    impl crate::Writable for F2FSSR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets F2FSSR to value 0"]
    impl crate::Resettable for F2FSSR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bgcr::BGCR;
#[doc = "Background Color Register - Red"]
pub mod bgcr {
    #[doc = "Register `BGCR` reader"]
    pub struct R(crate::R<BGCR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BGCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BGCR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BGCR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BGCR` writer"]
    pub struct W(crate::W<BGCR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BGCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BGCR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BGCR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BACKGROUND_COLOR_RED` reader - Background Color Red Component"]
    pub type BACKGROUND_COLOR_RED_R = crate::FieldReader<u8>;
    #[doc = "Field `BACKGROUND_COLOR_RED` writer - Background Color Red Component"]
    pub type BACKGROUND_COLOR_RED_W<'a, const O: u8> = crate::FieldWriter<'a, BGCR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Background Color Red Component"]
        #[inline(always)]
        pub fn background_color_red(&self) -> BACKGROUND_COLOR_RED_R {
            BACKGROUND_COLOR_RED_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Background Color Red Component"]
        #[inline(always)]
        #[must_use]
        pub fn background_color_red(&mut self) -> BACKGROUND_COLOR_RED_W<0> {
            BACKGROUND_COLOR_RED_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Background Color Register - Red\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bgcr](index.html) module"]
    pub struct BGCR;
    impl crate::RegisterSpec for BGCR {
        const ADDRESS: u8 = 213u8;
    }
    #[doc = "`read()` method returns [bgcr::R](R) reader structure"]
    impl crate::Readable for BGCR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bgcr::W](W) writer structure"]
    impl crate::Writable for BGCR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BGCR to value 0"]
    impl crate::Resettable for BGCR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bgcg::BGCG;
#[doc = "Background Color Register - Green"]
pub mod bgcg {
    #[doc = "Register `BGCG` reader"]
    pub struct R(crate::R<BGCG>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BGCG>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BGCG>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BGCG>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BGCG` writer"]
    pub struct W(crate::W<BGCG>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BGCG>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BGCG>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BGCG>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BACKGROUND_COLOR_GREEN` reader - Background Color Green Component"]
    pub type BACKGROUND_COLOR_GREEN_R = crate::FieldReader<u8>;
    #[doc = "Field `BACKGROUND_COLOR_GREEN` writer - Background Color Green Component"]
    pub type BACKGROUND_COLOR_GREEN_W<'a, const O: u8> = crate::FieldWriter<'a, BGCG, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Background Color Green Component"]
        #[inline(always)]
        pub fn background_color_green(&self) -> BACKGROUND_COLOR_GREEN_R {
            BACKGROUND_COLOR_GREEN_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Background Color Green Component"]
        #[inline(always)]
        #[must_use]
        pub fn background_color_green(&mut self) -> BACKGROUND_COLOR_GREEN_W<0> {
            BACKGROUND_COLOR_GREEN_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Background Color Register - Green\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bgcg](index.html) module"]
    pub struct BGCG;
    impl crate::RegisterSpec for BGCG {
        const ADDRESS: u8 = 214u8;
    }
    #[doc = "`read()` method returns [bgcg::R](R) reader structure"]
    impl crate::Readable for BGCG {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bgcg::W](W) writer structure"]
    impl crate::Writable for BGCG {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BGCG to value 0"]
    impl crate::Resettable for BGCG {
        const RESET_VALUE: u8 = 0;
    }
}
pub use bgcb::BGCB;
#[doc = "Background Color Register - Blue"]
pub mod bgcb {
    #[doc = "Register `BGCB` reader"]
    pub struct R(crate::R<BGCB>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<BGCB>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<BGCB>> for R {
        #[inline(always)]
        fn from(reader: crate::R<BGCB>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `BGCB` writer"]
    pub struct W(crate::W<BGCB>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<BGCB>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<BGCB>> for W {
        #[inline(always)]
        fn from(writer: crate::W<BGCB>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `BACKGROUND_COLOR_BLUE` reader - Background Color Blue Component"]
    pub type BACKGROUND_COLOR_BLUE_R = crate::FieldReader<u8>;
    #[doc = "Field `BACKGROUND_COLOR_BLUE` writer - Background Color Blue Component"]
    pub type BACKGROUND_COLOR_BLUE_W<'a, const O: u8> = crate::FieldWriter<'a, BGCB, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Background Color Blue Component"]
        #[inline(always)]
        pub fn background_color_blue(&self) -> BACKGROUND_COLOR_BLUE_R {
            BACKGROUND_COLOR_BLUE_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Background Color Blue Component"]
        #[inline(always)]
        #[must_use]
        pub fn background_color_blue(&mut self) -> BACKGROUND_COLOR_BLUE_W<0> {
            BACKGROUND_COLOR_BLUE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Background Color Register - Blue\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bgcb](index.html) module"]
    pub struct BGCB;
    impl crate::RegisterSpec for BGCB {
        const ADDRESS: u8 = 215u8;
    }
    #[doc = "`read()` method returns [bgcb::R](R) reader structure"]
    impl crate::Readable for BGCB {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [bgcb::W](W) writer structure"]
    impl crate::Writable for BGCB {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets BGCB to value 0"]
    impl crate::Resettable for BGCB {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cgram_str0::CGRAM_STR0;
#[doc = "CGRAM Start Address 0"]
pub mod cgram_str0 {
    #[doc = "Register `CGRAM_STR0` reader"]
    pub struct R(crate::R<CGRAM_STR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CGRAM_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CGRAM_STR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CGRAM_STR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CGRAM_STR0` writer"]
    pub struct W(crate::W<CGRAM_STR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CGRAM_STR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CGRAM_STR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CGRAM_STR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CGRAM_START_ADDRESS` reader - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CGRAM_START_ADDRESS` writer - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CGRAM_STR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        pub fn cgram_start_address(&self) -> CGRAM_START_ADDRESS_R {
            CGRAM_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn cgram_start_address(&mut self) -> CGRAM_START_ADDRESS_W<0> {
            CGRAM_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "CGRAM Start Address 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cgram_str0](index.html) module"]
    pub struct CGRAM_STR0;
    impl crate::RegisterSpec for CGRAM_STR0 {
        const ADDRESS: u8 = 219u8;
    }
    #[doc = "`read()` method returns [cgram_str0::R](R) reader structure"]
    impl crate::Readable for CGRAM_STR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cgram_str0::W](W) writer structure"]
    impl crate::Writable for CGRAM_STR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CGRAM_STR0 to value 0"]
    impl crate::Resettable for CGRAM_STR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cgram_str1::CGRAM_STR1;
#[doc = "CGRAM Start Address 1"]
pub mod cgram_str1 {
    #[doc = "Register `CGRAM_STR1` reader"]
    pub struct R(crate::R<CGRAM_STR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CGRAM_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CGRAM_STR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CGRAM_STR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CGRAM_STR1` writer"]
    pub struct W(crate::W<CGRAM_STR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CGRAM_STR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CGRAM_STR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CGRAM_STR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CGRAM_START_ADDRESS` reader - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CGRAM_START_ADDRESS` writer - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CGRAM_STR1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        pub fn cgram_start_address(&self) -> CGRAM_START_ADDRESS_R {
            CGRAM_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn cgram_start_address(&mut self) -> CGRAM_START_ADDRESS_W<0> {
            CGRAM_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "CGRAM Start Address 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cgram_str1](index.html) module"]
    pub struct CGRAM_STR1;
    impl crate::RegisterSpec for CGRAM_STR1 {
        const ADDRESS: u8 = 220u8;
    }
    #[doc = "`read()` method returns [cgram_str1::R](R) reader structure"]
    impl crate::Readable for CGRAM_STR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cgram_str1::W](W) writer structure"]
    impl crate::Writable for CGRAM_STR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CGRAM_STR1 to value 0"]
    impl crate::Resettable for CGRAM_STR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cgram_str2::CGRAM_STR2;
#[doc = "CGRAM Start Address 2"]
pub mod cgram_str2 {
    #[doc = "Register `CGRAM_STR2` reader"]
    pub struct R(crate::R<CGRAM_STR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CGRAM_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CGRAM_STR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CGRAM_STR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CGRAM_STR2` writer"]
    pub struct W(crate::W<CGRAM_STR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CGRAM_STR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CGRAM_STR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CGRAM_STR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CGRAM_START_ADDRESS` reader - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CGRAM_START_ADDRESS` writer - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CGRAM_STR2, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        pub fn cgram_start_address(&self) -> CGRAM_START_ADDRESS_R {
            CGRAM_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn cgram_start_address(&mut self) -> CGRAM_START_ADDRESS_W<0> {
            CGRAM_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "CGRAM Start Address 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cgram_str2](index.html) module"]
    pub struct CGRAM_STR2;
    impl crate::RegisterSpec for CGRAM_STR2 {
        const ADDRESS: u8 = 221u8;
    }
    #[doc = "`read()` method returns [cgram_str2::R](R) reader structure"]
    impl crate::Readable for CGRAM_STR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cgram_str2::W](W) writer structure"]
    impl crate::Writable for CGRAM_STR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CGRAM_STR2 to value 0"]
    impl crate::Resettable for CGRAM_STR2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use cgram_str3::CGRAM_STR3;
#[doc = "CGRAM Start Address 3"]
pub mod cgram_str3 {
    #[doc = "Register `CGRAM_STR3` reader"]
    pub struct R(crate::R<CGRAM_STR3>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<CGRAM_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<CGRAM_STR3>> for R {
        #[inline(always)]
        fn from(reader: crate::R<CGRAM_STR3>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `CGRAM_STR3` writer"]
    pub struct W(crate::W<CGRAM_STR3>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<CGRAM_STR3>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<CGRAM_STR3>> for W {
        #[inline(always)]
        fn from(writer: crate::W<CGRAM_STR3>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `CGRAM_START_ADDRESS` reader - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_R = crate::FieldReader<u8>;
    #[doc = "Field `CGRAM_START_ADDRESS` writer - CGRAM START ADDRESS"]
    pub type CGRAM_START_ADDRESS_W<'a, const O: u8> =
        crate::FieldWriter<'a, CGRAM_STR3, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        pub fn cgram_start_address(&self) -> CGRAM_START_ADDRESS_R {
            CGRAM_START_ADDRESS_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - CGRAM START ADDRESS"]
        #[inline(always)]
        #[must_use]
        pub fn cgram_start_address(&mut self) -> CGRAM_START_ADDRESS_W<0> {
            CGRAM_START_ADDRESS_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "CGRAM Start Address 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cgram_str3](index.html) module"]
    pub struct CGRAM_STR3;
    impl crate::RegisterSpec for CGRAM_STR3 {
        const ADDRESS: u8 = 221u8;
    }
    #[doc = "`read()` method returns [cgram_str3::R](R) reader structure"]
    impl crate::Readable for CGRAM_STR3 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [cgram_str3::W](W) writer structure"]
    impl crate::Writable for CGRAM_STR3 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets CGRAM_STR3 to value 0"]
    impl crate::Resettable for CGRAM_STR3 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use pmu::PMU;
#[doc = "Power Management register"]
pub mod pmu {
    #[doc = "Register `PMU` reader"]
    pub struct R(crate::R<PMU>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<PMU>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<PMU>> for R {
        #[inline(always)]
        fn from(reader: crate::R<PMU>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `PMU` writer"]
    pub struct W(crate::W<PMU>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<PMU>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<PMU>> for W {
        #[inline(always)]
        fn from(writer: crate::W<PMU>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `POWER_SAVING_MODE` reader - Power saving Mode"]
    pub type POWER_SAVING_MODE_R = crate::FieldReader<POWER_SAVING_MODE_A>;
    #[doc = "Power saving Mode\n\nValue on reset: 3"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    #[repr(u8)]
    pub enum POWER_SAVING_MODE_A {
        #[doc = "0: NA"]
        NA = 0,
        #[doc = "1: CCLK &amp; PCLK will stop, MCLK keep MPLL clock"]
        STANDBY = 1,
        #[doc = "2: CCLK &amp; PCLK will stop, MCLK switch to OSC clock"]
        SUSPEND = 2,
        #[doc = "3: All clock &amp; PLL will stop"]
        SLEEP = 3,
    }
    impl From<POWER_SAVING_MODE_A> for u8 {
        #[inline(always)]
        fn from(variant: POWER_SAVING_MODE_A) -> Self {
            variant as _
        }
    }
    impl POWER_SAVING_MODE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> POWER_SAVING_MODE_A {
            match self.bits {
                0 => POWER_SAVING_MODE_A::NA,
                1 => POWER_SAVING_MODE_A::STANDBY,
                2 => POWER_SAVING_MODE_A::SUSPEND,
                3 => POWER_SAVING_MODE_A::SLEEP,
                _ => unreachable!(),
            }
        }
        #[doc = "Checks if the value of the field is `NA`"]
        #[inline(always)]
        pub fn is_na(&self) -> bool {
            *self == POWER_SAVING_MODE_A::NA
        }
        #[doc = "Checks if the value of the field is `STANDBY`"]
        #[inline(always)]
        pub fn is_standby(&self) -> bool {
            *self == POWER_SAVING_MODE_A::STANDBY
        }
        #[doc = "Checks if the value of the field is `SUSPEND`"]
        #[inline(always)]
        pub fn is_suspend(&self) -> bool {
            *self == POWER_SAVING_MODE_A::SUSPEND
        }
        #[doc = "Checks if the value of the field is `SLEEP`"]
        #[inline(always)]
        pub fn is_sleep(&self) -> bool {
            *self == POWER_SAVING_MODE_A::SLEEP
        }
    }
    #[doc = "Field `POWER_SAVING_MODE` writer - Power saving Mode"]
    pub type POWER_SAVING_MODE_W<'a, const O: u8> =
        crate::FieldWriterSafe<'a, PMU, u8, POWER_SAVING_MODE_A, 2, O>;
    impl<'a, const O: u8> POWER_SAVING_MODE_W<'a, O> {
        #[doc = "NA"]
        #[inline(always)]
        pub fn na(self) -> &'a mut W {
            self.variant(POWER_SAVING_MODE_A::NA)
        }
        #[doc = "CCLK &amp; PCLK will stop, MCLK keep MPLL clock"]
        #[inline(always)]
        pub fn standby(self) -> &'a mut W {
            self.variant(POWER_SAVING_MODE_A::STANDBY)
        }
        #[doc = "CCLK &amp; PCLK will stop, MCLK switch to OSC clock"]
        #[inline(always)]
        pub fn suspend(self) -> &'a mut W {
            self.variant(POWER_SAVING_MODE_A::SUSPEND)
        }
        #[doc = "All clock &amp; PLL will stop"]
        #[inline(always)]
        pub fn sleep(self) -> &'a mut W {
            self.variant(POWER_SAVING_MODE_A::SLEEP)
        }
    }
    #[doc = "Field `POWER_SAVING_ENABLE` reader - Enter Power saving state"]
    pub type POWER_SAVING_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `POWER_SAVING_ENABLE` writer - Enter Power saving state"]
    pub type POWER_SAVING_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, PMU, bool, O>;
    impl R {
        #[doc = "Bits 0:1 - Power saving Mode"]
        #[inline(always)]
        pub fn power_saving_mode(&self) -> POWER_SAVING_MODE_R {
            POWER_SAVING_MODE_R::new(self.bits & 3)
        }
        #[doc = "Bit 7 - Enter Power saving state"]
        #[inline(always)]
        pub fn power_saving_enable(&self) -> POWER_SAVING_ENABLE_R {
            POWER_SAVING_ENABLE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:1 - Power saving Mode"]
        #[inline(always)]
        #[must_use]
        pub fn power_saving_mode(&mut self) -> POWER_SAVING_MODE_W<0> {
            POWER_SAVING_MODE_W::new(self)
        }
        #[doc = "Bit 7 - Enter Power saving state"]
        #[inline(always)]
        #[must_use]
        pub fn power_saving_enable(&mut self) -> POWER_SAVING_ENABLE_W<7> {
            POWER_SAVING_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Power Management register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pmu](index.html) module"]
    pub struct PMU;
    impl crate::RegisterSpec for PMU {
        const ADDRESS: u8 = 223u8;
    }
    #[doc = "`read()` method returns [pmu::R](R) reader structure"]
    impl crate::Readable for PMU {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [pmu::W](W) writer structure"]
    impl crate::Writable for PMU {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets PMU to value 0x03"]
    impl crate::Resettable for PMU {
        const RESET_VALUE: u8 = 0x03;
    }
}
pub use sdrar::SDRAR;
#[doc = "SDRAM attribute register"]
pub mod sdrar {
    #[doc = "Register `SDRAR` reader"]
    pub struct R(crate::R<SDRAR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SDRAR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SDRAR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SDRAR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SDRAR` writer"]
    pub struct W(crate::W<SDRAR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SDRAR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SDRAR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SDRAR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SDRAM_COLUMN_ADDRESSING` reader - SDRAM Column addressing"]
    pub type SDRAM_COLUMN_ADDRESSING_R = crate::FieldReader<u8>;
    #[doc = "Field `SDRAM_COLUMN_ADDRESSING` writer - SDRAM Column addressing"]
    pub type SDRAM_COLUMN_ADDRESSING_W<'a, const O: u8> =
        crate::FieldWriter<'a, SDRAR, u8, u8, 3, O>;
    #[doc = "Field `SDRAM_ROW_ADDRESSING` reader - SDRAM Row addressing"]
    pub type SDRAM_ROW_ADDRESSING_R = crate::FieldReader<u8>;
    #[doc = "Field `SDRAM_ROW_ADDRESSING` writer - SDRAM Row addressing"]
    pub type SDRAM_ROW_ADDRESSING_W<'a, const O: u8> = crate::FieldWriter<'a, SDRAR, u8, u8, 2, O>;
    #[doc = "Field `SDRAM_BANK_NUMBER` reader - SDRAM Bank number"]
    pub type SDRAM_BANK_NUMBER_R = crate::BitReader<bool>;
    #[doc = "Field `SDRAM_BANK_NUMBER` writer - SDRAM Bank number"]
    pub type SDRAM_BANK_NUMBER_W<'a, const O: u8> = crate::BitWriter<'a, SDRAR, bool, O>;
    #[doc = "Field `SDRAM_MEMORY_TYPE` reader - SDRAM memory type"]
    pub type SDRAM_MEMORY_TYPE_R = crate::BitReader<SDRAM_MEMORY_TYPE_A>;
    #[doc = "SDRAM memory type\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum SDRAM_MEMORY_TYPE_A {
        #[doc = "0: SDR SDRAM"]
        SDR_SDRAM = 0,
        #[doc = "1: Mobile SDR SDRAM"]
        MOBILE_SDR_SDRAM = 1,
    }
    impl From<SDRAM_MEMORY_TYPE_A> for bool {
        #[inline(always)]
        fn from(variant: SDRAM_MEMORY_TYPE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl SDRAM_MEMORY_TYPE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SDRAM_MEMORY_TYPE_A {
            match self.bits {
                false => SDRAM_MEMORY_TYPE_A::SDR_SDRAM,
                true => SDRAM_MEMORY_TYPE_A::MOBILE_SDR_SDRAM,
            }
        }
        #[doc = "Checks if the value of the field is `SDR_SDRAM`"]
        #[inline(always)]
        pub fn is_sdr_sdram(&self) -> bool {
            *self == SDRAM_MEMORY_TYPE_A::SDR_SDRAM
        }
        #[doc = "Checks if the value of the field is `MOBILE_SDR_SDRAM`"]
        #[inline(always)]
        pub fn is_mobile_sdr_sdram(&self) -> bool {
            *self == SDRAM_MEMORY_TYPE_A::MOBILE_SDR_SDRAM
        }
    }
    #[doc = "Field `SDRAM_MEMORY_TYPE` writer - SDRAM memory type"]
    pub type SDRAM_MEMORY_TYPE_W<'a, const O: u8> =
        crate::BitWriter<'a, SDRAR, SDRAM_MEMORY_TYPE_A, O>;
    impl<'a, const O: u8> SDRAM_MEMORY_TYPE_W<'a, O> {
        #[doc = "SDR SDRAM"]
        #[inline(always)]
        pub fn sdr_sdram(self) -> &'a mut W {
            self.variant(SDRAM_MEMORY_TYPE_A::SDR_SDRAM)
        }
        #[doc = "Mobile SDR SDRAM"]
        #[inline(always)]
        pub fn mobile_sdr_sdram(self) -> &'a mut W {
            self.variant(SDRAM_MEMORY_TYPE_A::MOBILE_SDR_SDRAM)
        }
    }
    #[doc = "Field `SDRAM_POWER_SAVING_TYPE` reader - SDRAM Power Saving type"]
    pub type SDRAM_POWER_SAVING_TYPE_R = crate::BitReader<SDRAM_POWER_SAVING_TYPE_A>;
    #[doc = "SDRAM Power Saving type\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum SDRAM_POWER_SAVING_TYPE_A {
        #[doc = "0: Execute power down command to enter power saving mode"]
        POWER_DOWN = 0,
        #[doc = "1: Execute self refresh command to enter power saving mode"]
        SELF_REFRESH = 1,
    }
    impl From<SDRAM_POWER_SAVING_TYPE_A> for bool {
        #[inline(always)]
        fn from(variant: SDRAM_POWER_SAVING_TYPE_A) -> Self {
            variant as u8 != 0
        }
    }
    impl SDRAM_POWER_SAVING_TYPE_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SDRAM_POWER_SAVING_TYPE_A {
            match self.bits {
                false => SDRAM_POWER_SAVING_TYPE_A::POWER_DOWN,
                true => SDRAM_POWER_SAVING_TYPE_A::SELF_REFRESH,
            }
        }
        #[doc = "Checks if the value of the field is `POWER_DOWN`"]
        #[inline(always)]
        pub fn is_power_down(&self) -> bool {
            *self == SDRAM_POWER_SAVING_TYPE_A::POWER_DOWN
        }
        #[doc = "Checks if the value of the field is `SELF_REFRESH`"]
        #[inline(always)]
        pub fn is_self_refresh(&self) -> bool {
            *self == SDRAM_POWER_SAVING_TYPE_A::SELF_REFRESH
        }
    }
    #[doc = "Field `SDRAM_POWER_SAVING_TYPE` writer - SDRAM Power Saving type"]
    pub type SDRAM_POWER_SAVING_TYPE_W<'a, const O: u8> =
        crate::BitWriter<'a, SDRAR, SDRAM_POWER_SAVING_TYPE_A, O>;
    impl<'a, const O: u8> SDRAM_POWER_SAVING_TYPE_W<'a, O> {
        #[doc = "Execute power down command to enter power saving mode"]
        #[inline(always)]
        pub fn power_down(self) -> &'a mut W {
            self.variant(SDRAM_POWER_SAVING_TYPE_A::POWER_DOWN)
        }
        #[doc = "Execute self refresh command to enter power saving mode"]
        #[inline(always)]
        pub fn self_refresh(self) -> &'a mut W {
            self.variant(SDRAM_POWER_SAVING_TYPE_A::SELF_REFRESH)
        }
    }
    impl R {
        #[doc = "Bits 0:2 - SDRAM Column addressing"]
        #[inline(always)]
        pub fn sdram_column_addressing(&self) -> SDRAM_COLUMN_ADDRESSING_R {
            SDRAM_COLUMN_ADDRESSING_R::new(self.bits & 7)
        }
        #[doc = "Bits 3:4 - SDRAM Row addressing"]
        #[inline(always)]
        pub fn sdram_row_addressing(&self) -> SDRAM_ROW_ADDRESSING_R {
            SDRAM_ROW_ADDRESSING_R::new((self.bits >> 3) & 3)
        }
        #[doc = "Bit 5 - SDRAM Bank number"]
        #[inline(always)]
        pub fn sdram_bank_number(&self) -> SDRAM_BANK_NUMBER_R {
            SDRAM_BANK_NUMBER_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - SDRAM memory type"]
        #[inline(always)]
        pub fn sdram_memory_type(&self) -> SDRAM_MEMORY_TYPE_R {
            SDRAM_MEMORY_TYPE_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - SDRAM Power Saving type"]
        #[inline(always)]
        pub fn sdram_power_saving_type(&self) -> SDRAM_POWER_SAVING_TYPE_R {
            SDRAM_POWER_SAVING_TYPE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:2 - SDRAM Column addressing"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_column_addressing(&mut self) -> SDRAM_COLUMN_ADDRESSING_W<0> {
            SDRAM_COLUMN_ADDRESSING_W::new(self)
        }
        #[doc = "Bits 3:4 - SDRAM Row addressing"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_row_addressing(&mut self) -> SDRAM_ROW_ADDRESSING_W<3> {
            SDRAM_ROW_ADDRESSING_W::new(self)
        }
        #[doc = "Bit 5 - SDRAM Bank number"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_bank_number(&mut self) -> SDRAM_BANK_NUMBER_W<5> {
            SDRAM_BANK_NUMBER_W::new(self)
        }
        #[doc = "Bit 6 - SDRAM memory type"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_memory_type(&mut self) -> SDRAM_MEMORY_TYPE_W<6> {
            SDRAM_MEMORY_TYPE_W::new(self)
        }
        #[doc = "Bit 7 - SDRAM Power Saving type"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_power_saving_type(&mut self) -> SDRAM_POWER_SAVING_TYPE_W<7> {
            SDRAM_POWER_SAVING_TYPE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SDRAM attribute register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sdrar](index.html) module"]
    pub struct SDRAR;
    impl crate::RegisterSpec for SDRAR {
        const ADDRESS: u8 = 224u8;
    }
    #[doc = "`read()` method returns [sdrar::R](R) reader structure"]
    impl crate::Readable for SDRAR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [sdrar::W](W) writer structure"]
    impl crate::Writable for SDRAR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SDRAR to value 0x28"]
    impl crate::Resettable for SDRAR {
        const RESET_VALUE: u8 = 0x28;
    }
}
pub use sdrmd::SDRMD;
#[doc = "SDRAM mode register &amp; extended mode register"]
pub mod sdrmd {
    #[doc = "Register `SDRMD` reader"]
    pub struct R(crate::R<SDRMD>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SDRMD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SDRMD>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SDRMD>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SDRMD` writer"]
    pub struct W(crate::W<SDRMD>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SDRMD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SDRMD>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SDRMD>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SDRAM_CAS_LATENCY` reader - SDRAM CAS latency"]
    pub type SDRAM_CAS_LATENCY_R = crate::FieldReader<u8>;
    #[doc = "Field `SDRAM_CAS_LATENCY` writer - SDRAM CAS latency"]
    pub type SDRAM_CAS_LATENCY_W<'a, const O: u8> = crate::FieldWriter<'a, SDRMD, u8, u8, 3, O>;
    #[doc = "Field `DQ_DRIVE_STRENGTH` reader - To select the driver strength of the DQ outputs (sdr_drv)"]
    pub type DQ_DRIVE_STRENGTH_R = crate::FieldReader<u8>;
    #[doc = "Field `DQ_DRIVE_STRENGTH` writer - To select the driver strength of the DQ outputs (sdr_drv)"]
    pub type DQ_DRIVE_STRENGTH_W<'a, const O: u8> = crate::FieldWriter<'a, SDRMD, u8, u8, 2, O>;
    #[doc = "Field `PARTIAL_ARRAY_SELF_REFRESH` reader - Partial-Array Self Refresh"]
    pub type PARTIAL_ARRAY_SELF_REFRESH_R = crate::FieldReader<u8>;
    #[doc = "Field `PARTIAL_ARRAY_SELF_REFRESH` writer - Partial-Array Self Refresh"]
    pub type PARTIAL_ARRAY_SELF_REFRESH_W<'a, const O: u8> =
        crate::FieldWriter<'a, SDRMD, u8, u8, 3, O>;
    impl R {
        #[doc = "Bits 0:2 - SDRAM CAS latency"]
        #[inline(always)]
        pub fn sdram_cas_latency(&self) -> SDRAM_CAS_LATENCY_R {
            SDRAM_CAS_LATENCY_R::new(self.bits & 7)
        }
        #[doc = "Bits 3:4 - To select the driver strength of the DQ outputs (sdr_drv)"]
        #[inline(always)]
        pub fn dq_drive_strength(&self) -> DQ_DRIVE_STRENGTH_R {
            DQ_DRIVE_STRENGTH_R::new((self.bits >> 3) & 3)
        }
        #[doc = "Bits 5:7 - Partial-Array Self Refresh"]
        #[inline(always)]
        pub fn partial_array_self_refresh(&self) -> PARTIAL_ARRAY_SELF_REFRESH_R {
            PARTIAL_ARRAY_SELF_REFRESH_R::new((self.bits >> 5) & 7)
        }
    }
    impl W {
        #[doc = "Bits 0:2 - SDRAM CAS latency"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_cas_latency(&mut self) -> SDRAM_CAS_LATENCY_W<0> {
            SDRAM_CAS_LATENCY_W::new(self)
        }
        #[doc = "Bits 3:4 - To select the driver strength of the DQ outputs (sdr_drv)"]
        #[inline(always)]
        #[must_use]
        pub fn dq_drive_strength(&mut self) -> DQ_DRIVE_STRENGTH_W<3> {
            DQ_DRIVE_STRENGTH_W::new(self)
        }
        #[doc = "Bits 5:7 - Partial-Array Self Refresh"]
        #[inline(always)]
        #[must_use]
        pub fn partial_array_self_refresh(&mut self) -> PARTIAL_ARRAY_SELF_REFRESH_W<5> {
            PARTIAL_ARRAY_SELF_REFRESH_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SDRAM mode register &amp; extended mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sdrmd](index.html) module"]
    pub struct SDRMD;
    impl crate::RegisterSpec for SDRMD {
        const ADDRESS: u8 = 225u8;
    }
    #[doc = "`read()` method returns [sdrmd::R](R) reader structure"]
    impl crate::Readable for SDRMD {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [sdrmd::W](W) writer structure"]
    impl crate::Writable for SDRMD {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SDRMD to value 0x03"]
    impl crate::Resettable for SDRMD {
        const RESET_VALUE: u8 = 0x03;
    }
}
pub use sdr_ref_itvl0::SDR_REF_ITVL0;
#[doc = "SDRAM auto refresh interval 0"]
pub mod sdr_ref_itvl0 {
    #[doc = "Register `SDR_REF_ITVL0` reader"]
    pub struct R(crate::R<SDR_REF_ITVL0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SDR_REF_ITVL0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SDR_REF_ITVL0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SDR_REF_ITVL0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SDR_REF_ITVL0` writer"]
    pub struct W(crate::W<SDR_REF_ITVL0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SDR_REF_ITVL0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SDR_REF_ITVL0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SDR_REF_ITVL0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `REFRESH_INTERVAL` reader - Refresh interval"]
    pub type REFRESH_INTERVAL_R = crate::FieldReader<u8>;
    #[doc = "Field `REFRESH_INTERVAL` writer - Refresh interval"]
    pub type REFRESH_INTERVAL_W<'a, const O: u8> =
        crate::FieldWriter<'a, SDR_REF_ITVL0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Refresh interval"]
        #[inline(always)]
        pub fn refresh_interval(&self) -> REFRESH_INTERVAL_R {
            REFRESH_INTERVAL_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Refresh interval"]
        #[inline(always)]
        #[must_use]
        pub fn refresh_interval(&mut self) -> REFRESH_INTERVAL_W<0> {
            REFRESH_INTERVAL_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SDRAM auto refresh interval 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sdr_ref_itvl0](index.html) module"]
    pub struct SDR_REF_ITVL0;
    impl crate::RegisterSpec for SDR_REF_ITVL0 {
        const ADDRESS: u8 = 226u8;
    }
    #[doc = "`read()` method returns [sdr_ref_itvl0::R](R) reader structure"]
    impl crate::Readable for SDR_REF_ITVL0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [sdr_ref_itvl0::W](W) writer structure"]
    impl crate::Writable for SDR_REF_ITVL0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SDR_REF_ITVL0 to value 0"]
    impl crate::Resettable for SDR_REF_ITVL0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use sdr_ref_itvl1::SDR_REF_ITVL1;
#[doc = "SDRAM auto refresh interval 1"]
pub mod sdr_ref_itvl1 {
    #[doc = "Register `SDR_REF_ITVL1` reader"]
    pub struct R(crate::R<SDR_REF_ITVL1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SDR_REF_ITVL1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SDR_REF_ITVL1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SDR_REF_ITVL1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SDR_REF_ITVL1` writer"]
    pub struct W(crate::W<SDR_REF_ITVL1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SDR_REF_ITVL1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SDR_REF_ITVL1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SDR_REF_ITVL1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `REFRESH_INTERVAL` reader - Refresh interval"]
    pub type REFRESH_INTERVAL_R = crate::FieldReader<u8>;
    #[doc = "Field `REFRESH_INTERVAL` writer - Refresh interval"]
    pub type REFRESH_INTERVAL_W<'a, const O: u8> =
        crate::FieldWriter<'a, SDR_REF_ITVL1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - Refresh interval"]
        #[inline(always)]
        pub fn refresh_interval(&self) -> REFRESH_INTERVAL_R {
            REFRESH_INTERVAL_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - Refresh interval"]
        #[inline(always)]
        #[must_use]
        pub fn refresh_interval(&mut self) -> REFRESH_INTERVAL_W<0> {
            REFRESH_INTERVAL_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SDRAM auto refresh interval 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sdr_ref_itvl1](index.html) module"]
    pub struct SDR_REF_ITVL1;
    impl crate::RegisterSpec for SDR_REF_ITVL1 {
        const ADDRESS: u8 = 227u8;
    }
    #[doc = "`read()` method returns [sdr_ref_itvl1::R](R) reader structure"]
    impl crate::Readable for SDR_REF_ITVL1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [sdr_ref_itvl1::W](W) writer structure"]
    impl crate::Writable for SDR_REF_ITVL1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SDR_REF_ITVL1 to value 0"]
    impl crate::Resettable for SDR_REF_ITVL1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use sdrcr::SDRCR;
#[doc = "SDRAM Control register"]
pub mod sdrcr {
    #[doc = "Register `SDRCR` reader"]
    pub struct R(crate::R<SDRCR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<SDRCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<SDRCR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<SDRCR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `SDRCR` writer"]
    pub struct W(crate::W<SDRCR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<SDRCR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<SDRCR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<SDRCR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `SDRAM_INIT_ENABLE` reader - Start SDRAM initialization procedure"]
    pub type SDRAM_INIT_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `SDRAM_INIT_ENABLE` writer - Start SDRAM initialization procedure"]
    pub type SDRAM_INIT_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, SDRCR, bool, O>;
    #[doc = "Field `SDRAM_POWER_SAVING_ENABLE` reader - SDRAM enter power saving mode"]
    pub type SDRAM_POWER_SAVING_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `SDRAM_POWER_SAVING_ENABLE` writer - SDRAM enter power saving mode"]
    pub type SDRAM_POWER_SAVING_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, SDRCR, bool, O>;
    #[doc = "Field `SDRAM_TIMING_PARAMETER_REGISTER_ENABLE` reader - SDRAM timing parameter register enable"]
    pub type SDRAM_TIMING_PARAMETER_REGISTER_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `SDRAM_TIMING_PARAMETER_REGISTER_ENABLE` writer - SDRAM timing parameter register enable"]
    pub type SDRAM_TIMING_PARAMETER_REGISTER_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, SDRCR, bool, O>;
    #[doc = "Field `REPORT_WARNING_CONDITION` reader - Report warning condition"]
    pub type REPORT_WARNING_CONDITION_R = crate::BitReader<bool>;
    #[doc = "Field `REPORT_WARNING_CONDITION` writer - Report warning condition"]
    pub type REPORT_WARNING_CONDITION_W<'a, const O: u8> = crate::BitWriter<'a, SDRCR, bool, O>;
    #[doc = "Field `MCKE_PIN_STATE` reader - Current MCKE pin state"]
    pub type MCKE_PIN_STATE_R = crate::BitReader<bool>;
    #[doc = "Field `SDRAM_BUS_WIDTH` reader - SDRAM bus width select"]
    pub type SDRAM_BUS_WIDTH_R = crate::BitReader<SDRAM_BUS_WIDTH_A>;
    #[doc = "SDRAM bus width select\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum SDRAM_BUS_WIDTH_A {
        #[doc = "0: SDR SDRAM 16bits bus"]
        WIDTH_16BIT = 0,
        #[doc = "1: SDR SDRAM 32bits bus"]
        WIDTH_32BIT = 1,
    }
    impl From<SDRAM_BUS_WIDTH_A> for bool {
        #[inline(always)]
        fn from(variant: SDRAM_BUS_WIDTH_A) -> Self {
            variant as u8 != 0
        }
    }
    impl SDRAM_BUS_WIDTH_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> SDRAM_BUS_WIDTH_A {
            match self.bits {
                false => SDRAM_BUS_WIDTH_A::WIDTH_16BIT,
                true => SDRAM_BUS_WIDTH_A::WIDTH_32BIT,
            }
        }
        #[doc = "Checks if the value of the field is `WIDTH_16BIT`"]
        #[inline(always)]
        pub fn is_width_16bit(&self) -> bool {
            *self == SDRAM_BUS_WIDTH_A::WIDTH_16BIT
        }
        #[doc = "Checks if the value of the field is `WIDTH_32BIT`"]
        #[inline(always)]
        pub fn is_width_32bit(&self) -> bool {
            *self == SDRAM_BUS_WIDTH_A::WIDTH_32BIT
        }
    }
    #[doc = "Field `SDRAM_BUS_WIDTH` writer - SDRAM bus width select"]
    pub type SDRAM_BUS_WIDTH_W<'a, const O: u8> = crate::BitWriter<'a, SDRCR, SDRAM_BUS_WIDTH_A, O>;
    impl<'a, const O: u8> SDRAM_BUS_WIDTH_W<'a, O> {
        #[doc = "SDR SDRAM 16bits bus"]
        #[inline(always)]
        pub fn width_16bit(self) -> &'a mut W {
            self.variant(SDRAM_BUS_WIDTH_A::WIDTH_16BIT)
        }
        #[doc = "SDR SDRAM 32bits bus"]
        #[inline(always)]
        pub fn width_32bit(self) -> &'a mut W {
            self.variant(SDRAM_BUS_WIDTH_A::WIDTH_32BIT)
        }
    }
    #[doc = "Field `LENGTH_TO_BREAK_BURST_TRANSFER` reader - Length to break a burst transfer"]
    pub type LENGTH_TO_BREAK_BURST_TRANSFER_R = crate::FieldReader<u8>;
    #[doc = "Field `LENGTH_TO_BREAK_BURST_TRANSFER` writer - Length to break a burst transfer"]
    pub type LENGTH_TO_BREAK_BURST_TRANSFER_W<'a, const O: u8> =
        crate::FieldWriter<'a, SDRCR, u8, u8, 2, O>;
    impl R {
        #[doc = "Bit 0 - Start SDRAM initialization procedure"]
        #[inline(always)]
        pub fn sdram_init_enable(&self) -> SDRAM_INIT_ENABLE_R {
            SDRAM_INIT_ENABLE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - SDRAM enter power saving mode"]
        #[inline(always)]
        pub fn sdram_power_saving_enable(&self) -> SDRAM_POWER_SAVING_ENABLE_R {
            SDRAM_POWER_SAVING_ENABLE_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - SDRAM timing parameter register enable"]
        #[inline(always)]
        pub fn sdram_timing_parameter_register_enable(
            &self,
        ) -> SDRAM_TIMING_PARAMETER_REGISTER_ENABLE_R {
            SDRAM_TIMING_PARAMETER_REGISTER_ENABLE_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Report warning condition"]
        #[inline(always)]
        pub fn report_warning_condition(&self) -> REPORT_WARNING_CONDITION_R {
            REPORT_WARNING_CONDITION_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Current MCKE pin state"]
        #[inline(always)]
        pub fn mcke_pin_state(&self) -> MCKE_PIN_STATE_R {
            MCKE_PIN_STATE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - SDRAM bus width select"]
        #[inline(always)]
        pub fn sdram_bus_width(&self) -> SDRAM_BUS_WIDTH_R {
            SDRAM_BUS_WIDTH_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bits 6:7 - Length to break a burst transfer"]
        #[inline(always)]
        pub fn length_to_break_burst_transfer(&self) -> LENGTH_TO_BREAK_BURST_TRANSFER_R {
            LENGTH_TO_BREAK_BURST_TRANSFER_R::new((self.bits >> 6) & 3)
        }
    }
    impl W {
        #[doc = "Bit 0 - Start SDRAM initialization procedure"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_init_enable(&mut self) -> SDRAM_INIT_ENABLE_W<0> {
            SDRAM_INIT_ENABLE_W::new(self)
        }
        #[doc = "Bit 1 - SDRAM enter power saving mode"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_power_saving_enable(&mut self) -> SDRAM_POWER_SAVING_ENABLE_W<1> {
            SDRAM_POWER_SAVING_ENABLE_W::new(self)
        }
        #[doc = "Bit 2 - SDRAM timing parameter register enable"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_timing_parameter_register_enable(
            &mut self,
        ) -> SDRAM_TIMING_PARAMETER_REGISTER_ENABLE_W<2> {
            SDRAM_TIMING_PARAMETER_REGISTER_ENABLE_W::new(self)
        }
        #[doc = "Bit 3 - Report warning condition"]
        #[inline(always)]
        #[must_use]
        pub fn report_warning_condition(&mut self) -> REPORT_WARNING_CONDITION_W<3> {
            REPORT_WARNING_CONDITION_W::new(self)
        }
        #[doc = "Bit 5 - SDRAM bus width select"]
        #[inline(always)]
        #[must_use]
        pub fn sdram_bus_width(&mut self) -> SDRAM_BUS_WIDTH_W<5> {
            SDRAM_BUS_WIDTH_W::new(self)
        }
        #[doc = "Bits 6:7 - Length to break a burst transfer"]
        #[inline(always)]
        #[must_use]
        pub fn length_to_break_burst_transfer(&mut self) -> LENGTH_TO_BREAK_BURST_TRANSFER_W<6> {
            LENGTH_TO_BREAK_BURST_TRANSFER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "SDRAM Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sdrcr](index.html) module"]
    pub struct SDRCR;
    impl crate::RegisterSpec for SDRCR {
        const ADDRESS: u8 = 228u8;
    }
    #[doc = "`read()` method returns [sdrcr::R](R) reader structure"]
    impl crate::Readable for SDRCR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [sdrcr::W](W) writer structure"]
    impl crate::Writable for SDRCR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets SDRCR to value 0x10"]
    impl crate::Resettable for SDRCR {
        const RESET_VALUE: u8 = 0x10;
    }
}
pub use i2cmcpr0::I2CMCPR0;
#[doc = "I2C Master Clock Pre-scale Register 0"]
pub mod i2cmcpr0 {
    #[doc = "Register `I2CMCPR0` reader"]
    pub struct R(crate::R<I2CMCPR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<I2CMCPR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<I2CMCPR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<I2CMCPR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `I2CMCPR0` writer"]
    pub struct W(crate::W<I2CMCPR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<I2CMCPR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<I2CMCPR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<I2CMCPR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `I2C_MASTER_CLOCK_PRESCALER` reader - I2C Master Clock Pre-scale"]
    pub type I2C_MASTER_CLOCK_PRESCALER_R = crate::FieldReader<u8>;
    #[doc = "Field `I2C_MASTER_CLOCK_PRESCALER` writer - I2C Master Clock Pre-scale"]
    pub type I2C_MASTER_CLOCK_PRESCALER_W<'a, const O: u8> =
        crate::FieldWriter<'a, I2CMCPR0, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - I2C Master Clock Pre-scale"]
        #[inline(always)]
        pub fn i2c_master_clock_prescaler(&self) -> I2C_MASTER_CLOCK_PRESCALER_R {
            I2C_MASTER_CLOCK_PRESCALER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - I2C Master Clock Pre-scale"]
        #[inline(always)]
        #[must_use]
        pub fn i2c_master_clock_prescaler(&mut self) -> I2C_MASTER_CLOCK_PRESCALER_W<0> {
            I2C_MASTER_CLOCK_PRESCALER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "I2C Master Clock Pre-scale Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cmcpr0](index.html) module"]
    pub struct I2CMCPR0;
    impl crate::RegisterSpec for I2CMCPR0 {
        const ADDRESS: u8 = 229u8;
    }
    #[doc = "`read()` method returns [i2cmcpr0::R](R) reader structure"]
    impl crate::Readable for I2CMCPR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [i2cmcpr0::W](W) writer structure"]
    impl crate::Writable for I2CMCPR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets I2CMCPR0 to value 0"]
    impl crate::Resettable for I2CMCPR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use i2cmcpr1::I2CMCPR1;
#[doc = "I2C Master Clock Pre-scale Register 1"]
pub mod i2cmcpr1 {
    #[doc = "Register `I2CMCPR1` reader"]
    pub struct R(crate::R<I2CMCPR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<I2CMCPR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<I2CMCPR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<I2CMCPR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `I2CMCPR1` writer"]
    pub struct W(crate::W<I2CMCPR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<I2CMCPR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<I2CMCPR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<I2CMCPR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `I2C_MASTER_CLOCK_PRESCALER` reader - I2C Master Clock Pre-scale"]
    pub type I2C_MASTER_CLOCK_PRESCALER_R = crate::FieldReader<u8>;
    #[doc = "Field `I2C_MASTER_CLOCK_PRESCALER` writer - I2C Master Clock Pre-scale"]
    pub type I2C_MASTER_CLOCK_PRESCALER_W<'a, const O: u8> =
        crate::FieldWriter<'a, I2CMCPR1, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - I2C Master Clock Pre-scale"]
        #[inline(always)]
        pub fn i2c_master_clock_prescaler(&self) -> I2C_MASTER_CLOCK_PRESCALER_R {
            I2C_MASTER_CLOCK_PRESCALER_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - I2C Master Clock Pre-scale"]
        #[inline(always)]
        #[must_use]
        pub fn i2c_master_clock_prescaler(&mut self) -> I2C_MASTER_CLOCK_PRESCALER_W<0> {
            I2C_MASTER_CLOCK_PRESCALER_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "I2C Master Clock Pre-scale Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cmcpr1](index.html) module"]
    pub struct I2CMCPR1;
    impl crate::RegisterSpec for I2CMCPR1 {
        const ADDRESS: u8 = 230u8;
    }
    #[doc = "`read()` method returns [i2cmcpr1::R](R) reader structure"]
    impl crate::Readable for I2CMCPR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [i2cmcpr1::W](W) writer structure"]
    impl crate::Writable for I2CMCPR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets I2CMCPR1 to value 0"]
    impl crate::Resettable for I2CMCPR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use i2cmtxr::I2CMTXR;
#[doc = "I2C Master Transmit Register"]
pub mod i2cmtxr {
    #[doc = "Register `I2CMTXR` reader"]
    pub struct R(crate::R<I2CMTXR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<I2CMTXR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<I2CMTXR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<I2CMTXR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `I2CMTXR` writer"]
    pub struct W(crate::W<I2CMTXR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<I2CMTXR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<I2CMTXR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<I2CMTXR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `I2C_MASTER_TX` reader - I2C Master Transmit"]
    pub type I2C_MASTER_TX_R = crate::FieldReader<u8>;
    #[doc = "Field `I2C_MASTER_TX` writer - I2C Master Transmit"]
    pub type I2C_MASTER_TX_W<'a, const O: u8> = crate::FieldWriter<'a, I2CMTXR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - I2C Master Transmit"]
        #[inline(always)]
        pub fn i2c_master_tx(&self) -> I2C_MASTER_TX_R {
            I2C_MASTER_TX_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - I2C Master Transmit"]
        #[inline(always)]
        #[must_use]
        pub fn i2c_master_tx(&mut self) -> I2C_MASTER_TX_W<0> {
            I2C_MASTER_TX_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "I2C Master Transmit Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cmtxr](index.html) module"]
    pub struct I2CMTXR;
    impl crate::RegisterSpec for I2CMTXR {
        const ADDRESS: u8 = 231u8;
    }
    #[doc = "`read()` method returns [i2cmtxr::R](R) reader structure"]
    impl crate::Readable for I2CMTXR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [i2cmtxr::W](W) writer structure"]
    impl crate::Writable for I2CMTXR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets I2CMTXR to value 0"]
    impl crate::Resettable for I2CMTXR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use i2cmrxr::I2CMRXR;
#[doc = "I2C Master Receiver Register"]
pub mod i2cmrxr {
    #[doc = "Register `I2CMRXR` reader"]
    pub struct R(crate::R<I2CMRXR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<I2CMRXR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<I2CMRXR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<I2CMRXR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `I2CMRXR` writer"]
    pub struct W(crate::W<I2CMRXR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<I2CMRXR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<I2CMRXR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<I2CMRXR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `I2C_MASTER_RX` reader - I2C Master Receiver"]
    pub type I2C_MASTER_RX_R = crate::FieldReader<u8>;
    #[doc = "Field `I2C_MASTER_RX` writer - I2C Master Receiver"]
    pub type I2C_MASTER_RX_W<'a, const O: u8> = crate::FieldWriter<'a, I2CMRXR, u8, u8, 8, O>;
    impl R {
        #[doc = "Bits 0:7 - I2C Master Receiver"]
        #[inline(always)]
        pub fn i2c_master_rx(&self) -> I2C_MASTER_RX_R {
            I2C_MASTER_RX_R::new(self.bits)
        }
    }
    impl W {
        #[doc = "Bits 0:7 - I2C Master Receiver"]
        #[inline(always)]
        #[must_use]
        pub fn i2c_master_rx(&mut self) -> I2C_MASTER_RX_W<0> {
            I2C_MASTER_RX_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "I2C Master Receiver Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cmrxr](index.html) module"]
    pub struct I2CMRXR;
    impl crate::RegisterSpec for I2CMRXR {
        const ADDRESS: u8 = 232u8;
    }
    #[doc = "`read()` method returns [i2cmrxr::R](R) reader structure"]
    impl crate::Readable for I2CMRXR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [i2cmrxr::W](W) writer structure"]
    impl crate::Writable for I2CMRXR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets I2CMRXR to value 0"]
    impl crate::Resettable for I2CMRXR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use i2cmcmdr::I2CMCMDR;
#[doc = "I2C Master Command Register"]
pub mod i2cmcmdr {
    #[doc = "Register `I2CMCMDR` reader"]
    pub struct R(crate::R<I2CMCMDR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<I2CMCMDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<I2CMCMDR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<I2CMCMDR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `I2CMCMDR` writer"]
    pub struct W(crate::W<I2CMCMDR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<I2CMCMDR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<I2CMCMDR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<I2CMCMDR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `NOISE_FILTER_ENABLE` reader - Noise Filter"]
    pub type NOISE_FILTER_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `NOISE_FILTER_ENABLE` writer - Noise Filter"]
    pub type NOISE_FILTER_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, I2CMCMDR, bool, O>;
    #[doc = "Field `ACKNOWLEDGE` reader - ACKNOWLEDGE"]
    pub type ACKNOWLEDGE_R = crate::BitReader<bool>;
    #[doc = "Field `ACKNOWLEDGE` writer - ACKNOWLEDGE"]
    pub type ACKNOWLEDGE_W<'a, const O: u8> = crate::BitWriter<'a, I2CMCMDR, bool, O>;
    #[doc = "Field `WRITE` reader - WRITE - Write to slave and be cleared by hardware automatically"]
    pub type WRITE_R = crate::BitReader<bool>;
    #[doc = "Field `WRITE` writer - WRITE - Write to slave and be cleared by hardware automatically"]
    pub type WRITE_W<'a, const O: u8> = crate::BitWriter<'a, I2CMCMDR, bool, O>;
    #[doc = "Field `READ` reader - READ - Read from slave and be cleared by hardware automatically"]
    pub type READ_R = crate::BitReader<bool>;
    #[doc = "Field `READ` writer - READ - Read from slave and be cleared by hardware automatically"]
    pub type READ_W<'a, const O: u8> = crate::BitWriter<'a, I2CMCMDR, bool, O>;
    #[doc = "Field `STOP` reader - STOP - Generate stop condition and be cleared by hardware automatically"]
    pub type STOP_R = crate::BitReader<bool>;
    #[doc = "Field `STOP` writer - STOP - Generate stop condition and be cleared by hardware automatically"]
    pub type STOP_W<'a, const O: u8> = crate::BitWriter<'a, I2CMCMDR, bool, O>;
    #[doc = "Field `START` reader - START - Generate (repeated) start condition and be cleared by hardware automatically"]
    pub type START_R = crate::BitReader<bool>;
    #[doc = "Field `START` writer - START - Generate (repeated) start condition and be cleared by hardware automatically"]
    pub type START_W<'a, const O: u8> = crate::BitWriter<'a, I2CMCMDR, bool, O>;
    impl R {
        #[doc = "Bit 0 - Noise Filter"]
        #[inline(always)]
        pub fn noise_filter_enable(&self) -> NOISE_FILTER_ENABLE_R {
            NOISE_FILTER_ENABLE_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 3 - ACKNOWLEDGE"]
        #[inline(always)]
        pub fn acknowledge(&self) -> ACKNOWLEDGE_R {
            ACKNOWLEDGE_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - WRITE - Write to slave and be cleared by hardware automatically"]
        #[inline(always)]
        pub fn write(&self) -> WRITE_R {
            WRITE_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - READ - Read from slave and be cleared by hardware automatically"]
        #[inline(always)]
        pub fn read(&self) -> READ_R {
            READ_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - STOP - Generate stop condition and be cleared by hardware automatically"]
        #[inline(always)]
        pub fn stop(&self) -> STOP_R {
            STOP_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - START - Generate (repeated) start condition and be cleared by hardware automatically"]
        #[inline(always)]
        pub fn start(&self) -> START_R {
            START_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Noise Filter"]
        #[inline(always)]
        #[must_use]
        pub fn noise_filter_enable(&mut self) -> NOISE_FILTER_ENABLE_W<0> {
            NOISE_FILTER_ENABLE_W::new(self)
        }
        #[doc = "Bit 3 - ACKNOWLEDGE"]
        #[inline(always)]
        #[must_use]
        pub fn acknowledge(&mut self) -> ACKNOWLEDGE_W<3> {
            ACKNOWLEDGE_W::new(self)
        }
        #[doc = "Bit 4 - WRITE - Write to slave and be cleared by hardware automatically"]
        #[inline(always)]
        #[must_use]
        pub fn write(&mut self) -> WRITE_W<4> {
            WRITE_W::new(self)
        }
        #[doc = "Bit 5 - READ - Read from slave and be cleared by hardware automatically"]
        #[inline(always)]
        #[must_use]
        pub fn read(&mut self) -> READ_W<5> {
            READ_W::new(self)
        }
        #[doc = "Bit 6 - STOP - Generate stop condition and be cleared by hardware automatically"]
        #[inline(always)]
        #[must_use]
        pub fn stop(&mut self) -> STOP_W<6> {
            STOP_W::new(self)
        }
        #[doc = "Bit 7 - START - Generate (repeated) start condition and be cleared by hardware automatically"]
        #[inline(always)]
        #[must_use]
        pub fn start(&mut self) -> START_W<7> {
            START_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "I2C Master Command Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cmcmdr](index.html) module"]
    pub struct I2CMCMDR;
    impl crate::RegisterSpec for I2CMCMDR {
        const ADDRESS: u8 = 233u8;
    }
    #[doc = "`read()` method returns [i2cmcmdr::R](R) reader structure"]
    impl crate::Readable for I2CMCMDR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [i2cmcmdr::W](W) writer structure"]
    impl crate::Writable for I2CMCMDR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets I2CMCMDR to value 0"]
    impl crate::Resettable for I2CMCMDR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use i2cmstur::I2CMSTUR;
#[doc = "I2C Master Status Register"]
pub mod i2cmstur {
    #[doc = "Register `I2CMSTUR` reader"]
    pub struct R(crate::R<I2CMSTUR>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<I2CMSTUR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<I2CMSTUR>> for R {
        #[inline(always)]
        fn from(reader: crate::R<I2CMSTUR>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `I2CMSTUR` writer"]
    pub struct W(crate::W<I2CMSTUR>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<I2CMSTUR>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<I2CMSTUR>> for W {
        #[inline(always)]
        fn from(writer: crate::W<I2CMSTUR>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ARBITRATION_LOST` reader - This bit is set when the core lost arbitration"]
    pub type ARBITRATION_LOST_R = crate::BitReader<bool>;
    #[doc = "Field `TRANSFER_IN_PROGRESS` reader - Transfer in progress"]
    pub type TRANSFER_IN_PROGRESS_R = crate::BitReader<bool>;
    #[doc = "Field `I2C_BUS_BUSY` reader - I2C Bus is Busy"]
    pub type I2C_BUS_BUSY_R = crate::BitReader<bool>;
    #[doc = "Field `ACKNOWLEDGE` reader - Received acknowledge from slave"]
    pub type ACKNOWLEDGE_R = crate::BitReader<bool>;
    impl R {
        #[doc = "Bit 0 - This bit is set when the core lost arbitration"]
        #[inline(always)]
        pub fn arbitration_lost(&self) -> ARBITRATION_LOST_R {
            ARBITRATION_LOST_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Transfer in progress"]
        #[inline(always)]
        pub fn transfer_in_progress(&self) -> TRANSFER_IN_PROGRESS_R {
            TRANSFER_IN_PROGRESS_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 6 - I2C Bus is Busy"]
        #[inline(always)]
        pub fn i2c_bus_busy(&self) -> I2C_BUS_BUSY_R {
            I2C_BUS_BUSY_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Received acknowledge from slave"]
        #[inline(always)]
        pub fn acknowledge(&self) -> ACKNOWLEDGE_R {
            ACKNOWLEDGE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "I2C Master Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cmstur](index.html) module"]
    pub struct I2CMSTUR;
    impl crate::RegisterSpec for I2CMSTUR {
        const ADDRESS: u8 = 234u8;
    }
    #[doc = "`read()` method returns [i2cmstur::R](R) reader structure"]
    impl crate::Readable for I2CMSTUR {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [i2cmstur::W](W) writer structure"]
    impl crate::Writable for I2CMSTUR {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets I2CMSTUR to value 0"]
    impl crate::Resettable for I2CMSTUR {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpioad::GPIOAD;
#[doc = "GPIO-A direction"]
pub mod gpioad {
    #[doc = "Register `GPIOAD` reader"]
    pub struct R(crate::R<GPIOAD>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOAD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOAD>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOAD>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOAD` writer"]
    pub struct W(crate::W<GPIOAD>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOAD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOAD>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOAD>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - Direction for GPIO-A\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "Direction for GPIO-A\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::OUTPUT,
                true => P0_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P0_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P0_A::INPUT
        }
    }
    #[doc = "Field `P0` writer - Direction for GPIO-A\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P0_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P0_A::INPUT)
        }
    }
    #[doc = "Field `P1` reader - Direction for GPIO-A\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "Direction for GPIO-A\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::OUTPUT,
                true => P1_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P1_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P1_A::INPUT
        }
    }
    #[doc = "Field `P1` writer - Direction for GPIO-A\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P1_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P1_A::INPUT)
        }
    }
    #[doc = "Field `P2` reader - Direction for GPIO-A\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "Direction for GPIO-A\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::OUTPUT,
                true => P2_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P2_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P2_A::INPUT
        }
    }
    #[doc = "Field `P2` writer - Direction for GPIO-A\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P2_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P2_A::INPUT)
        }
    }
    #[doc = "Field `P3` reader - Direction for GPIO-A\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "Direction for GPIO-A\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::OUTPUT,
                true => P3_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P3_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P3_A::INPUT
        }
    }
    #[doc = "Field `P3` writer - Direction for GPIO-A\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P3_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P3_A::INPUT)
        }
    }
    #[doc = "Field `P4` reader - Direction for GPIO-A\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "Direction for GPIO-A\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::OUTPUT,
                true => P4_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P4_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P4_A::INPUT
        }
    }
    #[doc = "Field `P4` writer - Direction for GPIO-A\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P4_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P4_A::INPUT)
        }
    }
    #[doc = "Field `P5` reader - Direction for GPIO-A\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "Direction for GPIO-A\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::OUTPUT,
                true => P5_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P5_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P5_A::INPUT
        }
    }
    #[doc = "Field `P5` writer - Direction for GPIO-A\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P5_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P5_A::INPUT)
        }
    }
    #[doc = "Field `P6` reader - Direction for GPIO-A\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "Direction for GPIO-A\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::OUTPUT,
                true => P6_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P6_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P6_A::INPUT
        }
    }
    #[doc = "Field `P6` writer - Direction for GPIO-A\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P6_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P6_A::INPUT)
        }
    }
    #[doc = "Field `P7` reader - Direction for GPIO-A\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "Direction for GPIO-A\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::OUTPUT,
                true => P7_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P7_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P7_A::INPUT
        }
    }
    #[doc = "Field `P7` writer - Direction for GPIO-A\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOAD, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P7_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P7_A::INPUT)
        }
    }
    impl R {
        #[doc = "Bit 0 - Direction for GPIO-A\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Direction for GPIO-A\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Direction for GPIO-A\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Direction for GPIO-A\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Direction for GPIO-A\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Direction for GPIO-A\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Direction for GPIO-A\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Direction for GPIO-A\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Direction for GPIO-A\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - Direction for GPIO-A\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - Direction for GPIO-A\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - Direction for GPIO-A\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - Direction for GPIO-A\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - Direction for GPIO-A\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - Direction for GPIO-A\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - Direction for GPIO-A\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-A direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioad](index.html) module"]
    pub struct GPIOAD;
    impl crate::RegisterSpec for GPIOAD {
        const ADDRESS: u8 = 240u8;
    }
    #[doc = "`read()` method returns [gpioad::R](R) reader structure"]
    impl crate::Readable for GPIOAD {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpioad::W](W) writer structure"]
    impl crate::Writable for GPIOAD {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOAD to value 0"]
    impl crate::Resettable for GPIOAD {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpioa::GPIOA;
#[doc = "GPIO-A"]
pub mod gpioa {
    #[doc = "Register `GPIOA` reader"]
    pub struct R(crate::R<GPIOA>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOA>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOA>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOA>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOA` writer"]
    pub struct W(crate::W<GPIOA>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOA>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOA>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOA>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - GPIO-A\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "GPIO-A\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::LOW,
                true => P0_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P0_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P0_A::HIGH
        }
    }
    #[doc = "Field `P0` writer - GPIO-A\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P0_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P0_A::HIGH)
        }
    }
    #[doc = "Field `P1` reader - GPIO-A\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "GPIO-A\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::LOW,
                true => P1_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P1_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P1_A::HIGH
        }
    }
    #[doc = "Field `P1` writer - GPIO-A\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P1_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P1_A::HIGH)
        }
    }
    #[doc = "Field `P2` reader - GPIO-A\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "GPIO-A\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::LOW,
                true => P2_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P2_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P2_A::HIGH
        }
    }
    #[doc = "Field `P2` writer - GPIO-A\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P2_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P2_A::HIGH)
        }
    }
    #[doc = "Field `P3` reader - GPIO-A\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "GPIO-A\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::LOW,
                true => P3_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P3_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P3_A::HIGH
        }
    }
    #[doc = "Field `P3` writer - GPIO-A\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P3_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P3_A::HIGH)
        }
    }
    #[doc = "Field `P4` reader - GPIO-A\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "GPIO-A\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::LOW,
                true => P4_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P4_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P4_A::HIGH
        }
    }
    #[doc = "Field `P4` writer - GPIO-A\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P4_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P4_A::HIGH)
        }
    }
    #[doc = "Field `P5` reader - GPIO-A\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "GPIO-A\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::LOW,
                true => P5_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P5_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P5_A::HIGH
        }
    }
    #[doc = "Field `P5` writer - GPIO-A\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P5_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P5_A::HIGH)
        }
    }
    #[doc = "Field `P6` reader - GPIO-A\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "GPIO-A\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::LOW,
                true => P6_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P6_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P6_A::HIGH
        }
    }
    #[doc = "Field `P6` writer - GPIO-A\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P6_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P6_A::HIGH)
        }
    }
    #[doc = "Field `P7` reader - GPIO-A\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "GPIO-A\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::LOW,
                true => P7_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P7_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P7_A::HIGH
        }
    }
    #[doc = "Field `P7` writer - GPIO-A\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOA, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P7_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P7_A::HIGH)
        }
    }
    impl R {
        #[doc = "Bit 0 - GPIO-A\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - GPIO-A\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - GPIO-A\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - GPIO-A\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - GPIO-A\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - GPIO-A\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - GPIO-A\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - GPIO-A\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - GPIO-A\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - GPIO-A\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - GPIO-A\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - GPIO-A\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - GPIO-A\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - GPIO-A\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - GPIO-A\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - GPIO-A\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-A\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioa](index.html) module"]
    pub struct GPIOA;
    impl crate::RegisterSpec for GPIOA {
        const ADDRESS: u8 = 241u8;
    }
    #[doc = "`read()` method returns [gpioa::R](R) reader structure"]
    impl crate::Readable for GPIOA {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpioa::W](W) writer structure"]
    impl crate::Writable for GPIOA {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOA to value 0"]
    impl crate::Resettable for GPIOA {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpiob::GPIOB;
#[doc = "GPIO-B"]
pub mod gpiob {
    #[doc = "Register `GPIOB` reader"]
    pub struct R(crate::R<GPIOB>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOB>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOB>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOB>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOB` writer"]
    pub struct W(crate::W<GPIOB>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOB>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOB>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOB>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - GPIO-B\\[0\\]
(CS)"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "GPIO-B\\[0\\]
(CS)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::LOW,
                true => P0_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P0_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P0_A::HIGH
        }
    }
    #[doc = "Field `P1` reader - GPIO-B\\[1\\]
(RD)"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "GPIO-B\\[1\\]
(RD)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::LOW,
                true => P1_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P1_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P1_A::HIGH
        }
    }
    #[doc = "Field `P2` reader - GPIO-B\\[2\\]
(WR)"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "GPIO-B\\[2\\]
(WR)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::LOW,
                true => P2_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P2_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P2_A::HIGH
        }
    }
    #[doc = "Field `P3` reader - GPIO-B\\[3\\]
(A0)"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "GPIO-B\\[3\\]
(A0)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::LOW,
                true => P3_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P3_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P3_A::HIGH
        }
    }
    #[doc = "Field `P4` reader - GPIO-B\\[4\\]
(write: KOUT, read: KIN)"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "GPIO-B\\[4\\]
(write: KOUT, read: KIN)\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::LOW,
                true => P4_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P4_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P4_A::HIGH
        }
    }
    #[doc = "Field `P4` writer - GPIO-B\\[4\\]
(write: KOUT, read: KIN)"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOB, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P4_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P4_A::HIGH)
        }
    }
    impl R {
        #[doc = "Bit 0 - GPIO-B\\[0\\]
(CS)"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - GPIO-B\\[1\\]
(RD)"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - GPIO-B\\[2\\]
(WR)"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - GPIO-B\\[3\\]
(A0)"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - GPIO-B\\[4\\]
(write: KOUT, read: KIN)"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 4 - GPIO-B\\[4\\]
(write: KOUT, read: KIN)"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-B\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiob](index.html) module"]
    pub struct GPIOB;
    impl crate::RegisterSpec for GPIOB {
        const ADDRESS: u8 = 242u8;
    }
    #[doc = "`read()` method returns [gpiob::R](R) reader structure"]
    impl crate::Readable for GPIOB {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpiob::W](W) writer structure"]
    impl crate::Writable for GPIOB {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOB to value 0"]
    impl crate::Resettable for GPIOB {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpiocd::GPIOCD;
#[doc = "GPIO-C direction"]
pub mod gpiocd {
    #[doc = "Register `GPIOCD` reader"]
    pub struct R(crate::R<GPIOCD>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOCD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOCD>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOCD>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOCD` writer"]
    pub struct W(crate::W<GPIOCD>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOCD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOCD>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOCD>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - Direction for GPIO-C\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "Direction for GPIO-C\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::OUTPUT,
                true => P0_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P0_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P0_A::INPUT
        }
    }
    #[doc = "Field `P0` writer - Direction for GPIO-C\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P0_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P0_A::INPUT)
        }
    }
    #[doc = "Field `P1` reader - Direction for GPIO-C\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "Direction for GPIO-C\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::OUTPUT,
                true => P1_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P1_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P1_A::INPUT
        }
    }
    #[doc = "Field `P1` writer - Direction for GPIO-C\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P1_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P1_A::INPUT)
        }
    }
    #[doc = "Field `P2` reader - Direction for GPIO-C\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "Direction for GPIO-C\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::OUTPUT,
                true => P2_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P2_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P2_A::INPUT
        }
    }
    #[doc = "Field `P2` writer - Direction for GPIO-C\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P2_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P2_A::INPUT)
        }
    }
    #[doc = "Field `P3` reader - Direction for GPIO-C\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "Direction for GPIO-C\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::OUTPUT,
                true => P3_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P3_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P3_A::INPUT
        }
    }
    #[doc = "Field `P3` writer - Direction for GPIO-C\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P3_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P3_A::INPUT)
        }
    }
    #[doc = "Field `P4` reader - Direction for GPIO-C\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "Direction for GPIO-C\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::OUTPUT,
                true => P4_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P4_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P4_A::INPUT
        }
    }
    #[doc = "Field `P4` writer - Direction for GPIO-C\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P4_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P4_A::INPUT)
        }
    }
    #[doc = "Field `P5` reader - Direction for GPIO-C\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "Direction for GPIO-C\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::OUTPUT,
                true => P5_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P5_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P5_A::INPUT
        }
    }
    #[doc = "Field `P5` writer - Direction for GPIO-C\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P5_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P5_A::INPUT)
        }
    }
    #[doc = "Field `P6` reader - Direction for GPIO-C\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "Direction for GPIO-C\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::OUTPUT,
                true => P6_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P6_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P6_A::INPUT
        }
    }
    #[doc = "Field `P6` writer - Direction for GPIO-C\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P6_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P6_A::INPUT)
        }
    }
    #[doc = "Field `P7` reader - Direction for GPIO-C\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "Direction for GPIO-C\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::OUTPUT,
                true => P7_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P7_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P7_A::INPUT
        }
    }
    #[doc = "Field `P7` writer - Direction for GPIO-C\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOCD, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P7_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P7_A::INPUT)
        }
    }
    impl R {
        #[doc = "Bit 0 - Direction for GPIO-C\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Direction for GPIO-C\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Direction for GPIO-C\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Direction for GPIO-C\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Direction for GPIO-C\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Direction for GPIO-C\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Direction for GPIO-C\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Direction for GPIO-C\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Direction for GPIO-C\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - Direction for GPIO-C\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - Direction for GPIO-C\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - Direction for GPIO-C\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - Direction for GPIO-C\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - Direction for GPIO-C\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - Direction for GPIO-C\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - Direction for GPIO-C\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-C direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiocd](index.html) module"]
    pub struct GPIOCD;
    impl crate::RegisterSpec for GPIOCD {
        const ADDRESS: u8 = 243u8;
    }
    #[doc = "`read()` method returns [gpiocd::R](R) reader structure"]
    impl crate::Readable for GPIOCD {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpiocd::W](W) writer structure"]
    impl crate::Writable for GPIOCD {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOCD to value 0"]
    impl crate::Resettable for GPIOCD {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpioc::GPIOC;
#[doc = "GPIO-C"]
pub mod gpioc {
    #[doc = "Register `GPIOC` reader"]
    pub struct R(crate::R<GPIOC>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOC>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOC>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOC>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOC` writer"]
    pub struct W(crate::W<GPIOC>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOC>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOC>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOC>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - GPIO-C\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "GPIO-C\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::LOW,
                true => P0_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P0_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P0_A::HIGH
        }
    }
    #[doc = "Field `P0` writer - GPIO-C\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P0_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P0_A::HIGH)
        }
    }
    #[doc = "Field `P1` reader - GPIO-C\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "GPIO-C\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::LOW,
                true => P1_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P1_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P1_A::HIGH
        }
    }
    #[doc = "Field `P1` writer - GPIO-C\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P1_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P1_A::HIGH)
        }
    }
    #[doc = "Field `P2` reader - GPIO-C\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "GPIO-C\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::LOW,
                true => P2_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P2_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P2_A::HIGH
        }
    }
    #[doc = "Field `P2` writer - GPIO-C\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P2_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P2_A::HIGH)
        }
    }
    #[doc = "Field `P3` reader - GPIO-C\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "GPIO-C\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::LOW,
                true => P3_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P3_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P3_A::HIGH
        }
    }
    #[doc = "Field `P3` writer - GPIO-C\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P3_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P3_A::HIGH)
        }
    }
    #[doc = "Field `P4` reader - GPIO-C\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "GPIO-C\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::LOW,
                true => P4_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P4_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P4_A::HIGH
        }
    }
    #[doc = "Field `P4` writer - GPIO-C\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P4_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P4_A::HIGH)
        }
    }
    #[doc = "Field `P5` reader - GPIO-C\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "GPIO-C\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::LOW,
                true => P5_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P5_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P5_A::HIGH
        }
    }
    #[doc = "Field `P5` writer - GPIO-C\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P5_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P5_A::HIGH)
        }
    }
    #[doc = "Field `P6` reader - GPIO-C\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "GPIO-C\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::LOW,
                true => P6_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P6_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P6_A::HIGH
        }
    }
    #[doc = "Field `P6` writer - GPIO-C\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P6_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P6_A::HIGH)
        }
    }
    #[doc = "Field `P7` reader - GPIO-C\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "GPIO-C\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::LOW,
                true => P7_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P7_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P7_A::HIGH
        }
    }
    #[doc = "Field `P7` writer - GPIO-C\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOC, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P7_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P7_A::HIGH)
        }
    }
    impl R {
        #[doc = "Bit 0 - GPIO-C\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - GPIO-C\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - GPIO-C\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - GPIO-C\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - GPIO-C\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - GPIO-C\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - GPIO-C\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - GPIO-C\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - GPIO-C\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - GPIO-C\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - GPIO-C\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - GPIO-C\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - GPIO-C\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - GPIO-C\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - GPIO-C\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - GPIO-C\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-C\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioc](index.html) module"]
    pub struct GPIOC;
    impl crate::RegisterSpec for GPIOC {
        const ADDRESS: u8 = 244u8;
    }
    #[doc = "`read()` method returns [gpioc::R](R) reader structure"]
    impl crate::Readable for GPIOC {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpioc::W](W) writer structure"]
    impl crate::Writable for GPIOC {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOC to value 0"]
    impl crate::Resettable for GPIOC {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpiodd::GPIODD;
#[doc = "GPIO-D direction"]
pub mod gpiodd {
    #[doc = "Register `GPIODD` reader"]
    pub struct R(crate::R<GPIODD>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIODD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIODD>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIODD>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIODD` writer"]
    pub struct W(crate::W<GPIODD>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIODD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIODD>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIODD>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - Direction for GPIO-D\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "Direction for GPIO-D\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::OUTPUT,
                true => P0_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P0_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P0_A::INPUT
        }
    }
    #[doc = "Field `P0` writer - Direction for GPIO-D\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P0_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P0_A::INPUT)
        }
    }
    #[doc = "Field `P1` reader - Direction for GPIO-D\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "Direction for GPIO-D\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::OUTPUT,
                true => P1_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P1_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P1_A::INPUT
        }
    }
    #[doc = "Field `P1` writer - Direction for GPIO-D\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P1_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P1_A::INPUT)
        }
    }
    #[doc = "Field `P2` reader - Direction for GPIO-D\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "Direction for GPIO-D\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::OUTPUT,
                true => P2_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P2_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P2_A::INPUT
        }
    }
    #[doc = "Field `P2` writer - Direction for GPIO-D\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P2_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P2_A::INPUT)
        }
    }
    #[doc = "Field `P3` reader - Direction for GPIO-D\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "Direction for GPIO-D\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::OUTPUT,
                true => P3_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P3_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P3_A::INPUT
        }
    }
    #[doc = "Field `P3` writer - Direction for GPIO-D\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P3_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P3_A::INPUT)
        }
    }
    #[doc = "Field `P4` reader - Direction for GPIO-D\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "Direction for GPIO-D\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::OUTPUT,
                true => P4_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P4_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P4_A::INPUT
        }
    }
    #[doc = "Field `P4` writer - Direction for GPIO-D\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P4_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P4_A::INPUT)
        }
    }
    #[doc = "Field `P5` reader - Direction for GPIO-D\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "Direction for GPIO-D\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::OUTPUT,
                true => P5_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P5_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P5_A::INPUT
        }
    }
    #[doc = "Field `P5` writer - Direction for GPIO-D\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P5_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P5_A::INPUT)
        }
    }
    #[doc = "Field `P6` reader - Direction for GPIO-D\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "Direction for GPIO-D\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::OUTPUT,
                true => P6_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P6_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P6_A::INPUT
        }
    }
    #[doc = "Field `P6` writer - Direction for GPIO-D\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P6_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P6_A::INPUT)
        }
    }
    #[doc = "Field `P7` reader - Direction for GPIO-D\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "Direction for GPIO-D\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::OUTPUT,
                true => P7_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P7_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P7_A::INPUT
        }
    }
    #[doc = "Field `P7` writer - Direction for GPIO-D\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIODD, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P7_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P7_A::INPUT)
        }
    }
    impl R {
        #[doc = "Bit 0 - Direction for GPIO-D\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Direction for GPIO-D\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Direction for GPIO-D\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Direction for GPIO-D\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Direction for GPIO-D\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Direction for GPIO-D\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Direction for GPIO-D\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Direction for GPIO-D\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Direction for GPIO-D\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - Direction for GPIO-D\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - Direction for GPIO-D\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - Direction for GPIO-D\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - Direction for GPIO-D\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - Direction for GPIO-D\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - Direction for GPIO-D\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - Direction for GPIO-D\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-D direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodd](index.html) module"]
    pub struct GPIODD;
    impl crate::RegisterSpec for GPIODD {
        const ADDRESS: u8 = 245u8;
    }
    #[doc = "`read()` method returns [gpiodd::R](R) reader structure"]
    impl crate::Readable for GPIODD {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpiodd::W](W) writer structure"]
    impl crate::Writable for GPIODD {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIODD to value 0"]
    impl crate::Resettable for GPIODD {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpiod::GPIOD;
#[doc = "GPIO-D"]
pub mod gpiod {
    #[doc = "Register `GPIOD` reader"]
    pub struct R(crate::R<GPIOD>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOD>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOD>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOD` writer"]
    pub struct W(crate::W<GPIOD>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOD>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOD>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - GPIO-D\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "GPIO-D\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::LOW,
                true => P0_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P0_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P0_A::HIGH
        }
    }
    #[doc = "Field `P0` writer - GPIO-D\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P0_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P0_A::HIGH)
        }
    }
    #[doc = "Field `P1` reader - GPIO-D\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "GPIO-D\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::LOW,
                true => P1_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P1_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P1_A::HIGH
        }
    }
    #[doc = "Field `P1` writer - GPIO-D\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P1_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P1_A::HIGH)
        }
    }
    #[doc = "Field `P2` reader - GPIO-D\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "GPIO-D\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::LOW,
                true => P2_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P2_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P2_A::HIGH
        }
    }
    #[doc = "Field `P2` writer - GPIO-D\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P2_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P2_A::HIGH)
        }
    }
    #[doc = "Field `P3` reader - GPIO-D\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "GPIO-D\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::LOW,
                true => P3_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P3_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P3_A::HIGH
        }
    }
    #[doc = "Field `P3` writer - GPIO-D\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P3_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P3_A::HIGH)
        }
    }
    #[doc = "Field `P4` reader - GPIO-D\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "GPIO-D\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::LOW,
                true => P4_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P4_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P4_A::HIGH
        }
    }
    #[doc = "Field `P4` writer - GPIO-D\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P4_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P4_A::HIGH)
        }
    }
    #[doc = "Field `P5` reader - GPIO-D\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "GPIO-D\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::LOW,
                true => P5_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P5_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P5_A::HIGH
        }
    }
    #[doc = "Field `P5` writer - GPIO-D\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P5_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P5_A::HIGH)
        }
    }
    #[doc = "Field `P6` reader - GPIO-D\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "GPIO-D\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::LOW,
                true => P6_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P6_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P6_A::HIGH
        }
    }
    #[doc = "Field `P6` writer - GPIO-D\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P6_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P6_A::HIGH)
        }
    }
    #[doc = "Field `P7` reader - GPIO-D\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "GPIO-D\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::LOW,
                true => P7_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P7_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P7_A::HIGH
        }
    }
    #[doc = "Field `P7` writer - GPIO-D\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOD, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P7_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P7_A::HIGH)
        }
    }
    impl R {
        #[doc = "Bit 0 - GPIO-D\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - GPIO-D\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - GPIO-D\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - GPIO-D\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - GPIO-D\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - GPIO-D\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - GPIO-D\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - GPIO-D\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - GPIO-D\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - GPIO-D\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - GPIO-D\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - GPIO-D\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - GPIO-D\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - GPIO-D\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - GPIO-D\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - GPIO-D\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-D\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiod](index.html) module"]
    pub struct GPIOD;
    impl crate::RegisterSpec for GPIOD {
        const ADDRESS: u8 = 246u8;
    }
    #[doc = "`read()` method returns [gpiod::R](R) reader structure"]
    impl crate::Readable for GPIOD {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpiod::W](W) writer structure"]
    impl crate::Writable for GPIOD {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOD to value 0"]
    impl crate::Resettable for GPIOD {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpioed::GPIOED;
#[doc = "GPIO-E direction"]
pub mod gpioed {
    #[doc = "Register `GPIOED` reader"]
    pub struct R(crate::R<GPIOED>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOED>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOED>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOED>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOED` writer"]
    pub struct W(crate::W<GPIOED>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOED>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOED>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOED>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - Direction for GPIO-E\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "Direction for GPIO-E\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::OUTPUT,
                true => P0_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P0_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P0_A::INPUT
        }
    }
    #[doc = "Field `P0` writer - Direction for GPIO-E\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P0_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P0_A::INPUT)
        }
    }
    #[doc = "Field `P1` reader - Direction for GPIO-E\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "Direction for GPIO-E\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::OUTPUT,
                true => P1_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P1_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P1_A::INPUT
        }
    }
    #[doc = "Field `P1` writer - Direction for GPIO-E\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P1_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P1_A::INPUT)
        }
    }
    #[doc = "Field `P2` reader - Direction for GPIO-E\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "Direction for GPIO-E\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::OUTPUT,
                true => P2_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P2_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P2_A::INPUT
        }
    }
    #[doc = "Field `P2` writer - Direction for GPIO-E\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P2_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P2_A::INPUT)
        }
    }
    #[doc = "Field `P3` reader - Direction for GPIO-E\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "Direction for GPIO-E\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::OUTPUT,
                true => P3_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P3_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P3_A::INPUT
        }
    }
    #[doc = "Field `P3` writer - Direction for GPIO-E\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P3_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P3_A::INPUT)
        }
    }
    #[doc = "Field `P4` reader - Direction for GPIO-E\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "Direction for GPIO-E\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::OUTPUT,
                true => P4_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P4_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P4_A::INPUT
        }
    }
    #[doc = "Field `P4` writer - Direction for GPIO-E\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P4_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P4_A::INPUT)
        }
    }
    #[doc = "Field `P5` reader - Direction for GPIO-E\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "Direction for GPIO-E\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::OUTPUT,
                true => P5_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P5_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P5_A::INPUT
        }
    }
    #[doc = "Field `P5` writer - Direction for GPIO-E\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P5_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P5_A::INPUT)
        }
    }
    #[doc = "Field `P6` reader - Direction for GPIO-E\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "Direction for GPIO-E\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::OUTPUT,
                true => P6_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P6_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P6_A::INPUT
        }
    }
    #[doc = "Field `P6` writer - Direction for GPIO-E\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P6_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P6_A::INPUT)
        }
    }
    #[doc = "Field `P7` reader - Direction for GPIO-E\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "Direction for GPIO-E\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::OUTPUT,
                true => P7_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P7_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P7_A::INPUT
        }
    }
    #[doc = "Field `P7` writer - Direction for GPIO-E\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOED, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P7_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P7_A::INPUT)
        }
    }
    impl R {
        #[doc = "Bit 0 - Direction for GPIO-E\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Direction for GPIO-E\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Direction for GPIO-E\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Direction for GPIO-E\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Direction for GPIO-E\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Direction for GPIO-E\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Direction for GPIO-E\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Direction for GPIO-E\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Direction for GPIO-E\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - Direction for GPIO-E\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - Direction for GPIO-E\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - Direction for GPIO-E\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - Direction for GPIO-E\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - Direction for GPIO-E\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - Direction for GPIO-E\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - Direction for GPIO-E\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-E direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioed](index.html) module"]
    pub struct GPIOED;
    impl crate::RegisterSpec for GPIOED {
        const ADDRESS: u8 = 247u8;
    }
    #[doc = "`read()` method returns [gpioed::R](R) reader structure"]
    impl crate::Readable for GPIOED {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpioed::W](W) writer structure"]
    impl crate::Writable for GPIOED {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOED to value 0"]
    impl crate::Resettable for GPIOED {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpioe::GPIOE;
#[doc = "GPIO-E"]
pub mod gpioe {
    #[doc = "Register `GPIOE` reader"]
    pub struct R(crate::R<GPIOE>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOE>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOE>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOE>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOE` writer"]
    pub struct W(crate::W<GPIOE>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOE>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOE>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOE>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - GPIO-E\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "GPIO-E\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::LOW,
                true => P0_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P0_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P0_A::HIGH
        }
    }
    #[doc = "Field `P0` writer - GPIO-E\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P0_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P0_A::HIGH)
        }
    }
    #[doc = "Field `P1` reader - GPIO-E\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "GPIO-E\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::LOW,
                true => P1_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P1_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P1_A::HIGH
        }
    }
    #[doc = "Field `P1` writer - GPIO-E\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P1_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P1_A::HIGH)
        }
    }
    #[doc = "Field `P2` reader - GPIO-E\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "GPIO-E\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::LOW,
                true => P2_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P2_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P2_A::HIGH
        }
    }
    #[doc = "Field `P2` writer - GPIO-E\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P2_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P2_A::HIGH)
        }
    }
    #[doc = "Field `P3` reader - GPIO-E\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "GPIO-E\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::LOW,
                true => P3_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P3_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P3_A::HIGH
        }
    }
    #[doc = "Field `P3` writer - GPIO-E\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P3_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P3_A::HIGH)
        }
    }
    #[doc = "Field `P4` reader - GPIO-E\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "GPIO-E\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::LOW,
                true => P4_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P4_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P4_A::HIGH
        }
    }
    #[doc = "Field `P4` writer - GPIO-E\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P4_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P4_A::HIGH)
        }
    }
    #[doc = "Field `P5` reader - GPIO-E\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "GPIO-E\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::LOW,
                true => P5_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P5_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P5_A::HIGH
        }
    }
    #[doc = "Field `P5` writer - GPIO-E\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P5_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P5_A::HIGH)
        }
    }
    #[doc = "Field `P6` reader - GPIO-E\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "GPIO-E\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::LOW,
                true => P6_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P6_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P6_A::HIGH
        }
    }
    #[doc = "Field `P6` writer - GPIO-E\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P6_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P6_A::HIGH)
        }
    }
    #[doc = "Field `P7` reader - GPIO-E\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "GPIO-E\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::LOW,
                true => P7_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P7_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P7_A::HIGH
        }
    }
    #[doc = "Field `P7` writer - GPIO-E\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOE, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P7_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P7_A::HIGH)
        }
    }
    impl R {
        #[doc = "Bit 0 - GPIO-E\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - GPIO-E\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - GPIO-E\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - GPIO-E\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - GPIO-E\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - GPIO-E\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - GPIO-E\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - GPIO-E\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - GPIO-E\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - GPIO-E\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - GPIO-E\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - GPIO-E\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - GPIO-E\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - GPIO-E\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - GPIO-E\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - GPIO-E\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-E\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioe](index.html) module"]
    pub struct GPIOE;
    impl crate::RegisterSpec for GPIOE {
        const ADDRESS: u8 = 248u8;
    }
    #[doc = "`read()` method returns [gpioe::R](R) reader structure"]
    impl crate::Readable for GPIOE {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpioe::W](W) writer structure"]
    impl crate::Writable for GPIOE {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOE to value 0"]
    impl crate::Resettable for GPIOE {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpiofd::GPIOFD;
#[doc = "GPIO-F direction"]
pub mod gpiofd {
    #[doc = "Register `GPIOFD` reader"]
    pub struct R(crate::R<GPIOFD>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOFD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOFD>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOFD>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOFD` writer"]
    pub struct W(crate::W<GPIOFD>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOFD>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOFD>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOFD>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - Direction for GPIO-F\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "Direction for GPIO-F\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::OUTPUT,
                true => P0_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P0_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P0_A::INPUT
        }
    }
    #[doc = "Field `P0` writer - Direction for GPIO-F\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P0_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P0_A::INPUT)
        }
    }
    #[doc = "Field `P1` reader - Direction for GPIO-F\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "Direction for GPIO-F\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::OUTPUT,
                true => P1_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P1_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P1_A::INPUT
        }
    }
    #[doc = "Field `P1` writer - Direction for GPIO-F\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P1_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P1_A::INPUT)
        }
    }
    #[doc = "Field `P2` reader - Direction for GPIO-F\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "Direction for GPIO-F\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::OUTPUT,
                true => P2_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P2_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P2_A::INPUT
        }
    }
    #[doc = "Field `P2` writer - Direction for GPIO-F\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P2_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P2_A::INPUT)
        }
    }
    #[doc = "Field `P3` reader - Direction for GPIO-F\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "Direction for GPIO-F\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::OUTPUT,
                true => P3_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P3_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P3_A::INPUT
        }
    }
    #[doc = "Field `P3` writer - Direction for GPIO-F\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P3_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P3_A::INPUT)
        }
    }
    #[doc = "Field `P4` reader - Direction for GPIO-F\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "Direction for GPIO-F\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::OUTPUT,
                true => P4_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P4_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P4_A::INPUT
        }
    }
    #[doc = "Field `P4` writer - Direction for GPIO-F\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P4_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P4_A::INPUT)
        }
    }
    #[doc = "Field `P5` reader - Direction for GPIO-F\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "Direction for GPIO-F\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::OUTPUT,
                true => P5_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P5_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P5_A::INPUT
        }
    }
    #[doc = "Field `P5` writer - Direction for GPIO-F\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P5_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P5_A::INPUT)
        }
    }
    #[doc = "Field `P6` reader - Direction for GPIO-F\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "Direction for GPIO-F\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::OUTPUT,
                true => P6_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P6_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P6_A::INPUT
        }
    }
    #[doc = "Field `P6` writer - Direction for GPIO-F\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P6_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P6_A::INPUT)
        }
    }
    #[doc = "Field `P7` reader - Direction for GPIO-F\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "Direction for GPIO-F\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Output"]
        OUTPUT = 0,
        #[doc = "1: Input"]
        INPUT = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::OUTPUT,
                true => P7_A::INPUT,
            }
        }
        #[doc = "Checks if the value of the field is `OUTPUT`"]
        #[inline(always)]
        pub fn is_output(&self) -> bool {
            *self == P7_A::OUTPUT
        }
        #[doc = "Checks if the value of the field is `INPUT`"]
        #[inline(always)]
        pub fn is_input(&self) -> bool {
            *self == P7_A::INPUT
        }
    }
    #[doc = "Field `P7` writer - Direction for GPIO-F\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOFD, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Output"]
        #[inline(always)]
        pub fn output(self) -> &'a mut W {
            self.variant(P7_A::OUTPUT)
        }
        #[doc = "Input"]
        #[inline(always)]
        pub fn input(self) -> &'a mut W {
            self.variant(P7_A::INPUT)
        }
    }
    impl R {
        #[doc = "Bit 0 - Direction for GPIO-F\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - Direction for GPIO-F\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - Direction for GPIO-F\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - Direction for GPIO-F\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - Direction for GPIO-F\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - Direction for GPIO-F\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - Direction for GPIO-F\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - Direction for GPIO-F\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - Direction for GPIO-F\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - Direction for GPIO-F\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - Direction for GPIO-F\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - Direction for GPIO-F\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - Direction for GPIO-F\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - Direction for GPIO-F\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - Direction for GPIO-F\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - Direction for GPIO-F\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-F direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiofd](index.html) module"]
    pub struct GPIOFD;
    impl crate::RegisterSpec for GPIOFD {
        const ADDRESS: u8 = 249u8;
    }
    #[doc = "`read()` method returns [gpiofd::R](R) reader structure"]
    impl crate::Readable for GPIOFD {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpiofd::W](W) writer structure"]
    impl crate::Writable for GPIOFD {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOFD to value 0"]
    impl crate::Resettable for GPIOFD {
        const RESET_VALUE: u8 = 0;
    }
}
pub use gpiof::GPIOF;
#[doc = "GPIO-F"]
pub mod gpiof {
    #[doc = "Register `GPIOF` reader"]
    pub struct R(crate::R<GPIOF>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<GPIOF>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<GPIOF>> for R {
        #[inline(always)]
        fn from(reader: crate::R<GPIOF>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `GPIOF` writer"]
    pub struct W(crate::W<GPIOF>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<GPIOF>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<GPIOF>> for W {
        #[inline(always)]
        fn from(writer: crate::W<GPIOF>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `P0` reader - GPIO-F\\[0\\]"]
    pub type P0_R = crate::BitReader<P0_A>;
    #[doc = "GPIO-F\\[0\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P0_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P0_A> for bool {
        #[inline(always)]
        fn from(variant: P0_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P0_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P0_A {
            match self.bits {
                false => P0_A::LOW,
                true => P0_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P0_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P0_A::HIGH
        }
    }
    #[doc = "Field `P0` writer - GPIO-F\\[0\\]"]
    pub type P0_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P0_A, O>;
    impl<'a, const O: u8> P0_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P0_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P0_A::HIGH)
        }
    }
    #[doc = "Field `P1` reader - GPIO-F\\[1\\]"]
    pub type P1_R = crate::BitReader<P1_A>;
    #[doc = "GPIO-F\\[1\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P1_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P1_A> for bool {
        #[inline(always)]
        fn from(variant: P1_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P1_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P1_A {
            match self.bits {
                false => P1_A::LOW,
                true => P1_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P1_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P1_A::HIGH
        }
    }
    #[doc = "Field `P1` writer - GPIO-F\\[1\\]"]
    pub type P1_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P1_A, O>;
    impl<'a, const O: u8> P1_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P1_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P1_A::HIGH)
        }
    }
    #[doc = "Field `P2` reader - GPIO-F\\[2\\]"]
    pub type P2_R = crate::BitReader<P2_A>;
    #[doc = "GPIO-F\\[2\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P2_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P2_A> for bool {
        #[inline(always)]
        fn from(variant: P2_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P2_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P2_A {
            match self.bits {
                false => P2_A::LOW,
                true => P2_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P2_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P2_A::HIGH
        }
    }
    #[doc = "Field `P2` writer - GPIO-F\\[2\\]"]
    pub type P2_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P2_A, O>;
    impl<'a, const O: u8> P2_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P2_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P2_A::HIGH)
        }
    }
    #[doc = "Field `P3` reader - GPIO-F\\[3\\]"]
    pub type P3_R = crate::BitReader<P3_A>;
    #[doc = "GPIO-F\\[3\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P3_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P3_A> for bool {
        #[inline(always)]
        fn from(variant: P3_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P3_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P3_A {
            match self.bits {
                false => P3_A::LOW,
                true => P3_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P3_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P3_A::HIGH
        }
    }
    #[doc = "Field `P3` writer - GPIO-F\\[3\\]"]
    pub type P3_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P3_A, O>;
    impl<'a, const O: u8> P3_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P3_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P3_A::HIGH)
        }
    }
    #[doc = "Field `P4` reader - GPIO-F\\[4\\]"]
    pub type P4_R = crate::BitReader<P4_A>;
    #[doc = "GPIO-F\\[4\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P4_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P4_A> for bool {
        #[inline(always)]
        fn from(variant: P4_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P4_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P4_A {
            match self.bits {
                false => P4_A::LOW,
                true => P4_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P4_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P4_A::HIGH
        }
    }
    #[doc = "Field `P4` writer - GPIO-F\\[4\\]"]
    pub type P4_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P4_A, O>;
    impl<'a, const O: u8> P4_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P4_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P4_A::HIGH)
        }
    }
    #[doc = "Field `P5` reader - GPIO-F\\[5\\]"]
    pub type P5_R = crate::BitReader<P5_A>;
    #[doc = "GPIO-F\\[5\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P5_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P5_A> for bool {
        #[inline(always)]
        fn from(variant: P5_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P5_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P5_A {
            match self.bits {
                false => P5_A::LOW,
                true => P5_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P5_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P5_A::HIGH
        }
    }
    #[doc = "Field `P5` writer - GPIO-F\\[5\\]"]
    pub type P5_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P5_A, O>;
    impl<'a, const O: u8> P5_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P5_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P5_A::HIGH)
        }
    }
    #[doc = "Field `P6` reader - GPIO-F\\[6\\]"]
    pub type P6_R = crate::BitReader<P6_A>;
    #[doc = "GPIO-F\\[6\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P6_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P6_A> for bool {
        #[inline(always)]
        fn from(variant: P6_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P6_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P6_A {
            match self.bits {
                false => P6_A::LOW,
                true => P6_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P6_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P6_A::HIGH
        }
    }
    #[doc = "Field `P6` writer - GPIO-F\\[6\\]"]
    pub type P6_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P6_A, O>;
    impl<'a, const O: u8> P6_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P6_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P6_A::HIGH)
        }
    }
    #[doc = "Field `P7` reader - GPIO-F\\[7\\]"]
    pub type P7_R = crate::BitReader<P7_A>;
    #[doc = "GPIO-F\\[7\\]\n\nValue on reset: 0"]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum P7_A {
        #[doc = "0: Low"]
        LOW = 0,
        #[doc = "1: High"]
        HIGH = 1,
    }
    impl From<P7_A> for bool {
        #[inline(always)]
        fn from(variant: P7_A) -> Self {
            variant as u8 != 0
        }
    }
    impl P7_R {
        #[doc = "Get enumerated values variant"]
        #[inline(always)]
        pub fn variant(&self) -> P7_A {
            match self.bits {
                false => P7_A::LOW,
                true => P7_A::HIGH,
            }
        }
        #[doc = "Checks if the value of the field is `LOW`"]
        #[inline(always)]
        pub fn is_low(&self) -> bool {
            *self == P7_A::LOW
        }
        #[doc = "Checks if the value of the field is `HIGH`"]
        #[inline(always)]
        pub fn is_high(&self) -> bool {
            *self == P7_A::HIGH
        }
    }
    #[doc = "Field `P7` writer - GPIO-F\\[7\\]"]
    pub type P7_W<'a, const O: u8> = crate::BitWriter<'a, GPIOF, P7_A, O>;
    impl<'a, const O: u8> P7_W<'a, O> {
        #[doc = "Low"]
        #[inline(always)]
        pub fn low(self) -> &'a mut W {
            self.variant(P7_A::LOW)
        }
        #[doc = "High"]
        #[inline(always)]
        pub fn high(self) -> &'a mut W {
            self.variant(P7_A::HIGH)
        }
    }
    impl R {
        #[doc = "Bit 0 - GPIO-F\\[0\\]"]
        #[inline(always)]
        pub fn p0(&self) -> P0_R {
            P0_R::new((self.bits & 1) != 0)
        }
        #[doc = "Bit 1 - GPIO-F\\[1\\]"]
        #[inline(always)]
        pub fn p1(&self) -> P1_R {
            P1_R::new(((self.bits >> 1) & 1) != 0)
        }
        #[doc = "Bit 2 - GPIO-F\\[2\\]"]
        #[inline(always)]
        pub fn p2(&self) -> P2_R {
            P2_R::new(((self.bits >> 2) & 1) != 0)
        }
        #[doc = "Bit 3 - GPIO-F\\[3\\]"]
        #[inline(always)]
        pub fn p3(&self) -> P3_R {
            P3_R::new(((self.bits >> 3) & 1) != 0)
        }
        #[doc = "Bit 4 - GPIO-F\\[4\\]"]
        #[inline(always)]
        pub fn p4(&self) -> P4_R {
            P4_R::new(((self.bits >> 4) & 1) != 0)
        }
        #[doc = "Bit 5 - GPIO-F\\[5\\]"]
        #[inline(always)]
        pub fn p5(&self) -> P5_R {
            P5_R::new(((self.bits >> 5) & 1) != 0)
        }
        #[doc = "Bit 6 - GPIO-F\\[6\\]"]
        #[inline(always)]
        pub fn p6(&self) -> P6_R {
            P6_R::new(((self.bits >> 6) & 1) != 0)
        }
        #[doc = "Bit 7 - GPIO-F\\[7\\]"]
        #[inline(always)]
        pub fn p7(&self) -> P7_R {
            P7_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bit 0 - GPIO-F\\[0\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p0(&mut self) -> P0_W<0> {
            P0_W::new(self)
        }
        #[doc = "Bit 1 - GPIO-F\\[1\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p1(&mut self) -> P1_W<1> {
            P1_W::new(self)
        }
        #[doc = "Bit 2 - GPIO-F\\[2\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p2(&mut self) -> P2_W<2> {
            P2_W::new(self)
        }
        #[doc = "Bit 3 - GPIO-F\\[3\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p3(&mut self) -> P3_W<3> {
            P3_W::new(self)
        }
        #[doc = "Bit 4 - GPIO-F\\[4\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p4(&mut self) -> P4_W<4> {
            P4_W::new(self)
        }
        #[doc = "Bit 5 - GPIO-F\\[5\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p5(&mut self) -> P5_W<5> {
            P5_W::new(self)
        }
        #[doc = "Bit 6 - GPIO-F\\[6\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p6(&mut self) -> P6_W<6> {
            P6_W::new(self)
        }
        #[doc = "Bit 7 - GPIO-F\\[7\\]"]
        #[inline(always)]
        #[must_use]
        pub fn p7(&mut self) -> P7_W<7> {
            P7_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "GPIO-F\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiof](index.html) module"]
    pub struct GPIOF;
    impl crate::RegisterSpec for GPIOF {
        const ADDRESS: u8 = 250u8;
    }
    #[doc = "`read()` method returns [gpiof::R](R) reader structure"]
    impl crate::Readable for GPIOF {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [gpiof::W](W) writer structure"]
    impl crate::Writable for GPIOF {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets GPIOF to value 0"]
    impl crate::Resettable for GPIOF {
        const RESET_VALUE: u8 = 0;
    }
}
pub use kscr1::KSCR1;
#[doc = "Key-Scan Control Register 1"]
pub mod kscr1 {
    #[doc = "Register `KSCR1` reader"]
    pub struct R(crate::R<KSCR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<KSCR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<KSCR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<KSCR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `KSCR1` writer"]
    pub struct W(crate::W<KSCR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<KSCR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<KSCR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<KSCR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `ROW_SCAN_TIME` reader - Row Scan Time"]
    pub type ROW_SCAN_TIME_R = crate::FieldReader<u8>;
    #[doc = "Field `ROW_SCAN_TIME` writer - Row Scan Time"]
    pub type ROW_SCAN_TIME_W<'a, const O: u8> = crate::FieldWriter<'a, KSCR1, u8, u8, 3, O>;
    #[doc = "Field `REPEATABLE_KEY_ENABLE` reader - Repeatable Key enable"]
    pub type REPEATABLE_KEY_ENABLE_R = crate::FieldReader<u8>;
    #[doc = "Field `REPEATABLE_KEY_ENABLE` writer - Repeatable Key enable"]
    pub type REPEATABLE_KEY_ENABLE_W<'a, const O: u8> = crate::FieldWriter<'a, KSCR1, u8, u8, 2, O>;
    #[doc = "Field `SHORT_KEY_DEBOUNCE_TIMES` reader - Short Key de-bounce Times"]
    pub type SHORT_KEY_DEBOUNCE_TIMES_R = crate::FieldReader<u8>;
    #[doc = "Field `SHORT_KEY_DEBOUNCE_TIMES` writer - Short Key de-bounce Times"]
    pub type SHORT_KEY_DEBOUNCE_TIMES_W<'a, const O: u8> =
        crate::FieldWriter<'a, KSCR1, u8, u8, 2, O>;
    #[doc = "Field `LONG_KEY_ENABLE` reader - Long Key Enable Bit"]
    pub type LONG_KEY_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `LONG_KEY_ENABLE` writer - Long Key Enable Bit"]
    pub type LONG_KEY_ENABLE_W<'a, const O: u8> = crate::BitWriter<'a, KSCR1, bool, O>;
    impl R {
        #[doc = "Bits 0:2 - Row Scan Time"]
        #[inline(always)]
        pub fn row_scan_time(&self) -> ROW_SCAN_TIME_R {
            ROW_SCAN_TIME_R::new(self.bits & 7)
        }
        #[doc = "Bits 3:4 - Repeatable Key enable"]
        #[inline(always)]
        pub fn repeatable_key_enable(&self) -> REPEATABLE_KEY_ENABLE_R {
            REPEATABLE_KEY_ENABLE_R::new((self.bits >> 3) & 3)
        }
        #[doc = "Bits 4:5 - Short Key de-bounce Times"]
        #[inline(always)]
        pub fn short_key_debounce_times(&self) -> SHORT_KEY_DEBOUNCE_TIMES_R {
            SHORT_KEY_DEBOUNCE_TIMES_R::new((self.bits >> 4) & 3)
        }
        #[doc = "Bit 6 - Long Key Enable Bit"]
        #[inline(always)]
        pub fn long_key_enable(&self) -> LONG_KEY_ENABLE_R {
            LONG_KEY_ENABLE_R::new(((self.bits >> 6) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 0:2 - Row Scan Time"]
        #[inline(always)]
        #[must_use]
        pub fn row_scan_time(&mut self) -> ROW_SCAN_TIME_W<0> {
            ROW_SCAN_TIME_W::new(self)
        }
        #[doc = "Bits 3:4 - Repeatable Key enable"]
        #[inline(always)]
        #[must_use]
        pub fn repeatable_key_enable(&mut self) -> REPEATABLE_KEY_ENABLE_W<3> {
            REPEATABLE_KEY_ENABLE_W::new(self)
        }
        #[doc = "Bits 4:5 - Short Key de-bounce Times"]
        #[inline(always)]
        #[must_use]
        pub fn short_key_debounce_times(&mut self) -> SHORT_KEY_DEBOUNCE_TIMES_W<4> {
            SHORT_KEY_DEBOUNCE_TIMES_W::new(self)
        }
        #[doc = "Bit 6 - Long Key Enable Bit"]
        #[inline(always)]
        #[must_use]
        pub fn long_key_enable(&mut self) -> LONG_KEY_ENABLE_W<6> {
            LONG_KEY_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Key-Scan Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [kscr1](index.html) module"]
    pub struct KSCR1;
    impl crate::RegisterSpec for KSCR1 {
        const ADDRESS: u8 = 251u8;
    }
    #[doc = "`read()` method returns [kscr1::R](R) reader structure"]
    impl crate::Readable for KSCR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [kscr1::W](W) writer structure"]
    impl crate::Writable for KSCR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets KSCR1 to value 0"]
    impl crate::Resettable for KSCR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use kscr2::KSCR2;
#[doc = "Key-Scan Control Register 2"]
pub mod kscr2 {
    #[doc = "Register `KSCR2` reader"]
    pub struct R(crate::R<KSCR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<KSCR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<KSCR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<KSCR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `KSCR2` writer"]
    pub struct W(crate::W<KSCR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<KSCR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<KSCR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<KSCR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `KEYS_PRESSED` reader - Numbers of Key Hit"]
    pub type KEYS_PRESSED_R = crate::FieldReader<u8>;
    #[doc = "Field `LONG_KEY_RECOGNITION_FACTOR` reader - Long Key Recognition Factor"]
    pub type LONG_KEY_RECOGNITION_FACTOR_R = crate::FieldReader<u8>;
    #[doc = "Field `LONG_KEY_RECOGNITION_FACTOR` writer - Long Key Recognition Factor"]
    pub type LONG_KEY_RECOGNITION_FACTOR_W<'a, const O: u8> =
        crate::FieldWriter<'a, KSCR2, u8, u8, 3, O>;
    #[doc = "Field `KEY_RELEASED_INTERRUPT_ENABLE` reader - Key released interrupt enable"]
    pub type KEY_RELEASED_INTERRUPT_ENABLE_R = crate::FieldReader<u8>;
    #[doc = "Field `KEY_RELEASED_INTERRUPT_ENABLE` writer - Key released interrupt enable"]
    pub type KEY_RELEASED_INTERRUPT_ENABLE_W<'a, const O: u8> =
        crate::FieldWriter<'a, KSCR2, u8, u8, 2, O>;
    #[doc = "Field `KEY_SCAN_WAKEUP_FUNCTION_ENABLE` reader - Key-Scan Wakeup Function Enable Bit"]
    pub type KEY_SCAN_WAKEUP_FUNCTION_ENABLE_R = crate::BitReader<bool>;
    #[doc = "Field `KEY_SCAN_WAKEUP_FUNCTION_ENABLE` writer - Key-Scan Wakeup Function Enable Bit"]
    pub type KEY_SCAN_WAKEUP_FUNCTION_ENABLE_W<'a, const O: u8> =
        crate::BitWriter<'a, KSCR2, bool, O>;
    impl R {
        #[doc = "Bits 0:1 - Numbers of Key Hit"]
        #[inline(always)]
        pub fn keys_pressed(&self) -> KEYS_PRESSED_R {
            KEYS_PRESSED_R::new(self.bits & 3)
        }
        #[doc = "Bits 2:4 - Long Key Recognition Factor"]
        #[inline(always)]
        pub fn long_key_recognition_factor(&self) -> LONG_KEY_RECOGNITION_FACTOR_R {
            LONG_KEY_RECOGNITION_FACTOR_R::new((self.bits >> 2) & 7)
        }
        #[doc = "Bits 6:7 - Key released interrupt enable"]
        #[inline(always)]
        pub fn key_released_interrupt_enable(&self) -> KEY_RELEASED_INTERRUPT_ENABLE_R {
            KEY_RELEASED_INTERRUPT_ENABLE_R::new((self.bits >> 6) & 3)
        }
        #[doc = "Bit 7 - Key-Scan Wakeup Function Enable Bit"]
        #[inline(always)]
        pub fn key_scan_wakeup_function_enable(&self) -> KEY_SCAN_WAKEUP_FUNCTION_ENABLE_R {
            KEY_SCAN_WAKEUP_FUNCTION_ENABLE_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Bits 2:4 - Long Key Recognition Factor"]
        #[inline(always)]
        #[must_use]
        pub fn long_key_recognition_factor(&mut self) -> LONG_KEY_RECOGNITION_FACTOR_W<2> {
            LONG_KEY_RECOGNITION_FACTOR_W::new(self)
        }
        #[doc = "Bits 6:7 - Key released interrupt enable"]
        #[inline(always)]
        #[must_use]
        pub fn key_released_interrupt_enable(&mut self) -> KEY_RELEASED_INTERRUPT_ENABLE_W<6> {
            KEY_RELEASED_INTERRUPT_ENABLE_W::new(self)
        }
        #[doc = "Bit 7 - Key-Scan Wakeup Function Enable Bit"]
        #[inline(always)]
        #[must_use]
        pub fn key_scan_wakeup_function_enable(&mut self) -> KEY_SCAN_WAKEUP_FUNCTION_ENABLE_W<7> {
            KEY_SCAN_WAKEUP_FUNCTION_ENABLE_W::new(self)
        }
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Key-Scan Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [kscr2](index.html) module"]
    pub struct KSCR2;
    impl crate::RegisterSpec for KSCR2 {
        const ADDRESS: u8 = 252u8;
    }
    #[doc = "`read()` method returns [kscr2::R](R) reader structure"]
    impl crate::Readable for KSCR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [kscr2::W](W) writer structure"]
    impl crate::Writable for KSCR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets KSCR2 to value 0"]
    impl crate::Resettable for KSCR2 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ksdr0::KSDR0;
#[doc = "Key-Scan Data Register"]
pub mod ksdr0 {
    #[doc = "Register `KSDR0` reader"]
    pub struct R(crate::R<KSDR0>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<KSDR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<KSDR0>> for R {
        #[inline(always)]
        fn from(reader: crate::R<KSDR0>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `KSDR0` writer"]
    pub struct W(crate::W<KSDR0>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<KSDR0>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<KSDR0>> for W {
        #[inline(always)]
        fn from(writer: crate::W<KSDR0>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `KEY_STROBE_DATA` reader - Key Strobe Data0"]
    pub type KEY_STROBE_DATA_R = crate::BitReader<bool>;
    impl R {
        #[doc = "Bit 7 - Key Strobe Data0"]
        #[inline(always)]
        pub fn key_strobe_data(&self) -> KEY_STROBE_DATA_R {
            KEY_STROBE_DATA_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Key-Scan Data Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ksdr0](index.html) module"]
    pub struct KSDR0;
    impl crate::RegisterSpec for KSDR0 {
        const ADDRESS: u8 = 253u8;
    }
    #[doc = "`read()` method returns [ksdr0::R](R) reader structure"]
    impl crate::Readable for KSDR0 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ksdr0::W](W) writer structure"]
    impl crate::Writable for KSDR0 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets KSDR0 to value 0"]
    impl crate::Resettable for KSDR0 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ksdr1::KSDR1;
#[doc = "Key-Scan Data Register"]
pub mod ksdr1 {
    #[doc = "Register `KSDR1` reader"]
    pub struct R(crate::R<KSDR1>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<KSDR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<KSDR1>> for R {
        #[inline(always)]
        fn from(reader: crate::R<KSDR1>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `KSDR1` writer"]
    pub struct W(crate::W<KSDR1>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<KSDR1>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<KSDR1>> for W {
        #[inline(always)]
        fn from(writer: crate::W<KSDR1>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `KEY_STROBE_DATA` reader - Key Strobe Data1"]
    pub type KEY_STROBE_DATA_R = crate::BitReader<bool>;
    impl R {
        #[doc = "Bit 7 - Key Strobe Data1"]
        #[inline(always)]
        pub fn key_strobe_data(&self) -> KEY_STROBE_DATA_R {
            KEY_STROBE_DATA_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Key-Scan Data Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ksdr1](index.html) module"]
    pub struct KSDR1;
    impl crate::RegisterSpec for KSDR1 {
        const ADDRESS: u8 = 254u8;
    }
    #[doc = "`read()` method returns [ksdr1::R](R) reader structure"]
    impl crate::Readable for KSDR1 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ksdr1::W](W) writer structure"]
    impl crate::Writable for KSDR1 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets KSDR1 to value 0"]
    impl crate::Resettable for KSDR1 {
        const RESET_VALUE: u8 = 0;
    }
}
pub use ksdr2::KSDR2;
#[doc = "Key-Scan Data Register"]
pub mod ksdr2 {
    #[doc = "Register `KSDR2` reader"]
    pub struct R(crate::R<KSDR2>);
    impl core::convert::From<u8> for R {
        fn from(original: u8) -> R {
            R(crate::R {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<R> for u8 {
        fn from(original: R) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for R {
        type Target = crate::R<KSDR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl From<crate::R<KSDR2>> for R {
        #[inline(always)]
        fn from(reader: crate::R<KSDR2>) -> Self {
            R(reader)
        }
    }
    #[doc = "Register `KSDR2` writer"]
    pub struct W(crate::W<KSDR2>);
    impl core::convert::From<u8> for W {
        fn from(original: u8) -> W {
            W(crate::W {
                bits: original,
                _reg: core::marker::PhantomData,
            })
        }
    }
    impl core::convert::From<W> for u8 {
        fn from(original: W) -> u8 {
            original.0.bits
        }
    }
    impl core::ops::Deref for W {
        type Target = crate::W<KSDR2>;
        #[inline(always)]
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl core::ops::DerefMut for W {
        #[inline(always)]
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl From<crate::W<KSDR2>> for W {
        #[inline(always)]
        fn from(writer: crate::W<KSDR2>) -> Self {
            W(writer)
        }
    }
    #[doc = "Field `KEY_STROBE_DATA` reader - Key Strobe Data2"]
    pub type KEY_STROBE_DATA_R = crate::BitReader<bool>;
    impl R {
        #[doc = "Bit 7 - Key Strobe Data2"]
        #[inline(always)]
        pub fn key_strobe_data(&self) -> KEY_STROBE_DATA_R {
            KEY_STROBE_DATA_R::new(((self.bits >> 7) & 1) != 0)
        }
    }
    impl W {
        #[doc = "Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
            self.0.bits(bits);
            self
        }
    }
    #[doc = "Key-Scan Data Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ksdr2](index.html) module"]
    pub struct KSDR2;
    impl crate::RegisterSpec for KSDR2 {
        const ADDRESS: u8 = 255u8;
    }
    #[doc = "`read()` method returns [ksdr2::R](R) reader structure"]
    impl crate::Readable for KSDR2 {
        type Reader = R;
    }
    #[doc = "`write(|w| ..)` method takes [ksdr2::W](W) writer structure"]
    impl crate::Writable for KSDR2 {
        type Writer = W;
        const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
        const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    }
    #[doc = "`reset()` method sets KSDR2 to value 0"]
    impl crate::Resettable for KSDR2 {
        const RESET_VALUE: u8 = 0;
    }
}
#[inline(always)]
pub fn read<REG>(bits: u8) -> REG::Reader
where
    REG: Readable,
{
    REG::Reader::from(R {
        bits: bits,
        _reg: core::marker::PhantomData,
    })
}
#[inline(always)]
pub fn write<REG, F>(f: F) -> u8
where
    REG: Resettable + Writable,
    F: FnOnce(&mut REG::Writer) -> &mut W<REG>,
{
    f(&mut REG::Writer::from(W {
        bits: REG::RESET_VALUE & !REG::ONE_TO_MODIFY_FIELDS_BITMAP
            | REG::ZERO_TO_MODIFY_FIELDS_BITMAP,
        _reg: core::marker::PhantomData,
    }))
    .bits
}
#[inline(always)]
pub fn modify<REG, F>(bits: u8, f: F) -> u8
where
    REG: Readable + Writable,
    for<'w> F: FnOnce(&REG::Reader, &'w mut REG::Writer) -> &'w mut W<REG>,
{
    f(
        &REG::Reader::from(R {
            bits,
            _reg: core::marker::PhantomData,
        }),
        &mut REG::Writer::from(W {
            bits: bits & !REG::ONE_TO_MODIFY_FIELDS_BITMAP | REG::ZERO_TO_MODIFY_FIELDS_BITMAP,
            _reg: core::marker::PhantomData,
        }),
    )
    .bits
}
